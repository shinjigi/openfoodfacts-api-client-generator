/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/api/v2/product/{barcode}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get information for a specific product by barcode
         * @description Fetches product details by its unique barcode.
         *     Can return all product details or specific fields like knowledge panels.
         *
         */
        get: operations["get-product-by-barcode"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cgi/product_image_upload.pl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add a Photo to an Existing Product
         * @description Photos are source and proof of data.
         *     The first photo uploaded for a product is
         *     auto-selected as the product’s “front” photo.'
         *
         */
        post: operations["get-cgi-product_image_upload.pl"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cgi/ingredients.pl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Performing OCR on a Product
         * @description Open Food Facts uses optical character recognition (OCR) to retrieve nutritional data and other information from the product labels.
         *
         */
        get: operations["get-cgi-ingredients.pl"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cgi/product_image_crop.pl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Rotate A Photo
         * @description Although we recommend rotating photos manually and uploading a new version of the image,
         *     the OFF API allows you to make api calls to automate this process.
         *     You can rotate existing photos by setting the angle to 90º, 180º, or 270º clockwise.
         *
         */
        get: operations["get-cgi-product_image_crop.pl"];
        put?: never;
        /**
         * Crop A Photo
         * @description Cropping is only relevant for editing existing products.
         *     You cannot crop an image the first time you upload it to the system.
         *
         */
        post: operations["post-cgi-product_image_crop.pl"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cgi/product_image_unselect.pl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Unselect A Photo
         * @description This endpoint allows the user to unselect a photo for a product.
         *     The user must provide the product code and the image ID to unselect.
         *
         */
        post: operations["post-cgi-product_image_unselect.pl"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cgi/product_jqm2.pl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Add or Edit A Product
         * @description This updates a product.
         *
         *     Note: If the barcode exists then you will be editing the existing product,
         *     However if it doesn''t you will be creating a new product with that unique barcode,
         *     and adding properties to the product.
         *
         */
        post: operations["post-cgi-product_jqm2.pl"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search for Products
         * @description Search request allows you to get products that match your search criteria.
         *
         *     It allows you create many custom APIs for your use case.
         *
         *     If the search query parameter has 2 possible values, they are seperated by a comma(,).
         *     When filtering via a parameter that has different language codes like `fr`, `de` or `en`, specify the language code in the parameter name e.g `categories_tags_en`
         *
         *     **Important:** search API v2 does not support full text request (search_term),
         *     you have to use [search API v1](https://wiki.openfoodfacts.org/API/Read/Search) for that.
         *     Upcoming [search-a-licious project](https://github.com/openfoodfacts/search-a-licious) will fix that.
         *
         *     ### Limiting results
         *
         *     You can limit the size of returned objects thanks to the `fields` object (see below).
         *
         *     eg: `fields=code,product_name,brands,attribute_groups``
         *
         *     Please use it as much as possible to avoid overloading the servers.
         *
         *     The search use pagination, see `page` and `page_size` parameters.
         *
         *     **Beware:** the `page_count` data in item is a bit counter intuitive…, read the description.
         *
         *     ### Conditions on tags
         *
         *     All `_tags`` parameters accepts either:
         *
         *     * a single value
         *     * or a comma-separated list of values (doing a AND)
         *     * or a pipe separated list of values (doing a OR)
         *
         *     You can exclude terms by using a "-" prefix.
         *
         *     For taxonomized entries, you might either use the tag id (recommended),
         *     or a known synonym (without language prefix)
         *
         *     * `labels_tags=en:organic,en:fair-trade` find items that are fair-trade AND organic
         *     * `labels_tags=en:organic|en:fair-trade` find items that are fair-trade OR organic
         *     * `labels_tags=en:organic,en:-fair-trade` find items that are organic BUT NOT fair-trade
         *
         *
         *     ### Conditions on nutriments
         *
         *     To get a list of nutrients
         *
         *     You can either query on nutrient per 100g (`_100g` suffix)
         *     or per serving (`serving` suffix).
         *
         *     You can also add `_prepared_`
         *     to get the nutrients in the prepared product instead of as sold.
         *
         *     You can add a comparison operator and value to the parameter name
         *     to get products with nutrient above or bellow a value.
         *     If you use a parameter value it exactly match it.
         *
         *     * `energy-kj_100g<200` products where energy in kj for 100g is less than 200kj
         *     * `sugars_serving>10` products where sugar per serving is greater than 10g
         *     * `saturated-fat_100g=1` products where saturated fat per 100g is exactly 10g
         *     * `salt_prepared_serving<0.1` products where salt per serving for prepared product is less than 0.1g
         *
         *     ### More references
         *
         *     See also [wiki page](https://wiki.openfoodfacts.org/Open_Food_Facts_Search_API_Version_2)
         *
         */
        get: operations["get-search"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cgi/search.pl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search products with filters (GET)
         * @description Search products with filters (GET)
         */
        get: operations["searchV1ProductsGet"];
        put?: never;
        /**
         * Search products with filters (POST)
         * @description Search products with filters (POST)
         */
        post: operations["searchV1ProductsPost"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cgi/suggest.pl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get Suggestions to Aid Adding/Editing Products
         * @description For example , Dave is looking for packaging_shapes that contain the term "fe",
         *     all packaging_shapes containing "fe" will be returned.
         *     This is useful if you have a search in your application,
         *     for a specific product field.
         *
         */
        get: operations["get-cgi-suggest.pl"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cgi/nutrients.pl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get a nested list of nutrients that can be displayed in the nutrition facts table for a specific country and language
         * @description Used to display the nutrition facts table of a product, or to display a form to input those nutrition facts.
         *
         */
        get: operations["get-cgi-nutrients.pl"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/attribute_groups": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the list of attributes available for personal search.
         * @description Attributes are at the heart of personal search.
         *     They score the products according to different criterias,
         *     which could then be matched to a user's preferences.
         *
         *     This API helps you list attributes and display them in your application,
         *     for the user to choose the importance of each criteria.
         *
         *     note: /api/v2/attribute_groups_{lc} is also a valid route, but consider it deprecated
         *
         */
        get: operations["get-attribute-groups"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v2/preferences": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get the weights corresponding to attributes preferences
         *     to compute personal product
         *
         * @description This endpoint retrieves the weights corresponding to attribute preferences
         *     for computing personal product recommendations. The weights are used to
         *     personalize the product recommendations based on user preferences.
         *
         */
        get: operations["get-preferences"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/cgi/session.pl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Login and obtain a session cookie
         * @description Retrieve session cookie for writing operations.
         */
        post: operations["get-cgi-session.pl"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /** @description Schema for application credentials */
        AppCredentials: {
            /** @description Name of the application */
            app_name: string;
            /** @description Version of the application */
            app_version: string;
            /** @description A salted random uuid (Unique identifier) for the user so that Open Food Facts moderators
             *     can selectively ban any problematic user without banning your whole app account.
             *      */
            app_uuid: string;
        };
        "Product-Base": components["schemas"]["product_base"];
        "Product-Misc": components["schemas"]["product_misc"];
        "Product-Tags": components["schemas"]["product_tags"];
        "Product-Images": components["schemas"]["product_images"];
        "Product-Eco-Score": components["schemas"]["product_ecoscore"];
        "Product-Ingredients": components["schemas"]["product_ingredients"];
        "Product-Nutrition": components["schemas"]["product_nutrition"];
        "Product-Nutriscore": components["schemas"]["NutriscoreAll"];
        "Product-Quality": components["schemas"]["product_quality"];
        "Product-Extended": components["schemas"]["product_extended"];
        "Product-Metadata": components["schemas"]["product_meta"];
        "Product-Knowledge-Panels": components["schemas"]["product_knowledge_panels"];
        "Product-Attribute-Groups": components["schemas"]["product_attribute_groups"];
        Product: components["schemas"]["product"];
        /** ingredient */
        Ingredient: {
            ciqual_food_code?: string;
            ciqual_proxy_food_code?: string;
            ecobalyse_code?: string;
            from_palm_oil?: string;
            id?: string;
            ingredients?: components["schemas"]["Ingredients"];
            /** @description The percentage of the ingredient. */
            percent?: number;
            is_in_taxonomy?: number;
            /** @description Estimated percentage of the ingredient. */
            percent_estimate?: number;
            /** @description A textual description of the processing applied to the ingredient.
             *     This can include methods like roasting, frying, fermenting, or other techniques.
             *      */
            processing?: string;
            /** @description Maximum percentage of the ingredient. */
            percent_max?: string | number;
            /** @description Minimum percentage of the ingredient. */
            percent_min?: number;
            /** @description Text description of the ingredient. */
            text?: string;
            /** @description Indicates if the ingredient is vegan. */
            vegan?: string;
            /** @description Indicates if the ingredient is vegetarian. */
            vegetarian?: string;
        };
        /** nutrient */
        Nutrient: {
            /** @description id of the nutrient */
            id?: string;
            /** @description Name of the nutrient in the requested language */
            name?: string;
            /** @description Indicates if the nutrient is always shown on the nutrition facts table */
            important?: boolean;
            /** @description Indicates if the nutrient should be shown in the nutrition facts edit form */
            display_in_edit_form?: boolean;
            /** @description Default unit of the nutrient */
            unit?: components["schemas"]["nutrient_unit"];
            nutrients?: components["schemas"]["Nutrients"];
        };
        /** get_product_by_barcode_base_response */
        get_product_by_barcode_base: {
            /** @description Barcode of the product
             *     (can be EAN-13 or internal codes for some food stores).
             *     For products without a barcode, Open Food Facts assigns a
             *     number starting with the 200 reserved prefix.
             *      */
            code?: string;
            /**
             * @description Return values based on ProductOpener/Display.pm analysis
             * @enum {integer}
             */
            status?: 0 | 1;
            status_verbose?: string;
        };
        /** @description Base product data
         *      */
        product_base: {
            /** @description Abbreviated name in requested language */
            abbreviated_product_name?: string;
            /** @description barcode of the product (can be EAN-13 or internal codes for some food stores),
             *     for products without a barcode,
             *     Open Food Facts assigns a number starting with the 200 reserved prefix
             *      */
            code?: string;
            codes_tags?: string[];
            generic_name_it?: string;
            /** @description Legal name of the product as regulated
             *     by the European authorities.
             *      */
            generic_name?: string;
            /** @description id in database of the product, this normally is the barcode */
            _id?: string;
            _keywords?: string[];
            /** @description internal identifier for the product, usually set to the value of `code`,
             *     except on the producers platform where it is prefixed by the owner
             *      */
            id?: string;
            /** @description Main language of the product.
             *     This is a duplicate of `lang` property (for historical reasons).
             *      */
            lc?: string;
            /** @description Main language of the product.
             *
             *     This should be the main language of product packaging (if one is predominant).
             *
             *     Main language is also used to decide which ingredients list to parse.
             *      */
            lang?: string;
            /** @description Nova group as an integer from 1 to 4. See https://world.openfoodfacts.org/nova
             *      */
            nova_group?: number;
            nova_groups?: string;
            obsolete?: string;
            /** @description A date at which the product was declared obsolete.
             *     This means it's not produced any more.
             *      */
            obsolete_since_date?: string;
            /** @description The name of the product
             *      */
            product_name?: string;
            /** @description Italian name of the product
             *      */
            product_name_it?: string;
            /** @description The name of the product can also
             *     be in many other languages like
             *     product_name_fr (for French).
             *      */
            product_name_en?: string;
            /**
             * @description The size in g or ml for the whole product.
             *     It's a normalized version of the quantity field.
             *
             * @example 500
             */
            product_quantity?: string;
            /**
             * @description The unit (either g or ml) for the correponding product_quantity.
             *
             * @example g
             */
            product_quantity_unit?: string;
            /** @description Quantity and Unit.
             *      */
            quantity?: string;
        };
        /**
         * Packaging component (READ)
         * @description Each packaging component has different properties to specify how many there are, its shape, material etc.
         *
         *     The shape, material and recycling properties are mapped to one entry in the packaging_shapes, packaging_materials and packaging_recycling taxonomies, and the value of the property is the canonical name of the taxonomy entry (e.g. en:bottle).
         *
         *     They may contain values that could not yet get matched to their respective taxonomy, in which case they will contain a free text value prefixed with the language code of this text value (e.g. "fr:Bouteille sphérique" might have been entered by a French user to indicate it is a spherical bottle).
         */
        packaging_component: {
            /** @description umber of units of this packaging component contained in the product (e.g. 6 for a pack of 6 bottles) */
            number_of_units?: number;
            shape?: string;
            material?: string;
            recycling?: string;
            /** @description Quantity (weight or volume) of food product contained in the packaging component. (e.g. 75cl for a wine bottle) */
            quantity_per_unit?: string;
            /** @description Value parsed from the quantity field. */
            quantity_per_unit_value?: number;
            /** @description Unit parsed and normalized from the quantity field. */
            quantity_per_unit_unit?: string;
            /** @description Weight (as specified by the manufacturer) of one unit of the empty packaging component (in grams). (e.g. for a 6 pack of 1.5l water bottles, it might be 30, the weight in grams of 1 empty water bottle without its cap which is a different packaging component). */
            weight_specified?: number;
            /** @description Weight (as measured by one or more users) of one unit of the empty packaging component (in grams). (e.g. for a 6 pack of 1.5l water bottles, it might be 30, the weight in grams of 1 empty water bottle without its cap which is a different packaging component). */
            weight_measured?: number;
            /** @description Weight (as estimated from similar products) of one unit of the empty packaging component (in grams). (e.g. for a 6 pack of 1.5l water bottles, it might be 30, the weight in grams of 1 empty water bottle without its cap which is a different packaging component). */
            weight_estimated?: number;
            /** @description Weight of one unit of the empty packaging component. */
            weight?: number;
            /** @description Indicates which field was used to populate the "weight" field. Either "specified", "measured", or "estimated" */
            weight_source_id?: string;
        };
        /**
         * Packagings (READ)
         * @description The packagings object is an array of individual packaging component objects.
         *
         *     The Packaging data document explains how packaging data is structured in Open Food Facts: https://openfoodfacts.github.io/openfoodfacts-server/dev/explain-packaging-data/
         *
         *     The shape, material and recycling properties of each packaging component are linked to entries in the packaging_shapes, packaging_materials and packaging_recycling taxonomies:
         *
         *     https://world.openfoodfacts.org/data/taxonomies/packaging_shapes.json
         *     https://world.openfoodfacts.org/data/taxonomies/packaging_materials.json
         *     https://world.openfoodfacts.org/data/taxonomies/packaging_recycling.json
         *
         *     If the tags_lc field is set, the properties will include a lc_name field with the translation in the requested language.
         */
        packagings: components["schemas"]["packaging_component"][];
        /**
         * packagings_complete
         * @description Indicate if the packagings array contains all the packaging parts of the product. This field can be set by users when they enter or verify packaging data. Possible values are 0 or 1.
         */
        packagings_complete: number;
        /**
         * product_misc
         * @description Miscellaneous but important fields of a product
         *
         */
        product_misc: {
            /** @description Number of food additives.
             *      */
            additives_n?: number;
            checked?: string;
            complete?: number;
            completeness?: number;
            /** @description See also: `ecoscore_tags`
             *      */
            ecoscore_grade?: string;
            /** @description See also: `ecoscore_tags`
             *      */
            ecoscore_score?: number;
            food_groups?: string;
            food_groups_tags?: string[];
            /** @description Traffic light indicators on main nutrients levels
             *      */
            nutrient_levels?: {
                /** @enum {string} */
                fat?: "low" | "moderate" | "high";
                /** @enum {string} */
                salt?: "low" | "moderate" | "high";
                /** @enum {string} */
                "saturated-fat"?: "low" | "moderate" | "high";
                /** @enum {string} */
                sugars?: "low" | "moderate" | "high";
            };
            /** @description Recycling instructions as raw text, e.g. Plastic
             *     bottle to recycle, Plastic cap to recycle.
             *     This will get automatically parsed and
             *     will be used to compute the Eco-Score.
             *     You can either request it (if it exists) or
             *     send it in a specific language.
             *      */
            packaging_text?: string;
            packagings?: components["schemas"]["packagings"];
            packagings_complete?: components["schemas"]["packagings_complete"];
            /** @description Category of food according to [French Nutrition and Health Program](https://fr.wikipedia.org/wiki/Programme_national_nutrition_sant%C3%A9)
             *      */
            pnns_groups_1?: string;
            pnns_groups_1_tags?: string[];
            /** @description Sub Category of food according to [French Nutrition and Health Program](https://fr.wikipedia.org/wiki/Programme_national_nutrition_sant%C3%A9)
             *      */
            pnns_groups_2?: string;
            pnns_groups_2_tags?: string[];
            /** @description An imprecise measurement of popularity based on Scan statistics. A higher value means higher popularity.
             *      */
            popularity_key?: number;
            /** @description Indicators for the popularity of a product, like the amount of scans in a specific year.
             *      */
            popularity_tags?: string[];
            scans_n?: number;
            unique_scans_n?: number;
            sortkey?: number;
            /** @description Normalized version of serving_size.
             *     Note that this is NOT the number of servings by product.
             *     <small>(in perl, see `normalize_serving_size`)</small>
             *      */
            serving_quantity?: string;
            /** @description The unit (either g or ml) for the correponding serving_quantity.
             *      */
            serving_quantity_unit?: string;
            /** @description Serving size text (generally in g or ml).
             *     We expect a quantity + unit but the user is free to input any string.
             *      */
            serving_size?: string;
        };
        /** @description Data about a product which is represented as tags
         *      */
        product_tags: {
            /** @description List of brands (not taxonomized) */
            brands?: string;
            brands_tags?: string[];
            categories?: string;
            categories_hierarchy?: string[];
            /** @description Categories language code */
            categories_lc?: string;
            categories_old?: string;
            categories_tags?: string[];
            checkers_tags?: string[];
            cities?: string;
            cities_tags?: Record<string, never>[];
            correctors_tags?: string[];
            /** @description List of countries where the product is sold.
             *      */
            countries?: string;
            countries_beforescanbot?: string;
            countries_hierarchy?: string[];
            /** @description Countries language code */
            countries_lc?: string;
            countries_tags?: string[];
            /** @description All ecoscore of a product.
             *     Most of the time it's only one value,
             *     but it might eventually be more for products composed of sub-products.
             *     See also: `ecoscore_score`, `ecoscore_grade`.
             *      */
            ecoscore_tags?: string[];
            /** @description Packager code. EMB is the French system of traceability codes for packager.
             *      */
            emb_codes?: string;
            emb_codes_orig?: string;
            emb_codes_tags?: string[];
            labels?: string;
            labels_hierarchy?: string[];
            labels_lc?: string;
            labels_tags?: string[];
            /** @description The data as a series of tag: `yyyy-mm-dd`, `yyyy-mm`, `yyyy`
             *      */
            entry_dates_tags?: string[];
            /** @description Places where the product was manufactured or transformed.
             *      */
            manufacturing_places?: string;
            manufacturing_places_tags?: string[];
            nova_groups_tags?: string[];
            nutrient_levels_tags?: string[];
        };
        /**
         * image_size
         * @description properties of fullsize image
         *     **TODO** explain how to compute name
         *
         */
        image_size: {
            /** @description The height of the reduced/full image in pixels.
             *      */
            h?: number;
            /** @description The width of the reduced/full image in pixels.
             *      */
            w?: number;
        };
        /**
         * image_role
         * @description property of an image (or part thereof) selected for a particular role and a particular language.
         *
         */
        ImageRole: {
            /** @description The angle of the image rotation (if it was rotated). */
            angle?: number;
            coordinates_image_size?: string;
            geometry?: string;
            /** @description The id of the original/source image that was selected to edit(rotate, normalize etc) to produce this new image. */
            imgid?: string;
            /** @description Normalize colors. */
            normalize?: string | boolean | null;
            rev?: string;
            /** @description The available image sizes for the product (both reduced and full).
             *     The reduced images are the ones with numbers as the key( 100, 200 etc)
             *     while the full images have `full` as the key.
             *      */
            sizes?: {
                100?: components["schemas"]["image_size"];
                200?: components["schemas"]["image_size"];
                400?: components["schemas"]["image_size"];
                full?: components["schemas"]["image_size"];
            };
            /** @description Photo on white background : Try to remove the background.
             *      */
            white_magic?: string | boolean | null;
            x1?: string;
            x2?: string;
            y1?: string;
            y2?: string;
        };
        /** @description The available image sizes for the product (both reduced and full).
         *     The reduced images are the ones with numbers as the key( 100, 200 etc)
         *     while the full images have `full` as the key.
         *      */
        Sizes: {
            full?: components["schemas"]["image_size"];
        };
        /**
         * image
         * @description This object represent an image that was uploaded to a product.
         *     "imgid" is an integer which is a sequential number unique to each picture.
         *
         */
        Image: {
            sizes?: components["schemas"]["Sizes"];
            /** @description The time the image was uploaded (as unix timestamp).
             *      */
            uploaded_t?: string;
            /** @description The contributor that uploaded the image.
             *      */
            uploader?: string;
        };
        ImageUrls: Record<string, never>;
        /** @description URLs of thumbnails image of image of type `image_type` */
        SelectedImage: {
            /** @description Thumbnail urls of product image (front) adapted to display on product page
             *      */
            display?: components["schemas"]["ImageUrls"];
            /** @description Thumbnail urls of product image (front) adapted to display on product list page
             *      */
            small?: components["schemas"]["ImageUrls"];
            /** @description Thumbnail urls of product image (front) in smallest format
             *      */
            thumb?: components["schemas"]["ImageUrls"];
        };
        /**
         * product_images
         * @description Information about Images of a product.
         *
         *     Images ensure the reliability of Open Food Facts data.
         *     It provides a primary source and proof of all the structured data.
         *     You may therefore want to display it along the structured information.
         *
         *     See also tutorials about images:
         *     * [Getting images](https://openfoodfacts.github.io/openfoodfacts-server/api/how-to-download-images/)
         *     * [Uploading images](https://openfoodfacts.github.io/openfoodfacts-server/api/tutorial-uploading-photo-to-a-product/)
         *
         */
        product_images: {
            image_front_small_url?: string;
            image_front_thumb_url?: string;
            image_front_url?: string;
            image_ingredients_small_url?: string;
            image_ingredients_thumb_url?: string;
            image_ingredients_url?: string;
            image_packaging_small_url?: string;
            image_packaging_thumb_url?: string;
            image_packaging_url?: string;
            image_nutrition_small_url?: string;
            image_nutrition_thumb_url?: string;
            image_nutrition_url?: string;
            image_small_url?: string;
            image_thumb_url?: string;
            image_url?: string;
            /**
             * product_images_properties
             * @description This contains properties for all images contained on the product.
             *
             */
            images?: {
                front?: components["schemas"]["ImageRole"];
            } & {
                [key: string]: components["schemas"]["Image"];
            };
            last_image_dates_tags?: string[];
            /** @description timestamp of last image upload (or update?) */
            last_image_t?: number;
            /**
             * product_selected_images
             * @description URL for selected (important) images of the product.
             *
             *     This is very handy if you display the product to users.
             *
             */
            selected_images?: {
                ingredients?: components["schemas"]["SelectedImage"];
                nutrition?: components["schemas"]["SelectedImage"];
                packaging?: components["schemas"]["SelectedImage"];
                front?: components["schemas"]["SelectedImage"];
            };
        };
        /** @enum {string} */
        EcoscoreCountryCode: "ad" | "al" | "at" | "ax" | "ba" | "be" | "bg" | "ch" | "cy" | "cz" | "de" | "dk" | "dz" | "ee" | "eg" | "es" | "fi" | "fo" | "fr" | "gg" | "gi" | "gr" | "hr" | "hu" | "ie" | "il" | "im" | "is" | "it" | "je" | "lb" | "li" | "lt" | "lu" | "lv" | "ly" | "ma" | "mc" | "md" | "me" | "mk" | "mt" | "nl" | "no" | "pl" | "ps" | "pt" | "ro" | "rs" | "se" | "si" | "sj" | "sk" | "sm" | "sy" | "tn" | "tr" | "ua" | "uk" | "us" | "va" | "world" | "xk";
        EcoscoreCountryValues: {
            [key: string]: number;
        };
        agribalyse: {
            agribalyse_proxy_food_code?: string;
            agribalyse_food_code?: string;
            co2_agriculture?: number;
            co2_consumption?: number;
            co2_distribution?: number;
            co2_packaging?: number;
            co2_processing?: number;
            co2_total?: number;
            co2_transportation?: number;
            code?: string;
            dqr?: string;
            ef_agriculture?: number;
            ef_consumption?: number;
            ef_distribution?: number;
            ef_packaging?: number;
            ef_processing?: number;
            ef_total?: number;
            ef_transportation?: number;
            is_beverage?: number;
            /** @description This can be returned in many other languages
             *     like name_fr (for french).
             *      */
            name_en?: string;
            score?: number;
            version?: string;
            warning?: string;
        };
        /** @description Fields related to Eco-Score for a product.
         *
         *     See also: `ecoscore_score`, `ecoscore_grade` and `ecoscore_tags`.
         *      */
        product_ecoscore: {
            /**
             * product_ecoscore_data
             * @description An object about a lot of details about data needed for Eco-Score computation
             *     and complementary data of interest.
             *
             */
            ecoscore_data?: {
                /** product_ecoscore_adjustments */
                adjustments?: {
                    origins_of_ingredients?: {
                        aggregated_origins?: {
                            epi_score?: string;
                            origin?: string;
                            percent?: number;
                            transportation_score?: null | number;
                        }[];
                        epi_score?: number;
                        epi_value?: number;
                        origins_from_categories?: string[];
                        origins_from_origins_field?: string[];
                        transportation_score?: number;
                        transportation_scores?: components["schemas"]["EcoscoreCountryValues"];
                        transportation_value?: number;
                        transportation_values?: components["schemas"]["EcoscoreCountryValues"];
                        value?: number;
                        values?: components["schemas"]["EcoscoreCountryValues"];
                        warning?: string;
                    };
                    packaging?: {
                        non_recyclable_and_non_biodegradable_materials?: number;
                        packagings?: {
                            ecoscore_material_score?: number;
                            ecoscore_shape_ratio?: number;
                            material?: string;
                            shape?: string;
                            number_of_units?: number;
                            quantity_per_unit?: string;
                            quantity_per_unit_unit?: string;
                            quantity_per_unit_value?: number;
                            recycling?: string;
                            weight_measured?: number;
                        }[];
                        score?: number;
                        value?: number;
                        warning?: string;
                    };
                    production_system?: {
                        labels?: string[];
                        value?: number;
                        warning?: string;
                    };
                    threatened_species?: {
                        ingredient?: string;
                        value?: number;
                    };
                };
                agribalyse?: components["schemas"]["agribalyse"];
                grade?: string;
                grades?: Record<string, never>;
                ecoscore_not_applicable_for_category?: string;
                missing?: {
                    labels?: number;
                    origins?: number;
                    packagings?: number;
                };
                missing_data_warning?: number;
                missing_key_data?: number;
                previous_data?: {
                    grade?: string | null;
                    score?: number | null;
                    agribalyse?: components["schemas"]["agribalyse"];
                };
                score?: number;
                scores?: Record<string, never>;
                status?: string;
            };
            ecoscore_extended_data_version?: string;
            environment_impact_level?: string;
            environment_impact_level_tags?: Record<string, never>[];
        };
        /**
         * ingredients
         * @description This structure gives the different ingredients and some information about them,
         *     like estimate on their quantity.
         *
         */
        Ingredients: components["schemas"]["Ingredient"][];
        /**
         * product_ingredients
         * @description Fields about ingredients of a product
         */
        product_ingredients: {
            additives_tags?: string[];
            /** @description comma separated list of allergens */
            allergens?: string;
            /** @description language in which `allergens` where input */
            allergens_lc?: string;
            allergens_hierarchy?: string[];
            allergens_tags?: string[];
            ingredients?: components["schemas"]["Ingredients"];
            ingredients_analysis?: {
                "en:non-vegan"?: string[];
                "en:palm-oil-content-unknown"?: string[];
                "en:palm-oil"?: string[];
                "en:vegan-status-unknown"?: string[];
                "en:vegetarian-status-unknown"?: string[];
                "en:maybe-vegan"?: string[];
                "en:maybe-vegetarian"?: string[];
            };
            ingredients_analysis_tags?: string[];
            ingredients_from_or_that_may_be_from_palm_oil_n?: number;
            ingredients_from_palm_oil_n?: number;
            ingredients_from_palm_oil_tags?: Record<string, never>[];
            ingredients_hierarchy?: string[];
            ingredients_n?: number;
            ingredients_n_tags?: string[];
            ingredients_original_tags?: string[];
            ingredients_percent_analysis?: number;
            /** @description Number of sweeteners additives in the ingredients. Undefined if ingredients are not specified.
             *      */
            ingredients_sweeteners_n?: number;
            /** @description Number of non-nutritive sweeteners additives (as specified in the Nutri-Score formula) in the ingredients. Undefined if ingredients are not specified.
             *      */
            ingredients_non_nutritive_sweeteners_n?: number;
            ingredients_tags?: string[];
            /** @description Language that was used to parse the ingredient list. If `ingredients_text` is available
             *     for the product main language (`lang`), `ingredients_lc=lang`, otherwise we look at
             *     `ingredients_text` fields for other languages and set `ingredients_lc` to the first
             *     non-empty `ingredient_text`.
             *      */
            ingredients_lc?: string;
            /** @description Ingredients text in Italian */
            ingredients_text_it?: string;
            /** @description Ingredients text in English */
            ingredients_text_en?: string;
            /** @description Raw list of ingredients. This will get automatically
             *     parsed and get used to compute the Eco-Score or find allergens, etc..
             *
             *     It's a copy of ingredients_text in the main language of the product (see `lang` proprety).
             *      */
            ingredients_text?: string;
            ingredients_text_with_allergens?: string;
            /** @description Same text as `ingredients_text` but where allergens have HTML elements around them to identify them
             *      */
            ingredients_text_with_allergens_it?: string;
            ingredients_that_may_be_from_palm_oil_n?: number;
            ingredients_that_may_be_from_palm_oil_tags?: Record<string, never>[];
            ingredients_with_specified_percent_n?: number;
            ingredients_with_specified_percent_sum?: number;
            ingredients_with_unspecified_percent_n?: number;
            ingredients_with_unspecified_percent_sum?: number;
            known_ingredients_n?: number;
            /** @description Origins of ingredients
             *      */
            origins?: string;
            origins_hierarchy?: Record<string, never>[];
            origins_lc?: string;
            origins_tags?: Record<string, never>[];
            /** @description List of substances that might cause allergies
             *     that are present in trace amounts in the product
             *     (this does not include the ingredients, as they
             *     are not only present in trace amounts).
             *     It is taxonomized with the allergens taxonomy.
             *      */
            traces?: string;
            traces_hierarchy?: (Record<string, never> | string)[];
            traces_lc?: string;
            traces_tags?: (Record<string, never> | string)[];
            unknown_ingredients_n?: number;
        };
        /**
         * product_nutrition
         * @description Nutrition fields of a product
         *
         *     Most of these properties are read-only.
         *
         *     See [how to add nutrition data](https://openfoodfacts.github.io/openfoodfacts-server/api/ref-cheatsheet/#add-nutrition-facts-values-units-and-base)
         *
         */
        product_nutrition: {
            /** @description When a product does not have nutrition data displayed on the
             *     packaging, the user can check the field "Nutrition facts are
             *     not specified on the product".
             *     By doing so, the no_nutrition_data field takes the value "on".
             *     This case is frequent (thousands of products).
             *      */
            no_nutrition_data?: string;
            /**
             * @description The nutrition data on the package can be per serving or per 100g.
             *
             *     This is essential to understand if `<nutrient>_value` and `<nutrient>`
             *     values in `nutriments` applies for a serving or for 100g.
             *
             *     **IMPORTANT:**
             *     When writing products,
             *     this setting applies to all existing nutrients values for the product,
             *     not only the nutrient values sent in the write request.
             *     So it should not be changed unless all nutrients values are provided
             *     with values that match the nutrition_data_per field.
             *
             * @enum {string}
             */
            nutrition_data_per?: "serving" | "100g";
            /**
             * @description The nutrition data for prepared product on the package (if any) can be per serving or per 100g.
             *
             *     This is essential to understand if `<nutrient>_prepared_value` and `<nutrient>_prepared`
             *     values in `nutriments` applies for a serving or for 100g.
             *
             *     See also important note on `nutrition_data_per`.
             *
             * @enum {string}
             */
            nutrition_data_prepared_per?: "serving" | "100g";
            /** @description All known nutrients for the product.
             *
             *     Note that each nutrients are declined with a variety of suffixes like `_100g`, `_serving`,
             *     see patternProperties below.
             *
             *     A specific `_unit` is the unit used to measure the nutrient.
             *
             *     Beware that some properties are to be interpreted based upon `nutrition_data_per` value.
             *
             *     Also for products that have a nutrition table for prepared product
             *     (eg. the nutrition facts for a bowl of milk with cocoa powder),
             *     a `_prepared` suffix is added (before other suffixes).
             *
             *     You can get all possible nutrients from the
             *     [nutrients taxonomy](https://static.openfoodfacts.org/data/taxonomies/nutrients.json)
             *
             *     **FIXME** add more nutrients with description.
             *      */
            nutriments?: {
                /** @description Quantity of alcohol
                 *
                 *     (per 100g or per serving) in a standard unit (g or ml)
                 *      */
                alcohol?: number;
                carbohydrates?: number;
                /** Format: float */
                carbohydrates_100g?: number;
                /** Format: float */
                carbohydrates_serving?: number;
                /** @enum {string} */
                carbohydrates_unit?: "g" | "mg" | "μg";
                /** Format: float */
                carbohydrates_value?: number;
                cocoa?: number;
                cocoa_100g?: number;
                cocoa_label?: string;
                /** Format: float */
                cocoa_serving?: number;
                /** @enum {string} */
                cocoa_unit?: "g" | "mg" | "μg";
                /** Format: float */
                cocoa_value?: number;
                /** @description It is the same as `energy-kj` if we have it, or computed from `energy-kcal` otherwise
                 *
                 *     (per 100g or per serving) in kj
                 *      */
                energy?: number;
                /** Format: float */
                energy_100g?: number;
                /** @description energy_value will be equal to energy-kj_value if we have it or to energy-kcal_value otherwise
                 *      */
                energy_value?: number;
                /** Format: float */
                energy_serving?: number;
                /**
                 * @description Equal to energy-kj_unit if we have it or to energy-kcal_unit otherwise
                 *
                 * @enum {string}
                 */
                energy_unit?: "kcal" | "kJ";
                /** @description energy in kj, if it is specified
                 *
                 *     (per 100g or per serving) in a standard unit (g or ml)
                 *      */
                energy_kj?: number;
                /** Format: float */
                energy_kj_100g?: number;
                /** Format: float */
                energy_kj_serving?: number;
                /** @enum {string} */
                energy_kj_unit?: "kJ";
                /** Format: float */
                energy_kj_value?: number;
                /** Format: float */
                energy_kj_value_computed?: number;
                fat?: number;
                fat_value?: number;
                /** Format: float */
                fat_100g?: number;
                /** Format: float */
                fat_serving?: number;
                fat_unit?: string;
                "nova-group_100g"?: number;
                "nova-group_serving"?: number;
                "nutrition-score-fr_100g"?: number;
                /** Format: float */
                proteins_100g?: number;
                /** Format: float */
                proteins_serving?: number;
                proteins_unit?: string;
                /** Format: float */
                proteins_value?: number;
                /** Format: float */
                salt_100g?: number;
                /** Format: float */
                salt_serving?: number;
                salt_unit?: string;
                /** Format: float */
                salt_value?: number;
                "saturated-fat"?: number;
                /** Format: float */
                "saturated-fat_100g"?: number;
                /** Format: float */
                "saturated-fat_serving"?: number;
                "saturated-fat_unit"?: string;
                /** Format: float */
                "saturated-fat_value"?: number;
                /** Format: float */
                sodium_100g?: number;
                /** Format: float */
                sodium_serving?: number;
                sodium_unit?: string;
                /** Format: float */
                sodium_value?: number;
                /** Format: float */
                sugars_100g?: number;
                /** Format: float */
                sugars_serving?: number;
                sugars_unit?: string;
                /** Format: float */
                sugars_value?: number;
                /** Format: float */
                fiber_100g?: number;
                /** Format: float */
                fiber_serving?: number;
                fiber_unit?: string;
                /** Format: float */
                fiber_value?: number;
                "energy-kcal_100g"?: number;
                "energy-kcal_serving"?: number;
                "energy-kcal_unit"?: string;
                "energy-kcal_value"?: number;
                "energy-kcal_value_computed"?: number;
                /** @description energy in kcal, if it is specified
                 *
                 *     (per 100g or per serving) in a standard unit (g or ml)
                 *      */
                "energy-kcal"?: number;
                "fruits-vegetables-legumes-estimate-from-ingredients_serving"?: number;
                "fruits-vegetables-legumes-estimate-from-ingredients_100g"?: number;
                /** @description An estimate, from the ingredients list of the percentage of fruits, vegetable and legumes.
                 *     This is an important information for Nutri-Score (2023 version) computation.
                 *      */
                "fruits-vegetables-legumes-estimate-from-ingredients"?: number;
                "fruits-vegetables-nuts-estimate-from-ingredients_serving"?: number;
                "fruits-vegetables-nuts-estimate-from-ingredients_100g"?: number;
                /** @description An estimate, from the ingredients list of the percentage of fruits, vegetable and nuts.
                 *     This is an important information for Nutri-Score (2021 version) computation.
                 *      */
                "fruits-vegetables-nuts-estimate-from-ingredients"?: number;
                "nova-group"?: number;
                /** @description Experimental nutrition score derived from
                 *     the UK FSA score and adapted for the French market
                 *     (formula defined by the team of Professor Hercberg).
                 *      */
                "nutrition-score-fr"?: unknown;
                proteins?: number;
                salt?: number;
                sodium?: number;
                sugars?: number;
                fiber?: number;
                /** Format: float */
                "carbon-footprint-from-known-ingredients_100g"?: number;
                "carbon-footprint-from-known-ingredients_product"?: number;
                /** Format: float */
                "carbon-footprint-from-known-ingredients_serving"?: number;
                /** @description erythritol is a polyol which is not providing any energy.
                 *     As such, it needs not be taken into account when computing
                 *     the energy of a product. Eryhtritol is now displayed on
                 *     nutrition facts sheet of some products, mainly in the USA.
                 *     This value is entered either by contributors, either by
                 *     imports.
                 *      */
                erythritol?: number;
            };
            /** @description Detail of data the Nutri-Score was computed upon.
             *
             *     **Note**: this might not be stable, don't rely too much on this, or, at least, tell us !
             *
             *     **TODO** document each property
             *      */
            nutriscore_data?: {
                saturated_fat_ratio?: number;
                saturated_fat_ratio_points?: number;
                saturated_fat_ratio_value?: number;
            };
            /** @description Nutrition grade (‘a’ to ‘e’),
             *     https://world.openfoodfacts.org/nutriscore.
             *      */
            nutrition_grade_fr?: string;
            /** @description Nutrition grades as a comma separated list.
             *
             *     Some products with multiple components might have multiple Nutri-Score
             *      */
            nutrition_grades?: string;
            nutrition_grades_tags?: string[];
            nutrition_score_beverage?: number;
            nutrition_score_warning_fruits_vegetables_legumes_estimate_from_ingredients?: number;
            nutrition_score_warning_fruits_vegetables_legumes_estimate_from_ingredients_value?: number;
            nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients?: number;
            nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients_value?: number;
            nutrition_score_warning_no_fiber?: number;
            other_nutritional_substances_tags?: Record<string, never>[];
            unknown_nutrients_tags?: Record<string, never>[];
            vitamins_tags?: Record<string, never>[];
        };
        /**
         * @description Nutri-Score for the product as a letter.
         *
         *     See https://world.openfoodfacts.org/nutriscore.
         *
         * @enum {string}
         */
        NutriscoreGrade: "a" | "b" | "c" | "d" | "e";
        NutriscoreYearData: {
            /** @enum {integer} */
            category_available?: 0 | 1;
            grade?: components["schemas"]["NutriscoreGrade"];
            /** @enum {integer} */
            nutrients_available?: 0 | 1;
            /** @enum {integer} */
            nutriscore_applicable?: 0 | 1;
            /** @enum {integer} */
            nutriscore_computed?: 0 | 1;
            score?: number;
        };
        ProductType: {
            /** @enum {integer} */
            is_beverage?: 0 | 1;
            /** @enum {integer} */
            is_cheese?: 0 | 1;
            /** @enum {integer} */
            is_water?: 0 | 1;
        };
        /** Nutriscore2021InnerData */
        Nutriscore2021InnerData: components["schemas"]["ProductType"] & {
            /** @enum {integer} */
            is_fat?: 0 | 1;
            energy?: number;
            energy_points?: number;
            energy_value?: number;
            /** Format: float */
            fiber?: number;
            fiber_points?: number;
            /** Format: float */
            fiber_value?: number;
            /** Format: float */
            fruits_vegetables_nuts_colza_walnut_olive_oils?: number;
            fruits_vegetables_nuts_colza_walnut_olive_oils_points?: number;
            /** Format: float */
            fruits_vegetables_nuts_colza_walnut_olive_oils_value?: number;
            /** Format: float */
            proteins?: number;
            proteins_points?: number;
            /** Format: float */
            proteins_value?: number;
            /** Format: float */
            saturated_fat?: number;
            saturated_fat_points?: number;
            /** Format: float */
            saturated_fat_value?: number;
            /** Format: float */
            sodium?: number;
            sodium_points?: number;
            /** Format: float */
            sodium_value?: number;
            /** Format: float */
            sugars?: number;
            sugars_points?: number;
            /** Format: float */
            sugars_value?: number;
            negative_points?: number;
            positive_points?: number;
        };
        /** Nutriscore2021Data */
        Nutriscore2021Data: components["schemas"]["Nutriscore2021InnerData"] & {
            grade?: components["schemas"]["NutriscoreGrade"];
            score?: number;
        };
        /** NutriscoreComponent */
        NutriscoreComponent: {
            id?: string;
            points?: number;
            points_max?: number;
            unit?: string;
            /** Format: float */
            value?: null | number;
        };
        /** Nutriscore2023Data */
        Nutriscore2023Data: components["schemas"]["ProductType"] & {
            /** @enum {integer} */
            is_fat_oil_nuts_seeds?: 0 | 1;
            /** @enum {integer} */
            is_red_meat_product?: 0 | 1;
            /** Nutriscore2023DataComponents */
            components?: {
                negative?: components["schemas"]["NutriscoreComponent"][];
                positive?: components["schemas"]["NutriscoreComponent"][];
            };
            /** Format: float */
            count_proteins?: number;
            count_proteins_reason?: string;
            negative_points?: number;
            positive_points?: number;
            negative_points_max?: number;
            positive_points_max?: number;
            positive_nutrients?: string[];
        };
        /** Nutriscores */
        Nutriscores: {
            /** Nutriscore2021 */
            2021?: components["schemas"]["NutriscoreYearData"] & {
                data?: components["schemas"]["Nutriscore2021Data"];
            };
            /** Nutriscore2023 */
            2023?: components["schemas"]["NutriscoreYearData"] & {
                data?: components["schemas"]["Nutriscore2023Data"];
            };
        };
        NutriscoreGradeTags: components["schemas"]["NutriscoreGrade"][];
        /** ProductNutriscore */
        NutriscoreAll: {
            nutriscore?: components["schemas"]["Nutriscores"];
            nutriscore_2021_tags?: components["schemas"]["NutriscoreGradeTags"];
            nutriscore_2023_tags?: components["schemas"]["NutriscoreGradeTags"];
            nutriscore_data?: components["schemas"]["Nutriscore2021Data"];
            nutriscore_grade?: components["schemas"]["NutriscoreGrade"];
            /** @description Nutri-Score for the product as an integer (see also `nutriscore_grade`).
             *      */
            nutriscore_score?: number;
            nutriscore_score_opposite?: number;
            nutriscore_tags?: components["schemas"]["NutriscoreGradeTags"];
            nutriscore_version?: string;
        };
        /** @description This is data that is linked to products data quality
         *      */
        product_quality: {
            data_quality_bugs_tags?: Record<string, never>[];
            data_quality_errors_tags?: Record<string, never>[];
            data_quality_info_tags?: string[];
            data_quality_tags?: string[];
            data_quality_warning_tags?: string[];
            data_quality_warnings_tags?: string[];
            /** @description Source of data imported from producers.
             *      */
            data_sources?: string;
            data_sources_tags?: string[];
            debug_param_sorted_langs?: string[];
            last_check_dates_tags?: string[];
            last_checked_t?: number;
            last_checker?: string;
            /** @description comma separated list of values indicating some states of the product,
             *     like things to be done, or to be completed.
             *     See [states taxonomy](https://static.openfoodfacts.net/data/taxonomies/states.json)
             *      */
            states?: string;
            states_hierarchy?: string[];
            states_tags?: string[];
            /** @description Information about different aspect of the product
             *      */
            misc_tags?: string[];
        };
        /** product_extended */
        product_extended: {
            additives_original_tags?: string[];
            additives_prev_original_tags?: string[];
            added_countries_tags?: Record<string, never>[];
            allergens_from_ingredients?: string;
            allergens_from_user?: string;
            amino_acids_prev_tags?: Record<string, never>[];
            amino_acids_tags?: Record<string, never>[];
            carbon_footprint_percent_of_known_ingredients?: number;
            categories_properties?: {
                "agribalyse_food_code:en"?: string;
                "agribalyse_proxy_food_code:en"?: string;
                "ciqual_food_code:en"?: string;
            };
            categories_properties_tags?: string[];
            category_properties?: {
                [key: string]: string;
            };
            ciqual_food_name_tags?: string[];
            /** @description the category to use for comparison.
             *
             *     **TODO** explain how it is chosen.
             *      */
            compared_to_category?: string;
            conservation_conditions?: string;
            /** @description Contact info of customer service.
             *      */
            customer_service?: string;
            expiration_date?: string;
            /** @description link to the product on the website of the producer
             *      */
            link?: string;
            main_countries_tags?: Record<string, never>[];
            minerals_prev_tags?: Record<string, never>[];
            minerals_tags?: Record<string, never>[];
            /** @description Those are fields provided by the producer (through producers platform),
             *     and the value he provided.
             *      */
            owner_fields?: {
                /** @description you can retrieve all kind of properties, the same as on the parent object (the product).
                 *     It's not processed entries (like tags for example) but raw ones.
                 *      */
                additionalProperties?: number | string | Record<string, never>;
            };
            /** @description Detail of ingredients or processing that makes the products having Nova 3 or 4
             *      */
            nova_groups_markers?: {
                [key: string]: string[][];
            };
            nucleotides_tags?: Record<string, never>[];
            origin?: string;
            /** @description Country, state, or city where the product can be purchased.
             *      */
            purchase_places?: string;
            purchase_places_tags?: string[];
            /** @description Distributor name.
             *      */
            stores?: string;
            stores_tags?: string[];
            traces_from_ingredients?: string;
            traces_from_user?: string;
        };
        /** @description Metadata of a product (author, editors, creation date, etc.)
         *      */
        product_meta: {
            /** @description Date when the product was added (UNIX timestamp format).
             *     See also `entry_dates_tags`
             *      */
            created_t?: number;
            /** @description The contributor who added the product first.
             *      */
            creator?: string;
            /** @description List of editors who edited the product.
             *      */
            editors_tags?: string[];
            informers_tags?: string[];
            interface_version_created?: string;
            interface_version_modified?: string;
            languages?: Record<string, never>;
            /** @description Same as `languages` but by language code, instead of language tags
             *      */
            languages_codes?: Record<string, never>;
            languages_hierarchy?: string[];
            languages_tags?: string[];
            last_edit_dates_tags?: string[];
            last_editor?: string;
            /** @description The username of the user who last modified the product.
             *      */
            last_modified_by?: string;
            /** @description Date when the product page was last modified.
             *      */
            last_modified_t?: number;
            /** @description Date when the product page was last updated.
             *      */
            last_updated_t?: number;
            /** @description Id of the producer in case he provides his own data about a product (producer platform).
             *      */
            owner?: string;
            /** @description Tagyfied version of owner
             *      */
            owners_tags?: string;
            photographers_tags?: string[];
            /** @description revision number of this product version (each edit adds a revision) */
            rev?: number;
            sources?: {
                fields?: string[];
                id?: string;
                images?: Record<string, never>[];
                import_t?: number;
                manufacturer?: number | string;
                name?: string;
                source_licence?: string;
                source_licence_url?: string;
                url?: null | string;
            }[];
            /** product_meta_source_fields */
            sources_fields?: {
                "org-gs1"?: {
                    gln?: string;
                    gpcCategoryCode?: string;
                    gpcCategoryName?: string;
                    isAllergenRelevantDataProvided?: string;
                    lastChangeDateTime?: string;
                    partyName?: string;
                    productionVariantDescription?: string;
                    publicationDateTime?: string;
                };
            };
            teams?: string;
            teams_tags?: string[];
            update_key?: string;
        };
        /**
         * title_element
         * @description The title of a panel.
         */
        title_element: {
            /** @description A short name of this panel, not including any actual values */
            name?: string;
            title?: string;
            /**
             * @description Used to indicate how the value of this item is measured, such as "grade" for Nutri-Score and Eco-Score or "percentage" for Salt
             * @enum {string}
             */
            type?: "grade" | "percentage";
            /**
             * @description The value for this panel where it corresponds to a A to E grade such as the Nutri-Score of the Eco-Score.
             * @enum {string}
             */
            grade?: "a" | "b" | "c" | "d" | "e" | "unknown";
            /** @description The numeric value of the panel, where the type is "percentage" */
            value?: number;
            icon_url?: string;
            icon_color_from_evaluation?: string;
            /** @description If set to "small", the icon should be displayed at a small size.
             *      */
            icon_size?: string;
        };
        /**
         * text_element
         * @description A text in simple HTML format to display.
         *
         *     For some specific texts that correspond to a product field (e.g. a product name, the ingredients list of a product),the edit_field_* fields are used to indicate how to edit the field value.
         */
        text_element: {
            /**
             * @description the type of text, might influence the way you display it.
             *
             * @enum {string}
             */
            type?: "summary" | "warning" | "notes";
            /** @description Text to display in HTML format. */
            html?: string;
            /** @description Language of the text. The name of the language is returned in the language requested when making the API call. e.g. if the text is in Polish, and the requested language is French, the language field will contain "Polonais" (French for "Polish"). Only set for specific fields such as the list of ingredients of a product. */
            language?: string;
            /** @description 2 letter language code for the text. Only set for specific fields such as the list of ingredients of a product. */
            lc?: string;
            /** @description id of the field used to edit this text in the product edit API. */
            edit_field_id?: string;
            /** @description Type of the product field. */
            edit_field_type?: string;
            /** @description Current value of the product field. This may differ from the html field which can contain extra formating. */
            edit_field_value?: string;
            /** @description Link to the source */
            source_url?: string;
            /** @description name of the source */
            source_text?: string;
            /** @description Source locale name */
            source_lc?: string;
            /** @description Human readable source locale name */
            source_language?: string;
        };
        /** image_element */
        image_element: {
            /** @description full URL of the image */
            url?: string;
            /** @description Width of the image.
             *
             *     This is just a suggestion coming from the server,
             *     the client may choose to use its own dimensions for the image.
             *      */
            width?: number;
            /** @description Height of the image.
             *
             *     This is just a suggestion coming from the server,
             *     the client may choose to use its own dimensions for the image.
             *      */
            height?: number;
            /** @description Alt Text of the image. */
            alt_text?: string;
        };
        /**
         * panel_element
         * @description Panels can include other panels as sub-panels using the panel_element.
         */
        panel_element: {
            /** @description The id of the panel to include. The id is the key of the panel in the panels object returned in the knowledge_panels field. */
            panel_id?: string;
        };
        /**
         * panel_group_element
         * @description The panel group element is used to display an optional title followed by a number of sub-panels.
         */
        panel_group_element: {
            title?: string;
            /** @description The ids of the panels to include. The ids are the keys of the panels in the panels object returned in the knowledge_panels field. */
            panel_ids?: string[];
        };
        /**
         * table_element
         * @description Element to display a table.
         */
        table_element: {
            /** @description An id for the table. */
            id?: string;
            /** @description Title of the column.
             *      */
            title?: string;
            rows?: string;
            columns?: {
                type?: string;
                text?: string;
                text_for_small_screens?: string;
                style?: string;
                column_group_id?: string;
                shown_by_default?: boolean;
            }[];
        };
        /**
         * element
         * @description Each element object contains one specific element object such as a text element or an image element.
         *
         */
        element: {
            /**
             * @description The type of the included element object.
             *     The type also indicates which field contains the included element object.
             *     e.g. if the type is "text", the included element object will be in the "text_element" field.
             *
             *     Note that in the future, new type of element may be added,
             *     so your code should ignore unrecognized types, and unknown properties.
             *
             *     TODO: add Map type
             *
             * @enum {string}
             */
            type: "text" | "image" | "action" | "panel" | "panel_group" | "table";
            text_element?: components["schemas"]["text_element"];
            image_element?: components["schemas"]["image_element"];
            action_element?: string;
            panel_element?: components["schemas"]["panel_element"];
            panel_group_element?: components["schemas"]["panel_group_element"];
            table_element?: components["schemas"]["table_element"];
        };
        /**
         * panel
         * @description Each panel contains an optional title and an optional array of elements.
         */
        panel: {
            /** @description Type of the panel. If set to "card", the panel and its sub-panels should be displayed in a card. If set to "inline", the panel should have its content always displayed. */
            type?: string;
            /** @description If true, the panel is to be displayed already expanded. If false, only the title should be displayed, and the user should be able to click or tap it to open the panel and display the elements. */
            expanded?: boolean;
            /** @description If set to "large", the content of the panel should be expanded on large screens, but it should still be possible to unexpand it. */
            expand_for?: string;
            /**
             * @description A simple assessment of the panel value, typically used to format fonts, et.c e.g. bad = red
             * @enum {string}
             */
            evaluation?: "good" | "average" | "neutral" | "bad" | "unknown";
            title_element?: components["schemas"]["title_element"];
            /** @description An ordered list of elements to display in the content of the panel. */
            elements?: components["schemas"]["element"][];
            /** @description a message level, as levels we use in log.
             *     It might help theming the panel visualy
             *      */
            level?: string;
            /**
             * @description size is either empty (normal display)
             *     or small to indicate a panel that should have a smaller font size
             *
             * @enum {string}
             */
            size?: "small";
            topics?: string[];
        };
        /**
         * panels
         * @description The panels object is a dictionary of individual panel objects.
         *     Each key of the dictionary is the id of the panel, and the value is the panel object.
         *
         *     Apps typically display a number of root panels with known panel ids (e.g. health_card and environment_card). Panels can reference other panels and display them as sub-panels.
         */
        panels: {
            additionalProperties?: components["schemas"]["panel"];
        };
        /** @description Knowledge panels for a product
         *      */
        product_knowledge_panels: {
            knowledge_panels?: components["schemas"]["panels"];
        };
        /** @description Specific data about a product to enable personal ranking
         *      */
        product_attribute_groups: {
            /** @description Each element is an attribute that can help compute a personal ranking for the product */
            attribute_groups?: {
                /** @description Unique id of the attribute.
                 *
                 *     It will be use to match against preferences parameters.
                 *      */
                id?: string;
                /**
                 * @description wether we have the information to really compute this criteria or not.
                 * @enum {string}
                 */
                status?: "known" | "unknown";
                /** @description A descriptive sentence about the situation of the product concerning attribute
                 *      */
                title?: string;
                /**
                 * Format: float
                 * @description a numeric value for the match,
                 *     telling how much the products ranks well for this particular attribute.
                 *     The higher the value, the better the match.
                 *
                 */
                match?: number;
                /**
                 * @description every attribute as a grade for a to e
                 * @enum {string}
                 */
                grade?: "unknown" | "a" | "b" | "c" | "d" | "e";
                /** @description The name of attribute, for eventual display */
                name?: string;
                /** @description an icon representing the attribute match (often using a color) */
                icon_url?: string;
                /** @description An eventual description of the value of the property upon which this attribute is based */
                description?: string;
                /** @description An eventual short description of the value of the property upon which this attribute is based */
                description_short?: string;
            }[];
        };
        /**
         * product
         * @description This is all the fields describing a product and how to display it on a page.
         *
         *     Refer to the different sub schema for more readable entries:
         *
         *     * [Product Base](#cmp--schemas-product-base): Base fields of a product
         *     * [Product Misc](#cmp--schemas-product-misc): Miscellaneous but important fields of a product
         *     * [Product Tags](#cmp--schemas-product-tags): Tags fields on a product
         *     * [Product Images](#cmp--schemas-product-images): Information about Images of a product
         *     * [Product Eco-Score](#cmp--schemas-product-ecoscore): Fields related to Eco-Score for a product
         *     * [Product Ingredients](#cmp--schemas-product-ingredients): Fields about ingredients of a product
         *     * [Product Nutrition](#cmp--schemas-product-nutrition): Nutrition fields of a product
         *     * [Product Data Quality](#cmp--schemas-product-quality): fields related to data quality for a product
         *     * [Product Extended](#cmp--schemas-product-extended): TODO
         *     * [Product Metadata](#cmp--schemas-product-meta): Metadata of a product (author, editors, etc.)
         *     * [Product Knowledge Panels](#cmp--schemas-product-knowledge-panels): Knowledge panels for a product
         *     * [Product Attribute Groups](#cmp--schemas-product-attribute-groups): Attribute groups for personal product matching
         *
         */
        product: components["schemas"]["product_base"] & components["schemas"]["product_misc"] & components["schemas"]["product_tags"] & components["schemas"]["product_images"] & components["schemas"]["product_ecoscore"] & components["schemas"]["product_ingredients"] & components["schemas"]["product_nutrition"] & components["schemas"]["NutriscoreAll"] & components["schemas"]["product_quality"] & components["schemas"]["product_extended"] & components["schemas"]["product_meta"] & components["schemas"]["product_knowledge_panels"] & components["schemas"]["product_attribute_groups"];
        /** get_product_by_barcode_response */
        get_product_by_barcode: components["schemas"]["get_product_by_barcode_base"] & {
            product?: components["schemas"]["product"];
        };
        add_photo_to_existing_product: {
            /** @description Barcode of the product
             *      */
            code: string;
            /** @description Indicates the type of the image and the corresponding language. It should
             *     be in the format `{IMAGE_TYPE}_{LANG}` format, where `IMAGE_TYPE` is one
             *     of `front|ingredients|nutrition|packaging|other` and `LANG` is the 2
             *     letter language code. Use `other` if you don't want the image to be
             *     selected. Note that the first image of a product is always selected as front
             *     picture.
             *      */
            imagefield: string;
            /**
             * Format: binary
             * @description This field must contain image binary content.
             *     The format and extension must be one of gif|jpeg|jpg|png|heic.
             *     This field is dynamic and dependent on the value of imagefield in the
             *     request body. It wil be imgupload_the value of the imagefield stated
             *     earlier. For example, if `imagefield=front_en`, the name of this field
             *     should be `imageupload_front_en`.
             *
             */
            imgupload_front_en: string;
        };
        /** add_photo_to_existing_product_response */
        "add_photo_to_existing_product-2": {
            files?: {
                url?: string;
                filename?: string;
                name?: string;
                thumbnailUrl?: string;
                code?: string;
            }[];
            image?: {
                thumb_url?: string;
                imgid?: number;
                crop_url?: string;
            };
            imgid?: number;
            status?: string;
            imagefield?: string;
            code?: string;
        };
        /** ocr_on_product_response */
        ocr_on_product: {
            status?: number;
        };
        /** rotate_a_photo_response */
        rotate_a_photo: {
            status?: string;
            imagefield?: string;
            image?: {
                display_url?: string;
            };
        };
        /** @description Select a photo and optionally crop/rotate it.
         *     The origin of the cropping coordinates is the top-left corner.
         *     Note that rotation is applied *before* cropping, so the cropping bounding box
         *     is relative to the rotated image.
         *      */
        crop_a_photo: {
            /** @description Barcode of the product. */
            code: string;
            /** @description identifier of the image to select, it should be a number */
            imgid: number;
            /** @description identifier of the selected image field, should be in the format
             *     `{IMAGE_TYPE}_{LANG}` format, where `IMAGE_TYPE` is one of
             *     `front|ingredients|nutrition|packaging|other` and `LANG` is the 2 letter
             *     language code.
             *     Note that if you select an image for the main language of the product (ex:
             *     `ingredients_it` if `it` is the main language), this image will be
             *     displayed on Product Opener for all languages (ex: on
             *     `https://fr.openfoodfacts.org`, unless `ingredients_fr` exists).
             *      */
            id: string;
            /** @description X origin coordinate of the crop, it must be lower than x2 */
            x1?: number;
            /** @description Y origin coordinate of the crop, it must be lower than y2 */
            y1?: number;
            /** @description X end coordinate of the crop, it must be higher than x1 */
            x2?: number;
            /** @description Y end coordinate of the crop, it must be higher than y1 */
            y2?: number;
            /** @description angle of the rotation to apply on the selected image.
             *     passing `90` as value rotate the image 90 degrees counter-clockwise.
             *      */
            angle?: number;
            /**
             * @description whether the selected image should be normalized using ImageMagick
             * @enum {string}
             */
            normalize?: "true" | "false";
            /**
             * @description whether the source image should be white magiced (background removal) using
             *     ImageMagick.
             *
             * @default false
             * @enum {string}
             */
            white_magic: "true" | "false";
        };
        /** unselect_a_photo_request */
        unselect_a_photo: {
            /** @description code of the product */
            code?: string;
            /** @description image field (image id) of the photo to unselect */
            id?: string;
        };
        /** @description You can provide most of the properties defined in the product schema.
         *      */
        add_or_edit_a_product: {
            /** @description The barcode of the product to be added or edited */
            code: string;
            /** @description A valid username. */
            user_id: string;
            /** @description A valid corresponding password (related to specific environment). */
            password: string;
            /** @description A comment for the change. It will be shown in product changes history. */
            comment?: string;
            /** @description The brands of the product (comma separated list of values). */
            brands?: string[];
            /** @description The labels of the product (comma separated list of values). */
            labels?: string[];
            /** @description The categories of the product (comma separated list of values). */
            categories?: string[];
            /** @description Packaging type, format, material.
             *     The [v3 API documentation](https://openfoodfacts.github.io/openfoodfacts-server/api/ref-v3/#operation/post-api-v3-product-barcode)
             *     has a more structured data for `packaging`.
             *      */
            packaging?: string;
        };
        /** @description Properties that goes in change ref
         *      */
        change_ref_properties: {
            /** @description A comment on the contribution.
             *     Adding meaningful comments help moderators and users understand a single product history.
             *      */
            comment?: string;
            /** @description Name of the app providing the information
             *      */
            app_name?: string;
            /** @description Version of the app providing the information
             *      */
            app_version?: string;
            /** @description When an app uses a single user to log its contributions,
             *     it might be interesting to know which user of the app is providing the information.
             *     You can use this field to provide an identifier (eg: an sha1 of the username) that's privacy preserving. Make sure that your salt is strong, perfectly random and secret
             *
             *     In case we have trouble with one of your user, it helps our moderators revert edits.
             *      */
            app_uuid?: string;
            /** @description It is required that you pass a specific User-Agent header when you do an API request.
             *     But some times it's not possible to modify such a header
             *     (eg. request using JavaScript in a browser).
             *     In such cases, you can override it with this parameter.
             *      */
            "User-Agent"?: string;
        };
        /** add_or_edit_a_product_response */
        "add_or_edit_a_product-2": {
            status_verbose?: string;
            status?: number;
        };
        /** search_for_products_response */
        search_for_products: {
            /** @description Total number of products found
             *      */
            count?: number;
            /** @description Page number of returned results.
             *
             *     You can get a different page, by using the `page` query parameter.
             *      */
            page?: number;
            /** @description Number of products in this page.
             *
             *     This will differ from page_size only on the last page.
             *      */
            page_count?: number;
            /** @description Requested number of products per pages
             *
             *     To get the number of pages, divide count by page_size
             *     (eg. `Math.floor( count / page_size) + 1 `)
             *      */
            page_size?: number;
            /** @description The products matching the query corresponding to current page
             *      */
            products?: components["schemas"]["product"][];
            skip?: number;
        };
        /**
         * @description First criteria type
         * @enum {string}
         */
        tagtype_0: "search" | "brands" | "categories" | "packaging" | "labels" | "origins" | "manufacturing_places" | "emb_codes" | "purchase_places" | "stores" | "countries" | "ingredients" | "additives" | "allergens" | "traces" | "nutrition_grades" | "nova_groups" | "ecoscore" | "languages" | "creator" | "editors" | "states";
        SearchPostSchema: {
            /** @enum {number} */
            search_simple?: 1;
            /** @description Search for words present in the product name, generic name, brands, categories, origins and labels */
            search_terms2?: string;
            /**
             * @description First criteria type
             * @enum {string}
             */
            tagtype_0?: "search" | "brands" | "categories" | "packaging" | "labels" | "origins" | "manufacturing_places" | "emb_codes" | "purchase_places" | "stores" | "countries" | "ingredients" | "additives" | "allergens" | "traces" | "nutrition_grades" | "nova_groups" | "ecoscore" | "languages" | "creator" | "editors" | "states";
            /**
             * @description First criteria condition
             * @enum {string}
             */
            tag_contains_0?: "contains" | "does_not_contain";
            /** @description First criteria value */
            tag_0?: string;
            tagtype_1?: components["schemas"]["tagtype_0"];
            /**
             * @description Second criteria condition
             * @enum {string}
             */
            tag_contains_1?: "contains" | "does_not_contain";
            /** @description Second criteria value */
            tag_1?: string;
            /**
             * @description Filter by presence of additives
             * @default indifferent
             * @enum {string}
             */
            additives: "without" | "with" | "indifferent";
            /**
             * @description Filter by ingredients from palm oil
             * @default indifferent
             * @enum {string}
             */
            ingredients_from_palm_oil: "without" | "with" | "indifferent";
            /**
             * @description Filter by ingredients that may be from palm oil
             * @default indifferent
             * @enum {string}
             */
            ingredients_that_may_be_from_palm_oil: "without" | "with" | "indifferent";
            /**
             * @description Filter by ingredients from or that may be from palm oil
             * @default indifferent
             * @enum {string}
             */
            ingredients_from_or_that_may_be_from_palm_oil: "without" | "with" | "indifferent";
            nutriment_0?: string;
            /** @enum {string} */
            nutriment_compare_0?: "lt" | "lte" | "gt" | "gte" | "eq";
            nutriment_value_0?: string;
            nutriment_1?: string;
            /** @enum {string} */
            nutriment_compare_1?: "lt" | "lte" | "gt" | "gte" | "eq";
            nutriment_value_1?: string;
            graph_title?: string;
            axis_x?: string;
            axis_y?: string;
            map_title?: string;
            /**
             * @default process
             * @enum {string}
             */
            action: "process";
            /** @enum {string} */
            sort_by: "popularity" | "product_name" | "created_t" | "created_datetime" | "completed_t" | "last_modified_t" | "last_modified_datetime" | "unique_scans_n";
            /** @default 1 */
            page: number;
            /** @default 20 */
            page_size: number;
            /**
             * @default 1
             * @enum {number}
             */
            json: 0 | 1;
            fields?: string;
        };
        /**
         * @description The unit in which the nutrient for 100g or per serving is measured.
         *
         *     The possible values depends on the nutrient.
         *
         *     * `g` for grams
         *     * `mg` for milligrams
         *     * `μg` for micrograms
         *     * `cl` for centiliters
         *     * `ml` for mililiters
         *     * `dv` for recommended daily intakes (aka [Dietary Reference Intake](https://en.wikipedia.org/wiki/Dietary_Reference_Intake))
         *     * `% vol` for percentage per volume (e.g. alcohol vol per 100 ml)
         *     * `%` for percentage
         *
         *     🤓 code: see the [Units module][units-module],
         *     and [Food:default_unit_for_nid function][default-unit]
         *
         *     [units-module]: https://openfoodfacts.github.io/openfoodfacts-server/dev/ref-perl-pod/ProductOpener/Units.html
         *     [default-unit]: https://openfoodfacts.github.io/openfoodfacts-server/dev/ref-perl-pod/ProductOpener/Food.html#default_unit_for_nid_(_%24nid)
         *
         * @enum {string}
         */
        nutrient_unit: "g" | "mg" | "μg" | "cl" | "ml" | "dv" | "% vol" | "%";
        /** @description Nutrients and sub-nutrients of a product, with their name and default unit.
         *     (e.g. saturated-fat is a sub-nutrient of fat).
         *      */
        Nutrients: components["schemas"]["Nutrient"][];
        /** @description List of groups of attributes for personal search in a specific language.
         *      */
        get_attribute_groups: {
            /** @description unique id of the group */
            id?: string;
            /** @description Name of the group */
            name?: string;
            /** @description Attributes that are part of this group
             *      */
            attributes?: {
                /** @description unique id of the attribute */
                id?: string;
                /** @description Name of the attribute */
                name?: string;
                /** @description url of icon to display next to the settings for this attribute */
                icon_url?: string;
                /** @description a description of the attribute to display to users */
                setting_name?: string;
                /** @description a complementary note on the attribute */
                setting_note?: string;
                /**
                 * @description Indicates the default setting for this attribute
                 * @enum {string}
                 */
                default?: "mandatory" | "very_important" | "important" | "not_important";
                /** @description Linked knowledge panel (optional) */
                panel_id?: string;
            }[];
        }[];
        /**
         * get_preferences_response
         * @description Rules to apply to compute personal ranking of a product,
         *     based upon the setting value of each attribute.
         *
         */
        get_preferences: {
            /**
             * @description id for the setting value
             * @enum {string}
             */
            id?: "not_important" | "important" | "very_important" | "mandatory";
            /** @description name for the setting value, translated according to `lc` parameter */
            name?: string;
            /** @description factor to apply to the property of the product corresponding to attributes
             *     having this setting value
             *      */
            factor?: number;
            /** @description FIXME
             *      */
            minimum_match?: number;
        }[];
    };
    responses: never;
    parameters: {
        id: string;
        /** @description 2 letter code of the country of the user. Used for localizing some fields in returned values (e.g. knowledge panels). If not passed, the country may be inferred by the IP address of the request. */
        cc: string;
        /** @description 2 letter code of the language of the user.
         *     Used for localizing some fields in returned values (e.g. knowledge panels).
         *     If not passed, the language may be inferred by the Accept-Language header of the request,
         *     or from the domain name prefix.
         *      */
        lc: string;
        /** @description Barcode of the product */
        code: string;
        process_image: string;
        ocr_engine: string;
        imgid: string;
        angle: string;
        /** @description The page number you request to view (eg. in search results spanning multiple pages)
         *      */
        page: number;
        /** @description The number of elements should be sent per page
         *      */
        page_size: number;
        /** @description The allowed values  used to sort/order the search results.
         *
         *     * `product_name` sorts on name
         *     * `ecoscore_score`, `nova_score`, `nutriscore_score` rank on the [Eco-Score](https://world.openfoodfacts.org/eco-score-the-environmental-impact-of-food-products), [Nova](https://world.openfoodfacts.org/nova), or [Nutri-Score](https://world.openfoodfacts.org/nutriscore)
         *     * `scans_n`, `unique_scans_n` and `popularity_key` are about product popularity: number of scans on unique scans, rank of product
         *     * `created_t`, `last_modified_t`, are about creation and modification dates
         *     * `nothing`, tells not to sort at all (because if you do not provide the sort_by argument we default to sorting on popularity (for food) or last modification date)
         *      */
        sort_by: "product_name" | "last_modified_t" | "scans_n" | "unique_scans_n" | "created_t" | "completeness" | "popularity_key" | "nutriscore_score" | "nova_score" | "nothing" | "ecoscore_score";
        fields: string;
        /** @description When knowledge_panels are requested, you can specify which panels should be in the response. All the others will be excluded.
         *      */
        knowledge_panels_included: string;
        /** @description When knowledge_panels are requested, you can specify which panels to exclude from the response. All the others will be included.
         *     If a panel is both excluded and included (with the knowledge_panels_excluded parameter), it will be excluded.
         *      */
        knowledge_panels_excluded: string;
        tagtype: string;
        term: string;
        /** @description Specific fields to return. Use 'knowledge_panels' for Knowledge Panels only. */
        ProductAvailableFields: string;
        /** @description The additives_tags in english of product(s) you are searching for.
         *     The [OFF App](https://world.openfoodfacts.org/additives) has a list of possible values for `additives`.
         *
         *     You can use multiple values by using a comma separated list.
         *     You can add a "-" before values to avoid matching a tag.
         *      */
        additives_tags: string;
        /** @description The allergens_tags in english of product(s) you are searching for.
         *     The [OFF App](https://world.openfoodfacts.org/allergens) has a list of possible values for `allergens`.
         *
         *     You can use multiple values by using a comma separated list.
         *     You can add a "-" before values to avoid matching a tag.
         *      */
        allergens_tags: string;
        /** @description The brands_tags of product(s) you are searching for.
         *     The [OFF App](https://world.openfoodfacts.org/brands) has a list of possible values for `brands`.
         *
         *     You can use multiple values by using a comma separated list.
         *     You can add a "-" before values to avoid matching a tag.
         *      */
        brands_tags: string;
        /** @description The category of product(s) you are searching for.
         *     The [OFF App](https://world.openfoodfacts.org/categories) has a list of possible values for `categories`.
         *
         *     You can use multiple values by using a comma separated list.
         *     You can add a "-" before values to avoid matching a tag.
         *      */
        categories_tags: string;
        /** @description The countries_tags_en of product(s) you are searching for.
         *     The [OFF App](https://world.openfoodfacts.org/countries) shows a list of possible values for `countries`.
         *
         *     You can use multiple values by using a comma separated list.
         *     You can add a "-" before values to avoid matching a tag.
         *      */
        countries_tags: string;
        /** @description The emb_codes_tags of product(s) you are searching for.
         *
         *     You can use multiple values by using a comma separated list.
         *     You can add a "-" before values to avoid matching a tag.
         *      */
        emb_codes_tags: string;
        /** @description The labels_tags in english of product(s) you are searching for.
         *     The [OFF App](https://world.openfoodfacts.org/labels) has a list of possible values for `labels`.
         *
         *     You can use multiple values by using a comma separated list.
         *     You can add a "-" before values to avoid matching a tag.
         *      */
        labels_tags: string;
        /** @description The manufacturing_places_tags of product(s) you are searching for.
         *     The [OFF App](https://world.openfoodfacts.org/manufacturing-places) has a list of possible values for `manufacturing-places`.
         *
         *     You can use multiple values by using a comma separated list.
         *     You can add a "-" before values to avoid matching a tag.
         *      */
        manufacturing_places_tags: string;
        /** @description The nutrition_grades_tags of product(s) you are searching for.
         *     The [OFF App](https://world.openfoodfacts.org/nutrition-grades) has a list of possible values for `nutrition-grades`.
         *
         *     You can use multiple values by using a comma separated list.
         *     You can add a "-" before values to avoid matching a tag.
         *      */
        nutrition_grades_tags: string;
        /** @description The origins_tags of product(s) you are searching for.
         *
         *     You can use multiple values by using a comma separated list.
         *     You can add a "-" before values to avoid matching a tag.
         *      */
        origins_tags: string;
        /** @description The packaging_tag in german of product(s) you are searching for.
         *     The [OFF App](https://world.openfoodfacts.org/packaging) has a list of possible values for `packaging`.
         *
         *     You can use multiple values by using a comma separated list.
         *     You can add a "-" before values to avoid matching a tag.
         *      */
        packaging_tags: string;
        /** @description The purchase_places_tags of product(s) you are searching for.
         *
         *     You can use multiple values by using a comma separated list.
         *     You can add a "-" before values to avoid matching a tag.
         *      */
        purchase_places_tags: string;
        /** @description The states_tags in english of product(s) you are searching for.
         *     The [OFF App](https://world.openfoodfacts.org/states) has a list of possible values for `states`.
         *
         *     You can use multiple values by using a comma separated list.
         *     You can add a "-" before values to avoid matching a tag.
         *      */
        states_tags: string;
        /** @description The stores_tags of product(s) you are searching for.
         *
         *     You can use multiple values by using a comma separated list.
         *     You can add a "-" before values to avoid matching a tag.
         *      */
        stores_tags: string;
        /** @description The traces_tags of product(s) you are searching for.
         *     The [OFF App](https://world.openfoodfacts.org/traces) shows a list of possible values for `traces`.
         *
         *     You can use multiple values by using a comma separated list.
         *     You can add a "-" before values to avoid matching a tag.
         *      */
        traces_tags: string;
        /** @description You can add a language code to a specific tag to query it in a specific language
         *      */
        tag_name_with_language_code: Record<string, never>;
        /** @description Search on nutrient lower than a value
         *      */
        nutrient_lower_than: Record<string, never>;
        /** @description Search on nutrient greater than a value
         *      */
        nutrient_greater_than: Record<string, never>;
        /** @description Search on nutrient for an exact quantity
         *      */
        nutrient_equal: Record<string, never>;
        /** @description Text search terms */
        search_terms: string;
        "SearchGetParameters-page": number;
        "SearchGetParameters-page_size": number;
        json: 1;
        "SearchGetParameters-fields": string;
        "SearchGetParameters-sort_by": "popularity" | "product_name" | "created_t" | "created_datetime" | "completed_t" | "last_modified_t" | "last_modified_datetime" | "unique_scans_n" | "score";
        "SearchGetParameters-states_tags": string;
        "SearchGetParameters-brands_tags": string;
        "SearchGetParameters-categories_tags": string;
        "SearchGetParameters-labels_tags": string;
        "SearchGetParameters-packaging_tags": string;
        "SearchGetParameters-purchase_places_tags": string;
        "SearchGetParameters-stores_tags": string;
        "SearchGetParameters-countries_tags": string;
        ingredients_tags: string;
        trace_tags: string;
    };
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    "get-product-by-barcode": {
        parameters: {
            query?: {
                /** @description Specific fields to return. Use 'knowledge_panels' for Knowledge Panels only. */
                fields?: components["parameters"]["ProductAvailableFields"];
            };
            header?: never;
            path: {
                /** @description The barcode of the product to be fetched */
                barcode: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["get_product_by_barcode"] | (components["schemas"]["get_product_by_barcode_base"] & {
                        product?: components["schemas"]["product_knowledge_panels"];
                    });
                };
            };
        };
    };
    "get-cgi-product_image_upload.pl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["add_photo_to_existing_product"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["add_photo_to_existing_product-2"];
                };
            };
        };
    };
    "get-cgi-ingredients.pl": {
        parameters: {
            query: {
                id: components["parameters"]["id"];
                /** @description Barcode of the product */
                code: components["parameters"]["code"];
                process_image: components["parameters"]["process_image"];
                ocr_engine: components["parameters"]["ocr_engine"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ocr_on_product"];
                };
            };
        };
    };
    "get-cgi-product_image_crop.pl": {
        parameters: {
            query: {
                /** @description Barcode of the product */
                code: components["parameters"]["code"];
                id: components["parameters"]["id"];
                imgid: components["parameters"]["imgid"];
                angle: components["parameters"]["angle"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["rotate_a_photo"];
                };
            };
        };
    };
    "post-cgi-product_image_crop.pl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["crop_a_photo"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": Record<string, never>;
                };
            };
        };
    };
    "post-cgi-product_image_unselect.pl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["unselect_a_photo"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        /** @description status of the unselect operation */
                        status?: string;
                        /** @description status code of the operation */
                        status_code?: number;
                        /** @description image field that was unselected */
                        imagefield?: string;
                    };
                };
            };
        };
    };
    "post-cgi-product_jqm2.pl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: {
            content: {
                "multipart/form-data": components["schemas"]["add_or_edit_a_product"] & components["schemas"]["change_ref_properties"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["add_or_edit_a_product-2"];
                };
            };
        };
    };
    "get-search": {
        parameters: {
            query?: {
                /** @description The additives_tags in english of product(s) you are searching for.
                 *     The [OFF App](https://world.openfoodfacts.org/additives) has a list of possible values for `additives`.
                 *
                 *     You can use multiple values by using a comma separated list.
                 *     You can add a "-" before values to avoid matching a tag.
                 *      */
                additives_tags?: components["parameters"]["additives_tags"];
                /** @description The allergens_tags in english of product(s) you are searching for.
                 *     The [OFF App](https://world.openfoodfacts.org/allergens) has a list of possible values for `allergens`.
                 *
                 *     You can use multiple values by using a comma separated list.
                 *     You can add a "-" before values to avoid matching a tag.
                 *      */
                allergens_tags?: components["parameters"]["allergens_tags"];
                /** @description The brands_tags of product(s) you are searching for.
                 *     The [OFF App](https://world.openfoodfacts.org/brands) has a list of possible values for `brands`.
                 *
                 *     You can use multiple values by using a comma separated list.
                 *     You can add a "-" before values to avoid matching a tag.
                 *      */
                brands_tags?: components["parameters"]["brands_tags"];
                /** @description The category of product(s) you are searching for.
                 *     The [OFF App](https://world.openfoodfacts.org/categories) has a list of possible values for `categories`.
                 *
                 *     You can use multiple values by using a comma separated list.
                 *     You can add a "-" before values to avoid matching a tag.
                 *      */
                categories_tags?: components["parameters"]["categories_tags"];
                /** @description The countries_tags_en of product(s) you are searching for.
                 *     The [OFF App](https://world.openfoodfacts.org/countries) shows a list of possible values for `countries`.
                 *
                 *     You can use multiple values by using a comma separated list.
                 *     You can add a "-" before values to avoid matching a tag.
                 *      */
                countries_tags_en?: components["parameters"]["countries_tags"];
                /** @description The emb_codes_tags of product(s) you are searching for.
                 *
                 *     You can use multiple values by using a comma separated list.
                 *     You can add a "-" before values to avoid matching a tag.
                 *      */
                emb_codes_tags?: components["parameters"]["emb_codes_tags"];
                /** @description The labels_tags in english of product(s) you are searching for.
                 *     The [OFF App](https://world.openfoodfacts.org/labels) has a list of possible values for `labels`.
                 *
                 *     You can use multiple values by using a comma separated list.
                 *     You can add a "-" before values to avoid matching a tag.
                 *      */
                labels_tags?: components["parameters"]["labels_tags"];
                /** @description The manufacturing_places_tags of product(s) you are searching for.
                 *     The [OFF App](https://world.openfoodfacts.org/manufacturing-places) has a list of possible values for `manufacturing-places`.
                 *
                 *     You can use multiple values by using a comma separated list.
                 *     You can add a "-" before values to avoid matching a tag.
                 *      */
                manufacturing_places_tags?: components["parameters"]["manufacturing_places_tags"];
                /** @description The nutrition_grades_tags of product(s) you are searching for.
                 *     The [OFF App](https://world.openfoodfacts.org/nutrition-grades) has a list of possible values for `nutrition-grades`.
                 *
                 *     You can use multiple values by using a comma separated list.
                 *     You can add a "-" before values to avoid matching a tag.
                 *      */
                nutrition_grades_tags?: components["parameters"]["nutrition_grades_tags"];
                /** @description The origins_tags of product(s) you are searching for.
                 *
                 *     You can use multiple values by using a comma separated list.
                 *     You can add a "-" before values to avoid matching a tag.
                 *      */
                origins_tags?: components["parameters"]["origins_tags"];
                /** @description The packaging_tag in german of product(s) you are searching for.
                 *     The [OFF App](https://world.openfoodfacts.org/packaging) has a list of possible values for `packaging`.
                 *
                 *     You can use multiple values by using a comma separated list.
                 *     You can add a "-" before values to avoid matching a tag.
                 *      */
                packaging_tags_de?: components["parameters"]["packaging_tags"];
                /** @description The purchase_places_tags of product(s) you are searching for.
                 *
                 *     You can use multiple values by using a comma separated list.
                 *     You can add a "-" before values to avoid matching a tag.
                 *      */
                purchase_places_tags?: components["parameters"]["purchase_places_tags"];
                /** @description The states_tags in english of product(s) you are searching for.
                 *     The [OFF App](https://world.openfoodfacts.org/states) has a list of possible values for `states`.
                 *
                 *     You can use multiple values by using a comma separated list.
                 *     You can add a "-" before values to avoid matching a tag.
                 *      */
                states_tags?: components["parameters"]["states_tags"];
                /** @description The stores_tags of product(s) you are searching for.
                 *
                 *     You can use multiple values by using a comma separated list.
                 *     You can add a "-" before values to avoid matching a tag.
                 *      */
                stores_tags?: components["parameters"]["stores_tags"];
                /** @description The traces_tags of product(s) you are searching for.
                 *     The [OFF App](https://world.openfoodfacts.org/traces) shows a list of possible values for `traces`.
                 *
                 *     You can use multiple values by using a comma separated list.
                 *     You can add a "-" before values to avoid matching a tag.
                 *      */
                traces_tags?: components["parameters"]["traces_tags"];
                /** @description You can add a language code to a specific tag to query it in a specific language
                 *      */
                "<tag_name>_tags_<language_code>"?: components["parameters"]["tag_name_with_language_code"];
                /** @description Search on nutrient lower than a value
                 *      */
                "<nutrient>_lt_<value>"?: components["parameters"]["nutrient_lower_than"];
                /** @description Search on nutrient greater than a value
                 *      */
                "<nutrient>_gt_<value>"?: components["parameters"]["nutrient_greater_than"];
                /** @description Search on nutrient for an exact quantity
                 *      */
                "<nutrient>_eq_<value>"?: components["parameters"]["nutrient_equal"];
                /** @description Specific fields to return. Use 'knowledge_panels' for Knowledge Panels only. */
                fields?: components["parameters"]["ProductAvailableFields"];
                /** @description The allowed values  used to sort/order the search results.
                 *
                 *     * `product_name` sorts on name
                 *     * `ecoscore_score`, `nova_score`, `nutriscore_score` rank on the [Eco-Score](https://world.openfoodfacts.org/eco-score-the-environmental-impact-of-food-products), [Nova](https://world.openfoodfacts.org/nova), or [Nutri-Score](https://world.openfoodfacts.org/nutriscore)
                 *     * `scans_n`, `unique_scans_n` and `popularity_key` are about product popularity: number of scans on unique scans, rank of product
                 *     * `created_t`, `last_modified_t`, are about creation and modification dates
                 *     * `nothing`, tells not to sort at all (because if you do not provide the sort_by argument we default to sorting on popularity (for food) or last modification date)
                 *      */
                sort_by?: components["parameters"]["sort_by"];
                /** @description The page number you request to view (eg. in search results spanning multiple pages)
                 *      */
                page?: components["parameters"]["page"];
                /** @description The number of elements should be sent per page
                 *      */
                page_size?: components["parameters"]["page_size"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["search_for_products"];
                };
            };
        };
    };
    searchV1ProductsGet: {
        parameters: {
            query?: {
                /** @description Text search terms */
                search_terms?: components["parameters"]["search_terms"];
                page?: components["parameters"]["SearchGetParameters-page"];
                page_size?: components["parameters"]["SearchGetParameters-page_size"];
                json?: components["parameters"]["json"];
                fields?: components["parameters"]["SearchGetParameters-fields"];
                sort_by?: components["parameters"]["SearchGetParameters-sort_by"];
                states_tags?: components["parameters"]["SearchGetParameters-states_tags"];
                brands_tags?: components["parameters"]["SearchGetParameters-brands_tags"];
                categories_tags?: components["parameters"]["SearchGetParameters-categories_tags"];
                labels_tags?: components["parameters"]["SearchGetParameters-labels_tags"];
                packaging_tags?: components["parameters"]["SearchGetParameters-packaging_tags"];
                purchase_places_tags?: components["parameters"]["SearchGetParameters-purchase_places_tags"];
                stores_tags?: components["parameters"]["SearchGetParameters-stores_tags"];
                countries_tags?: components["parameters"]["SearchGetParameters-countries_tags"];
                ingredients_tags?: components["parameters"]["ingredients_tags"];
                trace_tags?: components["parameters"]["trace_tags"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["search_for_products"];
                };
            };
        };
    };
    searchV1ProductsPost: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "multipart/form-data": components["schemas"]["SearchPostSchema"];
            };
        };
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["search_for_products"];
                };
            };
        };
    };
    "get-cgi-suggest.pl": {
        parameters: {
            query?: {
                tagtype?: components["parameters"]["tagtype"];
                term?: components["parameters"]["term"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown[];
                };
            };
        };
    };
    "get-cgi-nutrients.pl": {
        parameters: {
            query?: {
                /** @description 2 letter code of the country of the user. Used for localizing some fields in returned values (e.g. knowledge panels). If not passed, the country may be inferred by the IP address of the request. */
                cc?: components["parameters"]["cc"];
                /** @description 2 letter code of the language of the user.
                 *     Used for localizing some fields in returned values (e.g. knowledge panels).
                 *     If not passed, the language may be inferred by the Accept-Language header of the request,
                 *     or from the domain name prefix.
                 *      */
                lc?: components["parameters"]["lc"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["Nutrients"];
                };
            };
        };
    };
    "get-attribute-groups": {
        parameters: {
            query?: {
                /** @description 2 letter code of the language of the user.
                 *     Used for localizing some fields in returned values (e.g. knowledge panels).
                 *     If not passed, the language may be inferred by the Accept-Language header of the request,
                 *     or from the domain name prefix.
                 *      */
                lc?: components["parameters"]["lc"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["get_attribute_groups"];
                };
            };
        };
    };
    "get-preferences": {
        parameters: {
            query?: {
                /** @description 2 letter code of the language of the user.
                 *     Used for localizing some fields in returned values (e.g. knowledge panels).
                 *     If not passed, the language may be inferred by the Accept-Language header of the request,
                 *     or from the domain name prefix.
                 *      */
                lc?: components["parameters"]["lc"];
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description OK */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["get_preferences"];
                };
            };
        };
    };
    "get-cgi-session.pl": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/x-www-form-urlencoded": {
                    /** @description Username for login */
                    user_id: string;
                    /**
                     * Format: password
                     * @description Password for login
                     */
                    password: string;
                };
            };
        };
        responses: {
            /** @description Successful login */
            200: {
                headers: {
                    "Set-Cookie"?: string;
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Authentication failed */
            401: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
}
