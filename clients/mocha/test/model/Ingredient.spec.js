/**
 * Open Food Facts Open API
 * As a developer, the Open Food Facts API allows you to get information and contribute to the products database. You can create great apps to help people make better food choices and also provide data to enhance the database. 
 *
 * The version of the OpenAPI document: 2
 * Contact: contact@openfoodfacts.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function (root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd() + '/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd() + '/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenFoodFactsOpenApi);
  }
}(this, function (expect, OpenFoodFactsOpenApi) {
  'use strict';

  var instance;

  beforeEach(function () {
    instance = new OpenFoodFactsOpenApi.Ingredient();
  });

  var getProperty = function (object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function (object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Ingredient', function () {
    it('should create an instance of Ingredient', function () {
      // uncomment below and update the code to test Ingredient
      var instance = new OpenFoodFactsOpenApi.Ingredient();
      expect(instance).to.be.a(OpenFoodFactsOpenApi.Ingredient);
    });

    it('should have the property id (base name: "id")', function () {
      // uncomment below and update the code to test the property id
      var instance = new OpenFoodFactsOpenApi.Ingredient();
      //expect(instance).to.be();
    });

    it('should have the property ingredients (base name: "ingredients")', function () {
      // uncomment below and update the code to test the property ingredients
      var instance = new OpenFoodFactsOpenApi.Ingredient();
      //expect(instance).to.be();
    });

    it('should have the property percent (base name: "percent")', function () {
      // uncomment below and update the code to test the property percent
      var instance = new OpenFoodFactsOpenApi.Ingredient();
      //expect(instance).to.be();
    });

    it('should have the property percentEstimate (base name: "percent_estimate")', function () {
      // uncomment below and update the code to test the property percentEstimate
      var instance = new OpenFoodFactsOpenApi.Ingredient();
      //expect(instance).to.be();
    });

    it('should have the property percentMax (base name: "percent_max")', function () {
      // uncomment below and update the code to test the property percentMax
      var instance = new OpenFoodFactsOpenApi.Ingredient();
      //expect(instance).to.be();
    });

    it('should have the property percentMin (base name: "percent_min")', function () {
      // uncomment below and update the code to test the property percentMin
      var instance = new OpenFoodFactsOpenApi.Ingredient();
      //expect(instance).to.be();
    });

    it('should have the property text (base name: "text")', function () {
      // uncomment below and update the code to test the property text
      var instance = new OpenFoodFactsOpenApi.Ingredient();
      //expect(instance).to.be();
    });

    it('should have the property vegan (base name: "vegan")', function () {
      // uncomment below and update the code to test the property vegan
      var instance = new OpenFoodFactsOpenApi.Ingredient();
      //expect(instance).to.be();
    });

    it('should have the property vegetarian (base name: "vegetarian")', function () {
      // uncomment below and update the code to test the property vegetarian
      var instance = new OpenFoodFactsOpenApi.Ingredient();
      //expect(instance).to.be();
    });

  });

}));
