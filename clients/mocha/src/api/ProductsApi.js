/**
 * Open Food Facts Open API
 * As a developer, the Open Food Facts API allows you to get information and contribute to the products database. You can create great apps to help people make better food choices and also provide data to enhance the database. 
 *
 * The version of the OpenAPI document: 2
 * Contact: contact@openfoodfacts.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import GetProductByBarcodeResponse from '../model/GetProductByBarcodeResponse';

/**
* Products service.
* @module api/ProductsApi
* @version 2
*/
export default class ProductsApi {

    /**
    * Constructs a new ProductsApi. 
    * @alias module:api/ProductsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getProductByBarcode operation.
     * @callback module:api/ProductsApi~getProductByBarcodeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/GetProductByBarcodeResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get information for a specific product by barcode
     * A product can be fetched via its unique barcode. It returns all the details of that product response. You can add th Knowledge panels that gives high leve informations about a product, ready to display. This is used by open food facts website, and by the official mobile application 
     * @param {String} barcode The barcode of the product to be fetched 
     * @param {Object} opts Optional parameters
     * @param {module:model/String} [fields] TODO
     * @param {module:api/ProductsApi~getProductByBarcodeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/GetProductByBarcodeResponse}
     */
    getProductByBarcode(barcode, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'barcode' is set
      if (barcode === undefined || barcode === null) {
        throw new Error("Missing the required parameter 'barcode' when calling getProductByBarcode");
      }

      let pathParams = {
        'barcode': barcode
      };
      let queryParams = {
        'fields': opts['fields']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json', 'text/plain'];
      let returnType = GetProductByBarcodeResponse;
      return this.apiClient.callApi(
        '/api/v2/product/{barcode}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
