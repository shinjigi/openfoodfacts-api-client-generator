/* tslint:disable */
/* eslint-disable */
/**
 * Open Food Facts Open API
 * As a developer, the Open Food Facts API allows you to get information and contribute to the products database. You can create great apps to help people make better food choices and also provide data to enhance the database.
 *
 * The version of the OpenAPI document: 2
 * Contact: reuse@openfoodfacts.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 *
 * @export
 * @interface ProductMetaSourceFieldsOrgGs
 */
export interface ProductMetaSourceFieldsOrgGs {
  /**
   *
   * @type {string}
   * @memberof ProductMetaSourceFieldsOrgGs
   */
  gln?: string;
  /**
   *
   * @type {string}
   * @memberof ProductMetaSourceFieldsOrgGs
   */
  gpcCategoryCode?: string;
  /**
   *
   * @type {string}
   * @memberof ProductMetaSourceFieldsOrgGs
   */
  gpcCategoryName?: string;
  /**
   *
   * @type {string}
   * @memberof ProductMetaSourceFieldsOrgGs
   */
  isAllergenRelevantDataProvided?: string;
  /**
   *
   * @type {string}
   * @memberof ProductMetaSourceFieldsOrgGs
   */
  lastChangeDateTime?: string;
  /**
   *
   * @type {string}
   * @memberof ProductMetaSourceFieldsOrgGs
   */
  partyName?: string;
  /**
   *
   * @type {string}
   * @memberof ProductMetaSourceFieldsOrgGs
   */
  productionVariantDescription?: string;
  /**
   *
   * @type {string}
   * @memberof ProductMetaSourceFieldsOrgGs
   */
  publicationDateTime?: string;
}

/**
 * Check if a given object implements the ProductMetaSourceFieldsOrgGs interface.
 */
export function instanceOfProductMetaSourceFieldsOrgGs(
  value: object,
): value is ProductMetaSourceFieldsOrgGs {
  return true;
}

export function ProductMetaSourceFieldsOrgGsFromJSON(
  json: any,
): ProductMetaSourceFieldsOrgGs {
  return ProductMetaSourceFieldsOrgGsFromJSONTyped(json, false);
}

export function ProductMetaSourceFieldsOrgGsFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ProductMetaSourceFieldsOrgGs {
  if (json == null) {
    return json;
  }
  return {
    gln: json["gln"] == null ? undefined : json["gln"],
    gpcCategoryCode:
      json["gpcCategoryCode"] == null ? undefined : json["gpcCategoryCode"],
    gpcCategoryName:
      json["gpcCategoryName"] == null ? undefined : json["gpcCategoryName"],
    isAllergenRelevantDataProvided:
      json["isAllergenRelevantDataProvided"] == null
        ? undefined
        : json["isAllergenRelevantDataProvided"],
    lastChangeDateTime:
      json["lastChangeDateTime"] == null
        ? undefined
        : json["lastChangeDateTime"],
    partyName: json["partyName"] == null ? undefined : json["partyName"],
    productionVariantDescription:
      json["productionVariantDescription"] == null
        ? undefined
        : json["productionVariantDescription"],
    publicationDateTime:
      json["publicationDateTime"] == null
        ? undefined
        : json["publicationDateTime"],
  };
}

export function ProductMetaSourceFieldsOrgGsToJSON(
  json: any,
): ProductMetaSourceFieldsOrgGs {
  return ProductMetaSourceFieldsOrgGsToJSONTyped(json, false);
}

export function ProductMetaSourceFieldsOrgGsToJSONTyped(
  value?: ProductMetaSourceFieldsOrgGs | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    gln: value["gln"],
    gpcCategoryCode: value["gpcCategoryCode"],
    gpcCategoryName: value["gpcCategoryName"],
    isAllergenRelevantDataProvided: value["isAllergenRelevantDataProvided"],
    lastChangeDateTime: value["lastChangeDateTime"],
    partyName: value["partyName"],
    productionVariantDescription: value["productionVariantDescription"],
    publicationDateTime: value["publicationDateTime"],
  };
}
