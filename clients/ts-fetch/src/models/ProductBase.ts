/* tslint:disable */
/* eslint-disable */
/**
 * Open Food Facts Open API
 * As a developer, the Open Food Facts API allows you to get information and contribute to the products database. You can create great apps to help people make better food choices and also provide data to enhance the database.
 *
 * The version of the OpenAPI document: 2
 * Contact: reuse@openfoodfacts.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 * Base product data
 *
 * @export
 * @interface ProductBase
 */
export interface ProductBase {
  /**
   * Abbreviated name in requested language
   * @type {string}
   * @memberof ProductBase
   */
  abbreviated_product_name?: string;
  /**
   * barcode of the product (can be EAN-13 or internal codes for some food stores),
   * for products without a barcode,
   * Open Food Facts assigns a number starting with the 200 reserved prefix
   *
   * @type {string}
   * @memberof ProductBase
   */
  code?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ProductBase
   */
  codes_tags?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ProductBase
   */
  generic_name_it?: string;
  /**
   * Legal name of the product as regulated
   * by the European authorities.
   *
   * @type {string}
   * @memberof ProductBase
   */
  generic_name?: string;
  /**
   * id in database of the product, this normally is the barcode
   * @type {string}
   * @memberof ProductBase
   */
  _id?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ProductBase
   */
  _keywords?: Array<string>;
  /**
   * internal identifier for the product, usually set to the value of `code`,
   * except on the producers platform where it is prefixed by the owner
   *
   * @type {string}
   * @memberof ProductBase
   */
  id?: string;
  /**
   * Main language of the product.
   * This is a duplicate of `lang` property (for historical reasons).
   *
   * @type {string}
   * @memberof ProductBase
   */
  lc?: string;
  /**
   * Main language of the product.
   *
   * This should be the main language of product packaging (if one is predominant).
   *
   * Main language is also used to decide which ingredients list to parse.
   *
   * @type {string}
   * @memberof ProductBase
   */
  lang?: string;
  /**
   * Nova group as an integer from 1 to 4. See https://world.openfoodfacts.org/nova
   *
   * @type {number}
   * @memberof ProductBase
   */
  nova_group?: number;
  /**
   *
   * @type {string}
   * @memberof ProductBase
   */
  nova_groups?: string;
  /**
   *
   * @type {string}
   * @memberof ProductBase
   */
  obsolete?: string;
  /**
   * A date at which the product was declared obsolete.
   * This means it's not produced any more.
   *
   * @type {string}
   * @memberof ProductBase
   */
  obsolete_since_date?: string;
  /**
   * The name of the product
   *
   * @type {string}
   * @memberof ProductBase
   */
  product_name?: string;
  /**
   * Italian name of the product
   *
   * @type {string}
   * @memberof ProductBase
   */
  product_name_it?: string;
  /**
   * The name of the product can also
   * be in many other languages like
   * product_name_fr (for French).
   *
   * @type {string}
   * @memberof ProductBase
   */
  product_name_en?: string;
  /**
   * The size in g or ml for the whole product.
   * It's a normalized version of the quantity field.
   *
   * @type {string}
   * @memberof ProductBase
   */
  product_quantity?: string;
  /**
   * The unit (either g or ml) for the correponding product_quantity.
   *
   * @type {string}
   * @memberof ProductBase
   */
  product_quantity_unit?: string;
  /**
   * Quantity and Unit.
   *
   * @type {string}
   * @memberof ProductBase
   */
  quantity?: string;
}

/**
 * Check if a given object implements the ProductBase interface.
 */
export function instanceOfProductBase(value: object): value is ProductBase {
  return true;
}

export function ProductBaseFromJSON(json: any): ProductBase {
  return ProductBaseFromJSONTyped(json, false);
}

export function ProductBaseFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ProductBase {
  if (json == null) {
    return json;
  }
  return {
    abbreviated_product_name:
      json["abbreviated_product_name"] == null
        ? undefined
        : json["abbreviated_product_name"],
    code: json["code"] == null ? undefined : json["code"],
    codes_tags: json["codes_tags"] == null ? undefined : json["codes_tags"],
    generic_name_it:
      json["generic_name_it"] == null ? undefined : json["generic_name_it"],
    generic_name:
      json["generic_name"] == null ? undefined : json["generic_name"],
    _id: json["_id"] == null ? undefined : json["_id"],
    _keywords: json["_keywords"] == null ? undefined : json["_keywords"],
    id: json["id"] == null ? undefined : json["id"],
    lc: json["lc"] == null ? undefined : json["lc"],
    lang: json["lang"] == null ? undefined : json["lang"],
    nova_group: json["nova_group"] == null ? undefined : json["nova_group"],
    nova_groups: json["nova_groups"] == null ? undefined : json["nova_groups"],
    obsolete: json["obsolete"] == null ? undefined : json["obsolete"],
    obsolete_since_date:
      json["obsolete_since_date"] == null
        ? undefined
        : json["obsolete_since_date"],
    product_name:
      json["product_name"] == null ? undefined : json["product_name"],
    product_name_it:
      json["product_name_it"] == null ? undefined : json["product_name_it"],
    product_name_en:
      json["product_name_en"] == null ? undefined : json["product_name_en"],
    product_quantity:
      json["product_quantity"] == null ? undefined : json["product_quantity"],
    product_quantity_unit:
      json["product_quantity_unit"] == null
        ? undefined
        : json["product_quantity_unit"],
    quantity: json["quantity"] == null ? undefined : json["quantity"],
  };
}

export function ProductBaseToJSON(json: any): ProductBase {
  return ProductBaseToJSONTyped(json, false);
}

export function ProductBaseToJSONTyped(
  value?: ProductBase | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    abbreviated_product_name: value["abbreviated_product_name"],
    code: value["code"],
    codes_tags: value["codes_tags"],
    generic_name_it: value["generic_name_it"],
    generic_name: value["generic_name"],
    _id: value["_id"],
    _keywords: value["_keywords"],
    id: value["id"],
    lc: value["lc"],
    lang: value["lang"],
    nova_group: value["nova_group"],
    nova_groups: value["nova_groups"],
    obsolete: value["obsolete"],
    obsolete_since_date: value["obsolete_since_date"],
    product_name: value["product_name"],
    product_name_it: value["product_name_it"],
    product_name_en: value["product_name_en"],
    product_quantity: value["product_quantity"],
    product_quantity_unit: value["product_quantity_unit"],
    quantity: value["quantity"],
  };
}
