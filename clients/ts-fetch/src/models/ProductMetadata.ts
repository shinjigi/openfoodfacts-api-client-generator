/* tslint:disable */
/* eslint-disable */
/**
 * Open Food Facts Open API
 * As a developer, the Open Food Facts API allows you to get information and contribute to the products database. You can create great apps to help people make better food choices and also provide data to enhance the database.
 *
 * The version of the OpenAPI document: 2
 * Contact: reuse@openfoodfacts.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { ProductMetaSourceFields } from "./ProductMetaSourceFields";
import {
  ProductMetaSourceFieldsFromJSON,
  ProductMetaSourceFieldsFromJSONTyped,
  ProductMetaSourceFieldsToJSON,
  ProductMetaSourceFieldsToJSONTyped,
} from "./ProductMetaSourceFields";
import type { ProductMetaSource } from "./ProductMetaSource";
import {
  ProductMetaSourceFromJSON,
  ProductMetaSourceFromJSONTyped,
  ProductMetaSourceToJSON,
  ProductMetaSourceToJSONTyped,
} from "./ProductMetaSource";

/**
 * Metadata of a product (author, editors, creation date, etc.)
 *
 * @export
 * @interface ProductMetadata
 */
export interface ProductMetadata {
  /**
   * Date when the product was added (UNIX timestamp format).
   * See also `entry_dates_tags`
   *
   * @type {number}
   * @memberof ProductMetadata
   */
  created_t?: number;
  /**
   * The contributor who added the product first.
   *
   * @type {string}
   * @memberof ProductMetadata
   */
  creator?: string;
  /**
   * List of editors who edited the product.
   *
   * @type {Array<string>}
   * @memberof ProductMetadata
   */
  editors_tags?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof ProductMetadata
   */
  informers_tags?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ProductMetadata
   */
  interface_version_created?: string;
  /**
   *
   * @type {string}
   * @memberof ProductMetadata
   */
  interface_version_modified?: string;
  /**
   *
   * @type {object}
   * @memberof ProductMetadata
   */
  languages?: object;
  /**
   * Same as `languages` but by language code, instead of language tags
   *
   * @type {object}
   * @memberof ProductMetadata
   */
  languages_codes?: object;
  /**
   *
   * @type {Array<string>}
   * @memberof ProductMetadata
   */
  languages_hierarchy?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof ProductMetadata
   */
  languages_tags?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof ProductMetadata
   */
  last_edit_dates_tags?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ProductMetadata
   */
  last_editor?: string;
  /**
   * The username of the user who last modified the product.
   *
   * @type {string}
   * @memberof ProductMetadata
   */
  last_modified_by?: string;
  /**
   * Date when the product page was last modified.
   *
   * @type {number}
   * @memberof ProductMetadata
   */
  last_modified_t?: number;
  /**
   * Date when the product page was last updated.
   *
   * @type {number}
   * @memberof ProductMetadata
   */
  last_updated_t?: number;
  /**
   * Id of the producer in case he provides his own data about a product (producer platform).
   *
   * @type {string}
   * @memberof ProductMetadata
   */
  owner?: string;
  /**
   * Tagyfied version of owner
   *
   * @type {string}
   * @memberof ProductMetadata
   */
  owners_tags?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ProductMetadata
   */
  photographers_tags?: Array<string>;
  /**
   * revision number of this product version (each edit adds a revision)
   * @type {number}
   * @memberof ProductMetadata
   */
  rev?: number;
  /**
   *
   * @type {Array<ProductMetaSource>}
   * @memberof ProductMetadata
   */
  sources?: Array<ProductMetaSource>;
  /**
   *
   * @type {ProductMetaSourceFields}
   * @memberof ProductMetadata
   */
  sources_fields?: ProductMetaSourceFields;
  /**
   *
   * @type {string}
   * @memberof ProductMetadata
   */
  teams?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ProductMetadata
   */
  teams_tags?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ProductMetadata
   */
  update_key?: string;
}

/**
 * Check if a given object implements the ProductMetadata interface.
 */
export function instanceOfProductMetadata(
  value: object,
): value is ProductMetadata {
  return true;
}

export function ProductMetadataFromJSON(json: any): ProductMetadata {
  return ProductMetadataFromJSONTyped(json, false);
}

export function ProductMetadataFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ProductMetadata {
  if (json == null) {
    return json;
  }
  return {
    created_t: json["created_t"] == null ? undefined : json["created_t"],
    creator: json["creator"] == null ? undefined : json["creator"],
    editors_tags:
      json["editors_tags"] == null ? undefined : json["editors_tags"],
    informers_tags:
      json["informers_tags"] == null ? undefined : json["informers_tags"],
    interface_version_created:
      json["interface_version_created"] == null
        ? undefined
        : json["interface_version_created"],
    interface_version_modified:
      json["interface_version_modified"] == null
        ? undefined
        : json["interface_version_modified"],
    languages: json["languages"] == null ? undefined : json["languages"],
    languages_codes:
      json["languages_codes"] == null ? undefined : json["languages_codes"],
    languages_hierarchy:
      json["languages_hierarchy"] == null
        ? undefined
        : json["languages_hierarchy"],
    languages_tags:
      json["languages_tags"] == null ? undefined : json["languages_tags"],
    last_edit_dates_tags:
      json["last_edit_dates_tags"] == null
        ? undefined
        : json["last_edit_dates_tags"],
    last_editor: json["last_editor"] == null ? undefined : json["last_editor"],
    last_modified_by:
      json["last_modified_by"] == null ? undefined : json["last_modified_by"],
    last_modified_t:
      json["last_modified_t"] == null ? undefined : json["last_modified_t"],
    last_updated_t:
      json["last_updated_t"] == null ? undefined : json["last_updated_t"],
    owner: json["owner"] == null ? undefined : json["owner"],
    owners_tags: json["owners_tags"] == null ? undefined : json["owners_tags"],
    photographers_tags:
      json["photographers_tags"] == null
        ? undefined
        : json["photographers_tags"],
    rev: json["rev"] == null ? undefined : json["rev"],
    sources:
      json["sources"] == null
        ? undefined
        : (json["sources"] as Array<any>).map(ProductMetaSourceFromJSON),
    sources_fields:
      json["sources_fields"] == null
        ? undefined
        : ProductMetaSourceFieldsFromJSON(json["sources_fields"]),
    teams: json["teams"] == null ? undefined : json["teams"],
    teams_tags: json["teams_tags"] == null ? undefined : json["teams_tags"],
    update_key: json["update_key"] == null ? undefined : json["update_key"],
  };
}

export function ProductMetadataToJSON(json: any): ProductMetadata {
  return ProductMetadataToJSONTyped(json, false);
}

export function ProductMetadataToJSONTyped(
  value?: ProductMetadata | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    created_t: value["created_t"],
    creator: value["creator"],
    editors_tags: value["editors_tags"],
    informers_tags: value["informers_tags"],
    interface_version_created: value["interface_version_created"],
    interface_version_modified: value["interface_version_modified"],
    languages: value["languages"],
    languages_codes: value["languages_codes"],
    languages_hierarchy: value["languages_hierarchy"],
    languages_tags: value["languages_tags"],
    last_edit_dates_tags: value["last_edit_dates_tags"],
    last_editor: value["last_editor"],
    last_modified_by: value["last_modified_by"],
    last_modified_t: value["last_modified_t"],
    last_updated_t: value["last_updated_t"],
    owner: value["owner"],
    owners_tags: value["owners_tags"],
    photographers_tags: value["photographers_tags"],
    rev: value["rev"],
    sources:
      value["sources"] == null
        ? undefined
        : (value["sources"] as Array<any>).map(ProductMetaSourceToJSON),
    sources_fields: ProductMetaSourceFieldsToJSON(value["sources_fields"]),
    teams: value["teams"],
    teams_tags: value["teams_tags"],
    update_key: value["update_key"],
  };
}
