/* tslint:disable */
/* eslint-disable */
/**
 * Open Food Facts Open API
 * As a developer, the Open Food Facts API allows you to get information and contribute to the products database. You can create great apps to help people make better food choices and also provide data to enhance the database.
 *
 * The version of the OpenAPI document: 2
 * Contact: reuse@openfoodfacts.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { AddPhotoToExistingProductResponseImage } from "./AddPhotoToExistingProductResponseImage";
import {
  AddPhotoToExistingProductResponseImageFromJSON,
  AddPhotoToExistingProductResponseImageFromJSONTyped,
  AddPhotoToExistingProductResponseImageToJSON,
  AddPhotoToExistingProductResponseImageToJSONTyped,
} from "./AddPhotoToExistingProductResponseImage";
import type { AddPhotoToExistingProductResponseFilesInner } from "./AddPhotoToExistingProductResponseFilesInner";
import {
  AddPhotoToExistingProductResponseFilesInnerFromJSON,
  AddPhotoToExistingProductResponseFilesInnerFromJSONTyped,
  AddPhotoToExistingProductResponseFilesInnerToJSON,
  AddPhotoToExistingProductResponseFilesInnerToJSONTyped,
} from "./AddPhotoToExistingProductResponseFilesInner";

/**
 *
 * @export
 * @interface AddPhotoToExistingProductResponse
 */
export interface AddPhotoToExistingProductResponse {
  /**
   *
   * @type {Array<AddPhotoToExistingProductResponseFilesInner>}
   * @memberof AddPhotoToExistingProductResponse
   */
  files?: Array<AddPhotoToExistingProductResponseFilesInner>;
  /**
   *
   * @type {AddPhotoToExistingProductResponseImage}
   * @memberof AddPhotoToExistingProductResponse
   */
  image?: AddPhotoToExistingProductResponseImage;
  /**
   *
   * @type {number}
   * @memberof AddPhotoToExistingProductResponse
   */
  imgid?: number;
  /**
   *
   * @type {string}
   * @memberof AddPhotoToExistingProductResponse
   */
  status?: string;
  /**
   *
   * @type {string}
   * @memberof AddPhotoToExistingProductResponse
   */
  imagefield?: string;
  /**
   *
   * @type {string}
   * @memberof AddPhotoToExistingProductResponse
   */
  code?: string;
}

/**
 * Check if a given object implements the AddPhotoToExistingProductResponse interface.
 */
export function instanceOfAddPhotoToExistingProductResponse(
  value: object,
): value is AddPhotoToExistingProductResponse {
  return true;
}

export function AddPhotoToExistingProductResponseFromJSON(
  json: any,
): AddPhotoToExistingProductResponse {
  return AddPhotoToExistingProductResponseFromJSONTyped(json, false);
}

export function AddPhotoToExistingProductResponseFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): AddPhotoToExistingProductResponse {
  if (json == null) {
    return json;
  }
  return {
    files:
      json["files"] == null
        ? undefined
        : (json["files"] as Array<any>).map(
            AddPhotoToExistingProductResponseFilesInnerFromJSON,
          ),
    image:
      json["image"] == null
        ? undefined
        : AddPhotoToExistingProductResponseImageFromJSON(json["image"]),
    imgid: json["imgid"] == null ? undefined : json["imgid"],
    status: json["status"] == null ? undefined : json["status"],
    imagefield: json["imagefield"] == null ? undefined : json["imagefield"],
    code: json["code"] == null ? undefined : json["code"],
  };
}

export function AddPhotoToExistingProductResponseToJSON(
  json: any,
): AddPhotoToExistingProductResponse {
  return AddPhotoToExistingProductResponseToJSONTyped(json, false);
}

export function AddPhotoToExistingProductResponseToJSONTyped(
  value?: AddPhotoToExistingProductResponse | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    files:
      value["files"] == null
        ? undefined
        : (value["files"] as Array<any>).map(
            AddPhotoToExistingProductResponseFilesInnerToJSON,
          ),
    image: AddPhotoToExistingProductResponseImageToJSON(value["image"]),
    imgid: value["imgid"],
    status: value["status"],
    imagefield: value["imagefield"],
    code: value["code"],
  };
}
