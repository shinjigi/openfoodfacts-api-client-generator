/* tslint:disable */
/* eslint-disable */
/**
 * Open Food Facts Open API
 * As a developer, the Open Food Facts API allows you to get information and contribute to the products database. You can create great apps to help people make better food choices and also provide data to enhance the database.
 *
 * The version of the OpenAPI document: 2
 * Contact: reuse@openfoodfacts.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { ProductAllOfManufacturer } from "./ProductAllOfManufacturer";
import {
  ProductAllOfManufacturerFromJSON,
  ProductAllOfManufacturerFromJSONTyped,
  ProductAllOfManufacturerToJSON,
  ProductAllOfManufacturerToJSONTyped,
} from "./ProductAllOfManufacturer";

/**
 *
 * @export
 * @interface ProductMetaSource
 */
export interface ProductMetaSource {
  /**
   *
   * @type {Array<string>}
   * @memberof ProductMetaSource
   */
  fields?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ProductMetaSource
   */
  id?: string;
  /**
   *
   * @type {Array<object>}
   * @memberof ProductMetaSource
   */
  images?: Array<object>;
  /**
   *
   * @type {number}
   * @memberof ProductMetaSource
   */
  import_t?: number;
  /**
   *
   * @type {ProductAllOfManufacturer}
   * @memberof ProductMetaSource
   */
  manufacturer?: ProductAllOfManufacturer;
  /**
   *
   * @type {string}
   * @memberof ProductMetaSource
   */
  name?: string;
  /**
   *
   * @type {string}
   * @memberof ProductMetaSource
   */
  source_licence?: string;
  /**
   *
   * @type {string}
   * @memberof ProductMetaSource
   */
  source_licence_url?: string;
  /**
   *
   * @type {string}
   * @memberof ProductMetaSource
   */
  url?: string | null;
}

/**
 * Check if a given object implements the ProductMetaSource interface.
 */
export function instanceOfProductMetaSource(
  value: object,
): value is ProductMetaSource {
  return true;
}

export function ProductMetaSourceFromJSON(json: any): ProductMetaSource {
  return ProductMetaSourceFromJSONTyped(json, false);
}

export function ProductMetaSourceFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ProductMetaSource {
  if (json == null) {
    return json;
  }
  return {
    fields: json["fields"] == null ? undefined : json["fields"],
    id: json["id"] == null ? undefined : json["id"],
    images: json["images"] == null ? undefined : json["images"],
    import_t: json["import_t"] == null ? undefined : json["import_t"],
    manufacturer:
      json["manufacturer"] == null
        ? undefined
        : ProductAllOfManufacturerFromJSON(json["manufacturer"]),
    name: json["name"] == null ? undefined : json["name"],
    source_licence:
      json["source_licence"] == null ? undefined : json["source_licence"],
    source_licence_url:
      json["source_licence_url"] == null
        ? undefined
        : json["source_licence_url"],
    url: json["url"] == null ? undefined : json["url"],
  };
}

export function ProductMetaSourceToJSON(json: any): ProductMetaSource {
  return ProductMetaSourceToJSONTyped(json, false);
}

export function ProductMetaSourceToJSONTyped(
  value?: ProductMetaSource | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    fields: value["fields"],
    id: value["id"],
    images: value["images"],
    import_t: value["import_t"],
    manufacturer: ProductAllOfManufacturerToJSON(value["manufacturer"]),
    name: value["name"],
    source_licence: value["source_licence"],
    source_licence_url: value["source_licence_url"],
    url: value["url"],
  };
}
