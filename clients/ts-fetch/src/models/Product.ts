/* tslint:disable */
/* eslint-disable */
/**
 * Open Food Facts Open API
 * As a developer, the Open Food Facts API allows you to get information and contribute to the products database. You can create great apps to help people make better food choices and also provide data to enhance the database.
 *
 * The version of the OpenAPI document: 2
 * Contact: reuse@openfoodfacts.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { Panels } from "./Panels";
import {
  PanelsFromJSON,
  PanelsFromJSONTyped,
  PanelsToJSON,
  PanelsToJSONTyped,
} from "./Panels";
import type { ProductSelectedImages } from "./ProductSelectedImages";
import {
  ProductSelectedImagesFromJSON,
  ProductSelectedImagesFromJSONTyped,
  ProductSelectedImagesToJSON,
  ProductSelectedImagesToJSONTyped,
} from "./ProductSelectedImages";
import type { NumberStringObjectType } from "./NumberStringObjectType";
import {
  NumberStringObjectTypeFromJSON,
  NumberStringObjectTypeFromJSONTyped,
  NumberStringObjectTypeToJSON,
  NumberStringObjectTypeToJSONTyped,
} from "./NumberStringObjectType";
import type { PackagingComponentREAD } from "./PackagingComponentREAD";
import {
  PackagingComponentREADFromJSON,
  PackagingComponentREADFromJSONTyped,
  PackagingComponentREADToJSON,
  PackagingComponentREADToJSONTyped,
} from "./PackagingComponentREAD";
import type { ProductMetaSourceFields } from "./ProductMetaSourceFields";
import {
  ProductMetaSourceFieldsFromJSON,
  ProductMetaSourceFieldsFromJSONTyped,
  ProductMetaSourceFieldsToJSON,
  ProductMetaSourceFieldsToJSONTyped,
} from "./ProductMetaSourceFields";
import type { Nutriscore2021Data } from "./Nutriscore2021Data";
import {
  Nutriscore2021DataFromJSON,
  Nutriscore2021DataFromJSONTyped,
  Nutriscore2021DataToJSON,
  Nutriscore2021DataToJSONTyped,
} from "./Nutriscore2021Data";
import type { ProductExtendedCategoriesProperties } from "./ProductExtendedCategoriesProperties";
import {
  ProductExtendedCategoriesPropertiesFromJSON,
  ProductExtendedCategoriesPropertiesFromJSONTyped,
  ProductExtendedCategoriesPropertiesToJSON,
  ProductExtendedCategoriesPropertiesToJSONTyped,
} from "./ProductExtendedCategoriesProperties";
import type { ProductExtendedOwnerFields } from "./ProductExtendedOwnerFields";
import {
  ProductExtendedOwnerFieldsFromJSON,
  ProductExtendedOwnerFieldsFromJSONTyped,
  ProductExtendedOwnerFieldsToJSON,
  ProductExtendedOwnerFieldsToJSONTyped,
} from "./ProductExtendedOwnerFields";
import type { ProductImagesProperties } from "./ProductImagesProperties";
import {
  ProductImagesPropertiesFromJSON,
  ProductImagesPropertiesFromJSONTyped,
  ProductImagesPropertiesToJSON,
  ProductImagesPropertiesToJSONTyped,
} from "./ProductImagesProperties";
import type { ProductNutritionNutriments } from "./ProductNutritionNutriments";
import {
  ProductNutritionNutrimentsFromJSON,
  ProductNutritionNutrimentsFromJSONTyped,
  ProductNutritionNutrimentsToJSON,
  ProductNutritionNutrimentsToJSONTyped,
} from "./ProductNutritionNutriments";
import type { ProductAttributeGroup } from "./ProductAttributeGroup";
import {
  ProductAttributeGroupFromJSON,
  ProductAttributeGroupFromJSONTyped,
  ProductAttributeGroupToJSON,
  ProductAttributeGroupToJSONTyped,
} from "./ProductAttributeGroup";
import type { ProductMiscNutrientLevels } from "./ProductMiscNutrientLevels";
import {
  ProductMiscNutrientLevelsFromJSON,
  ProductMiscNutrientLevelsFromJSONTyped,
  ProductMiscNutrientLevelsToJSON,
  ProductMiscNutrientLevelsToJSONTyped,
} from "./ProductMiscNutrientLevels";
import type { ProductEcoscoreData } from "./ProductEcoscoreData";
import {
  ProductEcoscoreDataFromJSON,
  ProductEcoscoreDataFromJSONTyped,
  ProductEcoscoreDataToJSON,
  ProductEcoscoreDataToJSONTyped,
} from "./ProductEcoscoreData";
import type { Ingredient } from "./Ingredient";
import {
  IngredientFromJSON,
  IngredientFromJSONTyped,
  IngredientToJSON,
  IngredientToJSONTyped,
} from "./Ingredient";
import type { ProductMetaSource } from "./ProductMetaSource";
import {
  ProductMetaSourceFromJSON,
  ProductMetaSourceFromJSONTyped,
  ProductMetaSourceToJSON,
  ProductMetaSourceToJSONTyped,
} from "./ProductMetaSource";
import type { ProductIngredientsIngredientsAnalysis } from "./ProductIngredientsIngredientsAnalysis";
import {
  ProductIngredientsIngredientsAnalysisFromJSON,
  ProductIngredientsIngredientsAnalysisFromJSONTyped,
  ProductIngredientsIngredientsAnalysisToJSON,
  ProductIngredientsIngredientsAnalysisToJSONTyped,
} from "./ProductIngredientsIngredientsAnalysis";
import type { Nutriscores } from "./Nutriscores";
import {
  NutriscoresFromJSON,
  NutriscoresFromJSONTyped,
  NutriscoresToJSON,
  NutriscoresToJSONTyped,
} from "./Nutriscores";

/**
 * This is all the fields describing a product and how to display it on a page.
 *
 * Refer to the different sub schema for more readable entries:
 *
 * * [Product Base](#cmp--schemas-product-base): Base fields of a product
 * * [Product Misc](#cmp--schemas-product-misc): Miscellaneous but important fields of a product
 * * [Product Tags](#cmp--schemas-product-tags): Tags fields on a product
 * * [Product Images](#cmp--schemas-product-images): Information about Images of a product
 * * [Product Eco-Score](#cmp--schemas-product-ecoscore): Fields related to Eco-Score for a product
 * * [Product Ingredients](#cmp--schemas-product-ingredients): Fields about ingredients of a product
 * * [Product Nutrition](#cmp--schemas-product-nutrition): Nutrition fields of a product
 * * [Product Data Quality](#cmp--schemas-product-quality): fields related to data quality for a product
 * * [Product Extended](#cmp--schemas-product-extended): TODO
 * * [Product Metadata](#cmp--schemas-product-meta): Metadata of a product (author, editors, etc.)
 * * [Product Knowledge Panels](#cmp--schemas-product-knowledge-panels): Knowledge panels for a product
 * * [Product Attribute Groups](#cmp--schemas-product-attribute-groups): Attribute groups for personal product matching
 *
 * @export
 * @interface Product
 */
export interface Product {
  /**
   * Abbreviated name in requested language
   * @type {string}
   * @memberof Product
   */
  abbreviated_product_name?: string;
  /**
   * barcode of the product (can be EAN-13 or internal codes for some food stores),
   * for products without a barcode,
   * Open Food Facts assigns a number starting with the 200 reserved prefix
   *
   * @type {string}
   * @memberof Product
   */
  code?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  codes_tags?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  generic_name_it?: string;
  /**
   * Legal name of the product as regulated
   * by the European authorities.
   *
   * @type {string}
   * @memberof Product
   */
  generic_name?: string;
  /**
   * id in database of the product, this normally is the barcode
   * @type {string}
   * @memberof Product
   */
  _id?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  _keywords?: Array<string>;
  /**
   * internal identifier for the product, usually set to the value of `code`,
   * except on the producers platform where it is prefixed by the owner
   *
   * @type {string}
   * @memberof Product
   */
  id?: string;
  /**
   * Main language of the product.
   * This is a duplicate of `lang` property (for historical reasons).
   *
   * @type {string}
   * @memberof Product
   */
  lc?: string;
  /**
   * Main language of the product.
   *
   * This should be the main language of product packaging (if one is predominant).
   *
   * Main language is also used to decide which ingredients list to parse.
   *
   * @type {string}
   * @memberof Product
   */
  lang?: string;
  /**
   * Nova group as an integer from 1 to 4. See https://world.openfoodfacts.org/nova
   *
   * @type {number}
   * @memberof Product
   */
  nova_group?: number;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  nova_groups?: string;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  obsolete?: string;
  /**
   * A date at which the product was declared obsolete.
   * This means it's not produced any more.
   *
   * @type {string}
   * @memberof Product
   */
  obsolete_since_date?: string;
  /**
   * The name of the product
   *
   * @type {string}
   * @memberof Product
   */
  product_name?: string;
  /**
   * Italian name of the product
   *
   * @type {string}
   * @memberof Product
   */
  product_name_it?: string;
  /**
   * The name of the product can also
   * be in many other languages like
   * product_name_fr (for French).
   *
   * @type {string}
   * @memberof Product
   */
  product_name_en?: string;
  /**
   * The size in g or ml for the whole product.
   * It's a normalized version of the quantity field.
   *
   * @type {string}
   * @memberof Product
   */
  product_quantity?: string;
  /**
   * The unit (either g or ml) for the correponding product_quantity.
   *
   * @type {string}
   * @memberof Product
   */
  product_quantity_unit?: string;
  /**
   * Quantity and Unit.
   *
   * @type {string}
   * @memberof Product
   */
  quantity?: string;
  /**
   * Number of food additives.
   *
   * @type {number}
   * @memberof Product
   */
  additives_n?: number;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  checked?: string;
  /**
   *
   * @type {number}
   * @memberof Product
   */
  complete?: number;
  /**
   *
   * @type {number}
   * @memberof Product
   */
  completeness?: number;
  /**
   * See also: `ecoscore_tags`
   *
   * @type {string}
   * @memberof Product
   */
  ecoscore_grade?: string;
  /**
   * See also: `ecoscore_tags`
   *
   * @type {number}
   * @memberof Product
   */
  ecoscore_score?: number;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  food_groups?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  food_groups_tags?: Array<string>;
  /**
   *
   * @type {ProductMiscNutrientLevels}
   * @memberof Product
   */
  nutrient_levels?: ProductMiscNutrientLevels;
  /**
   * Recycling instructions as raw text, e.g. Plastic
   * bottle to recycle, Plastic cap to recycle.
   * This will get automatically parsed and
   * will be used to compute the Eco-Score.
   * You can either request it (if it exists) or
   * send it in a specific language.
   *
   * @type {string}
   * @memberof Product
   */
  packaging_text?: string;
  /**
   * The packagings object is an array of individual packaging component objects.
   *
   * The Packaging data document explains how packaging data is structured in Open Food Facts: https://openfoodfacts.github.io/openfoodfacts-server/dev/explain-packaging-data/
   *
   * The shape, material and recycling properties of each packaging component are linked to entries in the packaging_shapes, packaging_materials and packaging_recycling taxonomies:
   *
   * https://world.openfoodfacts.org/data/taxonomies/packaging_shapes.json
   * https://world.openfoodfacts.org/data/taxonomies/packaging_materials.json
   * https://world.openfoodfacts.org/data/taxonomies/packaging_recycling.json
   *
   * If the tags_lc field is set, the properties will include a lc_name field with the translation in the requested language.
   * @type {Array<PackagingComponentREAD>}
   * @memberof Product
   */
  packagings?: Array<PackagingComponentREAD>;
  /**
   * Indicate if the packagings array contains all the packaging parts of the product. This field can be set by users when they enter or verify packaging data. Possible values are 0 or 1.
   * @type {number}
   * @memberof Product
   */
  packagings_complete?: number;
  /**
   * Category of food according to [French Nutrition and Health Program](https://fr.wikipedia.org/wiki/Programme_national_nutrition_sant%C3%A9)
   *
   * @type {string}
   * @memberof Product
   */
  pnns_groups_1?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  pnns_groups_1_tags?: Array<string>;
  /**
   * Sub Category of food according to [French Nutrition and Health Program](https://fr.wikipedia.org/wiki/Programme_national_nutrition_sant%C3%A9)
   *
   * @type {string}
   * @memberof Product
   */
  pnns_groups_2?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  pnns_groups_2_tags?: Array<string>;
  /**
   * An imprecise measurement of popularity based on Scan statistics. A higher value means higher popularity.
   *
   * @type {number}
   * @memberof Product
   */
  popularity_key?: number;
  /**
   * Indicators for the popularity of a product, like the amount of scans in a specific year.
   *
   * @type {Array<string>}
   * @memberof Product
   */
  popularity_tags?: Array<string>;
  /**
   *
   * @type {number}
   * @memberof Product
   */
  scans_n?: number;
  /**
   *
   * @type {number}
   * @memberof Product
   */
  unique_scans_n?: number;
  /**
   *
   * @type {number}
   * @memberof Product
   */
  sortkey?: number;
  /**
   * Normalized version of serving_size.
   * Note that this is NOT the number of servings by product.
   * <small>(in perl, see `normalize_serving_size`)</small>
   *
   * @type {string}
   * @memberof Product
   */
  serving_quantity?: string;
  /**
   * The unit (either g or ml) for the correponding serving_quantity.
   *
   * @type {string}
   * @memberof Product
   */
  serving_quantity_unit?: string;
  /**
   * Serving size text (generally in g or ml).
   * We expect a quantity + unit but the user is free to input any string.
   *
   * @type {string}
   * @memberof Product
   */
  serving_size?: string;
  /**
   * List of brands (not taxonomized)
   * @type {string}
   * @memberof Product
   */
  brands?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  brands_tags?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  categories?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  categories_hierarchy?: Array<string>;
  /**
   * Categories language code
   * @type {string}
   * @memberof Product
   */
  categories_lc?: string;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  categories_old?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  categories_tags?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  checkers_tags?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  cities?: string;
  /**
   *
   * @type {Array<object>}
   * @memberof Product
   */
  cities_tags?: Array<object>;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  correctors_tags?: Array<string>;
  /**
   * List of countries where the product is sold.
   *
   * @type {string}
   * @memberof Product
   */
  countries?: string;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  countries_beforescanbot?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  countries_hierarchy?: Array<string>;
  /**
   * Countries language code
   * @type {string}
   * @memberof Product
   */
  countries_lc?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  countries_tags?: Array<string>;
  /**
   * All ecoscore of a product.
   * Most of the time it's only one value,
   * but it might eventually be more for products composed of sub-products.
   * See also: `ecoscore_score`, `ecoscore_grade`.
   *
   * @type {Array<string>}
   * @memberof Product
   */
  ecoscore_tags?: Array<string>;
  /**
   * Packager code. EMB is the French system of traceability codes for packager.
   *
   * @type {string}
   * @memberof Product
   */
  emb_codes?: string;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  emb_codes_orig?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  emb_codes_tags?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  labels?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  labels_hierarchy?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  labels_lc?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  labels_tags?: Array<string>;
  /**
   * The data as a series of tag: `yyyy-mm-dd`, `yyyy-mm`, `yyyy`
   *
   * @type {Array<string>}
   * @memberof Product
   */
  entry_dates_tags?: Array<string>;
  /**
   * Places where the product was manufactured or transformed.
   *
   * @type {string}
   * @memberof Product
   */
  manufacturing_places?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  manufacturing_places_tags?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  nova_groups_tags?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  nutrient_levels_tags?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  image_front_small_url?: string;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  image_front_thumb_url?: string;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  image_front_url?: string;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  image_ingredients_small_url?: string;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  image_ingredients_thumb_url?: string;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  image_ingredients_url?: string;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  image_packaging_small_url?: string;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  image_packaging_thumb_url?: string;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  image_packaging_url?: string;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  image_nutrition_small_url?: string;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  image_nutrition_thumb_url?: string;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  image_nutrition_url?: string;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  image_small_url?: string;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  image_thumb_url?: string;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  image_url?: string;
  /**
   *
   * @type {ProductImagesProperties}
   * @memberof Product
   */
  images?: ProductImagesProperties;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  last_image_dates_tags?: Array<string>;
  /**
   * timestamp of last image upload (or update?)
   * @type {number}
   * @memberof Product
   */
  last_image_t?: number;
  /**
   *
   * @type {ProductSelectedImages}
   * @memberof Product
   */
  selected_images?: ProductSelectedImages;
  /**
   *
   * @type {ProductEcoscoreData}
   * @memberof Product
   */
  ecoscore_data?: ProductEcoscoreData;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  ecoscore_extended_data_version?: string;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  environment_impact_level?: string;
  /**
   *
   * @type {Array<object>}
   * @memberof Product
   */
  environment_impact_level_tags?: Array<object>;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  additives_tags?: Array<string>;
  /**
   * comma separated list of allergens
   * @type {string}
   * @memberof Product
   */
  allergens?: string;
  /**
   * language in which `allergens` where input
   * @type {string}
   * @memberof Product
   */
  allergens_lc?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  allergens_hierarchy?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  allergens_tags?: Array<string>;
  /**
   * This structure gives the different ingredients and some information about them,
   * like estimate on their quantity.
   *
   * @type {Array<Ingredient>}
   * @memberof Product
   */
  ingredients?: Array<Ingredient>;
  /**
   *
   * @type {ProductIngredientsIngredientsAnalysis}
   * @memberof Product
   */
  ingredients_analysis?: ProductIngredientsIngredientsAnalysis;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  ingredients_analysis_tags?: Array<string>;
  /**
   *
   * @type {number}
   * @memberof Product
   */
  ingredients_from_or_that_may_be_from_palm_oil_n?: number;
  /**
   *
   * @type {number}
   * @memberof Product
   */
  ingredients_from_palm_oil_n?: number;
  /**
   *
   * @type {Array<object>}
   * @memberof Product
   */
  ingredients_from_palm_oil_tags?: Array<object>;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  ingredients_hierarchy?: Array<string>;
  /**
   *
   * @type {number}
   * @memberof Product
   */
  ingredients_n?: number;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  ingredients_n_tags?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  ingredients_original_tags?: Array<string>;
  /**
   *
   * @type {number}
   * @memberof Product
   */
  ingredients_percent_analysis?: number;
  /**
   * Number of sweeteners additives in the ingredients. Undefined if ingredients are not specified.
   *
   * @type {number}
   * @memberof Product
   */
  ingredients_sweeteners_n?: number;
  /**
   * Number of non-nutritive sweeteners additives (as specified in the Nutri-Score formula) in the ingredients. Undefined if ingredients are not specified.
   *
   * @type {number}
   * @memberof Product
   */
  ingredients_non_nutritive_sweeteners_n?: number;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  ingredients_tags?: Array<string>;
  /**
   * Language that was used to parse the ingredient list. If `ingredients_text` is available
   * for the product main language (`lang`), `ingredients_lc=lang`, otherwise we look at
   * `ingredients_text` fields for other languages and set `ingredients_lc` to the first
   * non-empty `ingredient_text`.
   *
   * @type {string}
   * @memberof Product
   */
  ingredients_lc?: string;
  /**
   * Ingredients text in Italian
   * @type {string}
   * @memberof Product
   */
  ingredients_text_it?: string;
  /**
   * Ingredients text in English
   * @type {string}
   * @memberof Product
   */
  ingredients_text_en?: string;
  /**
   * Raw list of ingredients. This will get automatically
   * parsed and get used to compute the Eco-Score or find allergens, etc..
   *
   * It's a copy of ingredients_text in the main language of the product (see `lang` proprety).
   *
   * @type {string}
   * @memberof Product
   */
  ingredients_text?: string;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  ingredients_text_with_allergens?: string;
  /**
   * Same text as `ingredients_text` but where allergens have HTML elements around them to identify them
   *
   * @type {string}
   * @memberof Product
   */
  ingredients_text_with_allergens_it?: string;
  /**
   *
   * @type {number}
   * @memberof Product
   */
  ingredients_that_may_be_from_palm_oil_n?: number;
  /**
   *
   * @type {Array<object>}
   * @memberof Product
   */
  ingredients_that_may_be_from_palm_oil_tags?: Array<object>;
  /**
   *
   * @type {number}
   * @memberof Product
   */
  ingredients_with_specified_percent_n?: number;
  /**
   *
   * @type {number}
   * @memberof Product
   */
  ingredients_with_specified_percent_sum?: number;
  /**
   *
   * @type {number}
   * @memberof Product
   */
  ingredients_with_unspecified_percent_n?: number;
  /**
   *
   * @type {number}
   * @memberof Product
   */
  ingredients_with_unspecified_percent_sum?: number;
  /**
   *
   * @type {number}
   * @memberof Product
   */
  known_ingredients_n?: number;
  /**
   * Origins of ingredients
   *
   * @type {string}
   * @memberof Product
   */
  origins?: string;
  /**
   *
   * @type {Array<object>}
   * @memberof Product
   */
  origins_hierarchy?: Array<object>;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  origins_lc?: string;
  /**
   *
   * @type {Array<object>}
   * @memberof Product
   */
  origins_tags?: Array<object>;
  /**
   * List of substances that might cause allergies
   * that are present in trace amounts in the product
   * (this does not include the ingredients, as they
   * are not only present in trace amounts).
   * It is taxonomized with the allergens taxonomy.
   *
   * @type {string}
   * @memberof Product
   */
  traces?: string;
  /**
   *
   * @type {Array<NumberStringObjectType>}
   * @memberof Product
   */
  traces_hierarchy?: Array<NumberStringObjectType>;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  traces_lc?: string;
  /**
   *
   * @type {Array<NumberStringObjectType>}
   * @memberof Product
   */
  traces_tags?: Array<NumberStringObjectType>;
  /**
   *
   * @type {number}
   * @memberof Product
   */
  unknown_ingredients_n?: number;
  /**
   * When a product does not have nutrition data displayed on the
   * packaging, the user can check the field "Nutrition facts are
   * not specified on the product".
   * By doing so, the no_nutrition_data field takes the value "on".
   * This case is frequent (thousands of products).
   *
   * @type {string}
   * @memberof Product
   */
  no_nutrition_data?: string;
  /**
   * The nutrition data on the package can be per serving or per 100g.
   *
   * This is essential to understand if `<nutrient>_value` and `<nutrient>`
   * values in `nutriments` applies for a serving or for 100g.
   *
   * **IMPORTANT:**
   * When writing products,
   * this setting applies to all existing nutrients values for the product,
   * not only the nutrient values sent in the write request.
   * So it should not be changed unless all nutrients values are provided
   * with values that match the nutrition_data_per field.
   *
   * @type {string}
   * @memberof Product
   */
  nutrition_data_per?: ProductNutritionDataPerEnum;
  /**
   * The nutrition data for prepared product on the package (if any) can be per serving or per 100g.
   *
   * This is essential to understand if `<nutrient>_prepared_value` and `<nutrient>_prepared`
   * values in `nutriments` applies for a serving or for 100g.
   *
   * See also important note on `nutrition_data_per`.
   *
   * @type {string}
   * @memberof Product
   */
  nutrition_data_prepared_per?: ProductNutritionDataPreparedPerEnum;
  /**
   *
   * @type {ProductNutritionNutriments}
   * @memberof Product
   */
  nutriments?: ProductNutritionNutriments;
  /**
   *
   * @type {Nutriscore2021Data}
   * @memberof Product
   */
  nutriscore_data?: Nutriscore2021Data;
  /**
   * Nutrition grade (‘a’ to ‘e’),
   * https://world.openfoodfacts.org/nutriscore.
   *
   * @type {string}
   * @memberof Product
   */
  nutrition_grade_fr?: string;
  /**
   * Nutrition grades as a comma separated list.
   *
   * Some products with multiple components might have multiple Nutri-Score
   *
   * @type {string}
   * @memberof Product
   */
  nutrition_grades?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  nutrition_grades_tags?: Array<string>;
  /**
   *
   * @type {number}
   * @memberof Product
   */
  nutrition_score_beverage?: number;
  /**
   *
   * @type {number}
   * @memberof Product
   */
  nutrition_score_warning_fruits_vegetables_legumes_estimate_from_ingredients?: number;
  /**
   *
   * @type {number}
   * @memberof Product
   */
  nutrition_score_warning_fruits_vegetables_legumes_estimate_from_ingredients_value?: number;
  /**
   *
   * @type {number}
   * @memberof Product
   */
  nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients?: number;
  /**
   *
   * @type {number}
   * @memberof Product
   */
  nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients_value?: number;
  /**
   *
   * @type {number}
   * @memberof Product
   */
  nutrition_score_warning_no_fiber?: number;
  /**
   *
   * @type {Array<object>}
   * @memberof Product
   */
  other_nutritional_substances_tags?: Array<object>;
  /**
   *
   * @type {Array<object>}
   * @memberof Product
   */
  unknown_nutrients_tags?: Array<object>;
  /**
   *
   * @type {Array<object>}
   * @memberof Product
   */
  vitamins_tags?: Array<object>;
  /**
   *
   * @type {Nutriscores}
   * @memberof Product
   */
  nutriscore?: Nutriscores;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  nutriscore_2021_tags?: Array<ProductNutriscore2021TagsEnum>;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  nutriscore_2023_tags?: Array<ProductNutriscore2023TagsEnum>;
  /**
   * Nutri-Score for the product as a letter.
   *
   * See https://world.openfoodfacts.org/nutriscore.
   *
   * @type {string}
   * @memberof Product
   */
  nutriscore_grade?: ProductNutriscoreGradeEnum;
  /**
   * Nutri-Score for the product as an integer (see also `nutriscore_grade`).
   *
   * @type {number}
   * @memberof Product
   */
  nutriscore_score?: number;
  /**
   *
   * @type {number}
   * @memberof Product
   */
  nutriscore_score_opposite?: number;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  nutriscore_tags?: Array<ProductNutriscoreTagsEnum>;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  nutriscore_version?: string;
  /**
   *
   * @type {Array<object>}
   * @memberof Product
   */
  data_quality_bugs_tags?: Array<object>;
  /**
   *
   * @type {Array<object>}
   * @memberof Product
   */
  data_quality_errors_tags?: Array<object>;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  data_quality_info_tags?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  data_quality_tags?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  data_quality_warning_tags?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  data_quality_warnings_tags?: Array<string>;
  /**
   * Source of data imported from producers.
   *
   * @type {string}
   * @memberof Product
   */
  data_sources?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  data_sources_tags?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  debug_param_sorted_langs?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  last_check_dates_tags?: Array<string>;
  /**
   *
   * @type {number}
   * @memberof Product
   */
  last_checked_t?: number;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  last_checker?: string;
  /**
   * comma separated list of values indicating some states of the product,
   * like things to be done, or to be completed.
   * See [states taxonomy](https://static.openfoodfacts.net/data/taxonomies/states.json)
   *
   * @type {string}
   * @memberof Product
   */
  states?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  states_hierarchy?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  states_tags?: Array<string>;
  /**
   * Information about different aspect of the product
   *
   * @type {Array<string>}
   * @memberof Product
   */
  misc_tags?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  additives_original_tags?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  additives_prev_original_tags?: Array<string>;
  /**
   *
   * @type {Array<object>}
   * @memberof Product
   */
  added_countries_tags?: Array<object>;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  allergens_from_ingredients?: string;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  allergens_from_user?: string;
  /**
   *
   * @type {Array<object>}
   * @memberof Product
   */
  amino_acids_prev_tags?: Array<object>;
  /**
   *
   * @type {Array<object>}
   * @memberof Product
   */
  amino_acids_tags?: Array<object>;
  /**
   *
   * @type {number}
   * @memberof Product
   */
  carbon_footprint_percent_of_known_ingredients?: number;
  /**
   *
   * @type {ProductExtendedCategoriesProperties}
   * @memberof Product
   */
  categories_properties?: ProductExtendedCategoriesProperties;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  categories_properties_tags?: Array<string>;
  /**
   *
   * @type {{ [key: string]: string; }}
   * @memberof Product
   */
  category_properties?: { [key: string]: string };
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  ciqual_food_name_tags?: Array<string>;
  /**
   * the category to use for comparison.
   *
   * **TODO** explain how it is chosen.
   *
   * @type {string}
   * @memberof Product
   */
  compared_to_category?: string;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  conservation_conditions?: string;
  /**
   * Contact info of customer service.
   *
   * @type {string}
   * @memberof Product
   */
  customer_service?: string;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  expiration_date?: string;
  /**
   * link to the product on the website of the producer
   *
   * @type {string}
   * @memberof Product
   */
  link?: string;
  /**
   *
   * @type {Array<object>}
   * @memberof Product
   */
  main_countries_tags?: Array<object>;
  /**
   *
   * @type {Array<object>}
   * @memberof Product
   */
  minerals_prev_tags?: Array<object>;
  /**
   *
   * @type {Array<object>}
   * @memberof Product
   */
  minerals_tags?: Array<object>;
  /**
   *
   * @type {ProductExtendedOwnerFields}
   * @memberof Product
   */
  owner_fields?: ProductExtendedOwnerFields;
  /**
   * Detail of ingredients or processing that makes the products having Nova 3 or 4
   *
   * @type {{ [key: string]: Array<Array<string>>; }}
   * @memberof Product
   */
  nova_groups_markers?: { [key: string]: Array<Array<string>> };
  /**
   *
   * @type {Array<object>}
   * @memberof Product
   */
  nucleotides_tags?: Array<object>;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  origin?: string;
  /**
   * Country, state, or city where the product can be purchased.
   *
   * @type {string}
   * @memberof Product
   */
  purchase_places?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  purchase_places_tags?: Array<string>;
  /**
   * Distributor name.
   *
   * @type {string}
   * @memberof Product
   */
  stores?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  stores_tags?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  traces_from_ingredients?: string;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  traces_from_user?: string;
  /**
   * Date when the product was added (UNIX timestamp format).
   * See also `entry_dates_tags`
   *
   * @type {number}
   * @memberof Product
   */
  created_t?: number;
  /**
   * The contributor who added the product first.
   *
   * @type {string}
   * @memberof Product
   */
  creator?: string;
  /**
   * List of editors who edited the product.
   *
   * @type {Array<string>}
   * @memberof Product
   */
  editors_tags?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  informers_tags?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  interface_version_created?: string;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  interface_version_modified?: string;
  /**
   *
   * @type {object}
   * @memberof Product
   */
  languages?: object;
  /**
   * Same as `languages` but by language code, instead of language tags
   *
   * @type {object}
   * @memberof Product
   */
  languages_codes?: object;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  languages_hierarchy?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  languages_tags?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  last_edit_dates_tags?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  last_editor?: string;
  /**
   * The username of the user who last modified the product.
   *
   * @type {string}
   * @memberof Product
   */
  last_modified_by?: string;
  /**
   * Date when the product page was last modified.
   *
   * @type {number}
   * @memberof Product
   */
  last_modified_t?: number;
  /**
   * Date when the product page was last updated.
   *
   * @type {number}
   * @memberof Product
   */
  last_updated_t?: number;
  /**
   * Id of the producer in case he provides his own data about a product (producer platform).
   *
   * @type {string}
   * @memberof Product
   */
  owner?: string;
  /**
   * Tagyfied version of owner
   *
   * @type {string}
   * @memberof Product
   */
  owners_tags?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  photographers_tags?: Array<string>;
  /**
   * revision number of this product version (each edit adds a revision)
   * @type {number}
   * @memberof Product
   */
  rev?: number;
  /**
   *
   * @type {Array<ProductMetaSource>}
   * @memberof Product
   */
  sources?: Array<ProductMetaSource>;
  /**
   *
   * @type {ProductMetaSourceFields}
   * @memberof Product
   */
  sources_fields?: ProductMetaSourceFields;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  teams?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof Product
   */
  teams_tags?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof Product
   */
  update_key?: string;
  /**
   *
   * @type {Panels}
   * @memberof Product
   */
  knowledge_panels?: Panels;
  /**
   * Each element is an attribute that can help compute a personal ranking for the product
   * @type {Array<ProductAttributeGroup>}
   * @memberof Product
   */
  attribute_groups?: Array<ProductAttributeGroup>;
}

/**
 * @export
 */
export const ProductNutritionDataPerEnum = {
  serving: "serving",
  _100g: "100g",
} as const;
export type ProductNutritionDataPerEnum =
  (typeof ProductNutritionDataPerEnum)[keyof typeof ProductNutritionDataPerEnum];

/**
 * @export
 */
export const ProductNutritionDataPreparedPerEnum = {
  serving: "serving",
  _100g: "100g",
} as const;
export type ProductNutritionDataPreparedPerEnum =
  (typeof ProductNutritionDataPreparedPerEnum)[keyof typeof ProductNutritionDataPreparedPerEnum];

/**
 * @export
 */
export const ProductNutriscore2021TagsEnum = {
  a: "a",
  b: "b",
  c: "c",
  d: "d",
  e: "e",
} as const;
export type ProductNutriscore2021TagsEnum =
  (typeof ProductNutriscore2021TagsEnum)[keyof typeof ProductNutriscore2021TagsEnum];

/**
 * @export
 */
export const ProductNutriscore2023TagsEnum = {
  a: "a",
  b: "b",
  c: "c",
  d: "d",
  e: "e",
} as const;
export type ProductNutriscore2023TagsEnum =
  (typeof ProductNutriscore2023TagsEnum)[keyof typeof ProductNutriscore2023TagsEnum];

/**
 * @export
 */
export const ProductNutriscoreGradeEnum = {
  a: "a",
  b: "b",
  c: "c",
  d: "d",
  e: "e",
} as const;
export type ProductNutriscoreGradeEnum =
  (typeof ProductNutriscoreGradeEnum)[keyof typeof ProductNutriscoreGradeEnum];

/**
 * @export
 */
export const ProductNutriscoreTagsEnum = {
  a: "a",
  b: "b",
  c: "c",
  d: "d",
  e: "e",
} as const;
export type ProductNutriscoreTagsEnum =
  (typeof ProductNutriscoreTagsEnum)[keyof typeof ProductNutriscoreTagsEnum];

/**
 * Check if a given object implements the Product interface.
 */
export function instanceOfProduct(value: object): value is Product {
  return true;
}

export function ProductFromJSON(json: any): Product {
  return ProductFromJSONTyped(json, false);
}

export function ProductFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): Product {
  if (json == null) {
    return json;
  }
  return {
    abbreviated_product_name:
      json["abbreviated_product_name"] == null
        ? undefined
        : json["abbreviated_product_name"],
    code: json["code"] == null ? undefined : json["code"],
    codes_tags: json["codes_tags"] == null ? undefined : json["codes_tags"],
    generic_name_it:
      json["generic_name_it"] == null ? undefined : json["generic_name_it"],
    generic_name:
      json["generic_name"] == null ? undefined : json["generic_name"],
    _id: json["_id"] == null ? undefined : json["_id"],
    _keywords: json["_keywords"] == null ? undefined : json["_keywords"],
    id: json["id"] == null ? undefined : json["id"],
    lc: json["lc"] == null ? undefined : json["lc"],
    lang: json["lang"] == null ? undefined : json["lang"],
    nova_group: json["nova_group"] == null ? undefined : json["nova_group"],
    nova_groups: json["nova_groups"] == null ? undefined : json["nova_groups"],
    obsolete: json["obsolete"] == null ? undefined : json["obsolete"],
    obsolete_since_date:
      json["obsolete_since_date"] == null
        ? undefined
        : json["obsolete_since_date"],
    product_name:
      json["product_name"] == null ? undefined : json["product_name"],
    product_name_it:
      json["product_name_it"] == null ? undefined : json["product_name_it"],
    product_name_en:
      json["product_name_en"] == null ? undefined : json["product_name_en"],
    product_quantity:
      json["product_quantity"] == null ? undefined : json["product_quantity"],
    product_quantity_unit:
      json["product_quantity_unit"] == null
        ? undefined
        : json["product_quantity_unit"],
    quantity: json["quantity"] == null ? undefined : json["quantity"],
    additives_n: json["additives_n"] == null ? undefined : json["additives_n"],
    checked: json["checked"] == null ? undefined : json["checked"],
    complete: json["complete"] == null ? undefined : json["complete"],
    completeness:
      json["completeness"] == null ? undefined : json["completeness"],
    ecoscore_grade:
      json["ecoscore_grade"] == null ? undefined : json["ecoscore_grade"],
    ecoscore_score:
      json["ecoscore_score"] == null ? undefined : json["ecoscore_score"],
    food_groups: json["food_groups"] == null ? undefined : json["food_groups"],
    food_groups_tags:
      json["food_groups_tags"] == null ? undefined : json["food_groups_tags"],
    nutrient_levels:
      json["nutrient_levels"] == null
        ? undefined
        : ProductMiscNutrientLevelsFromJSON(json["nutrient_levels"]),
    packaging_text:
      json["packaging_text"] == null ? undefined : json["packaging_text"],
    packagings:
      json["packagings"] == null
        ? undefined
        : (json["packagings"] as Array<any>).map(
            PackagingComponentREADFromJSON,
          ),
    packagings_complete:
      json["packagings_complete"] == null
        ? undefined
        : json["packagings_complete"],
    pnns_groups_1:
      json["pnns_groups_1"] == null ? undefined : json["pnns_groups_1"],
    pnns_groups_1_tags:
      json["pnns_groups_1_tags"] == null
        ? undefined
        : json["pnns_groups_1_tags"],
    pnns_groups_2:
      json["pnns_groups_2"] == null ? undefined : json["pnns_groups_2"],
    pnns_groups_2_tags:
      json["pnns_groups_2_tags"] == null
        ? undefined
        : json["pnns_groups_2_tags"],
    popularity_key:
      json["popularity_key"] == null ? undefined : json["popularity_key"],
    popularity_tags:
      json["popularity_tags"] == null ? undefined : json["popularity_tags"],
    scans_n: json["scans_n"] == null ? undefined : json["scans_n"],
    unique_scans_n:
      json["unique_scans_n"] == null ? undefined : json["unique_scans_n"],
    sortkey: json["sortkey"] == null ? undefined : json["sortkey"],
    serving_quantity:
      json["serving_quantity"] == null ? undefined : json["serving_quantity"],
    serving_quantity_unit:
      json["serving_quantity_unit"] == null
        ? undefined
        : json["serving_quantity_unit"],
    serving_size:
      json["serving_size"] == null ? undefined : json["serving_size"],
    brands: json["brands"] == null ? undefined : json["brands"],
    brands_tags: json["brands_tags"] == null ? undefined : json["brands_tags"],
    categories: json["categories"] == null ? undefined : json["categories"],
    categories_hierarchy:
      json["categories_hierarchy"] == null
        ? undefined
        : json["categories_hierarchy"],
    categories_lc:
      json["categories_lc"] == null ? undefined : json["categories_lc"],
    categories_old:
      json["categories_old"] == null ? undefined : json["categories_old"],
    categories_tags:
      json["categories_tags"] == null ? undefined : json["categories_tags"],
    checkers_tags:
      json["checkers_tags"] == null ? undefined : json["checkers_tags"],
    cities: json["cities"] == null ? undefined : json["cities"],
    cities_tags: json["cities_tags"] == null ? undefined : json["cities_tags"],
    correctors_tags:
      json["correctors_tags"] == null ? undefined : json["correctors_tags"],
    countries: json["countries"] == null ? undefined : json["countries"],
    countries_beforescanbot:
      json["countries_beforescanbot"] == null
        ? undefined
        : json["countries_beforescanbot"],
    countries_hierarchy:
      json["countries_hierarchy"] == null
        ? undefined
        : json["countries_hierarchy"],
    countries_lc:
      json["countries_lc"] == null ? undefined : json["countries_lc"],
    countries_tags:
      json["countries_tags"] == null ? undefined : json["countries_tags"],
    ecoscore_tags:
      json["ecoscore_tags"] == null ? undefined : json["ecoscore_tags"],
    emb_codes: json["emb_codes"] == null ? undefined : json["emb_codes"],
    emb_codes_orig:
      json["emb_codes_orig"] == null ? undefined : json["emb_codes_orig"],
    emb_codes_tags:
      json["emb_codes_tags"] == null ? undefined : json["emb_codes_tags"],
    labels: json["labels"] == null ? undefined : json["labels"],
    labels_hierarchy:
      json["labels_hierarchy"] == null ? undefined : json["labels_hierarchy"],
    labels_lc: json["labels_lc"] == null ? undefined : json["labels_lc"],
    labels_tags: json["labels_tags"] == null ? undefined : json["labels_tags"],
    entry_dates_tags:
      json["entry_dates_tags"] == null ? undefined : json["entry_dates_tags"],
    manufacturing_places:
      json["manufacturing_places"] == null
        ? undefined
        : json["manufacturing_places"],
    manufacturing_places_tags:
      json["manufacturing_places_tags"] == null
        ? undefined
        : json["manufacturing_places_tags"],
    nova_groups_tags:
      json["nova_groups_tags"] == null ? undefined : json["nova_groups_tags"],
    nutrient_levels_tags:
      json["nutrient_levels_tags"] == null
        ? undefined
        : json["nutrient_levels_tags"],
    image_front_small_url:
      json["image_front_small_url"] == null
        ? undefined
        : json["image_front_small_url"],
    image_front_thumb_url:
      json["image_front_thumb_url"] == null
        ? undefined
        : json["image_front_thumb_url"],
    image_front_url:
      json["image_front_url"] == null ? undefined : json["image_front_url"],
    image_ingredients_small_url:
      json["image_ingredients_small_url"] == null
        ? undefined
        : json["image_ingredients_small_url"],
    image_ingredients_thumb_url:
      json["image_ingredients_thumb_url"] == null
        ? undefined
        : json["image_ingredients_thumb_url"],
    image_ingredients_url:
      json["image_ingredients_url"] == null
        ? undefined
        : json["image_ingredients_url"],
    image_packaging_small_url:
      json["image_packaging_small_url"] == null
        ? undefined
        : json["image_packaging_small_url"],
    image_packaging_thumb_url:
      json["image_packaging_thumb_url"] == null
        ? undefined
        : json["image_packaging_thumb_url"],
    image_packaging_url:
      json["image_packaging_url"] == null
        ? undefined
        : json["image_packaging_url"],
    image_nutrition_small_url:
      json["image_nutrition_small_url"] == null
        ? undefined
        : json["image_nutrition_small_url"],
    image_nutrition_thumb_url:
      json["image_nutrition_thumb_url"] == null
        ? undefined
        : json["image_nutrition_thumb_url"],
    image_nutrition_url:
      json["image_nutrition_url"] == null
        ? undefined
        : json["image_nutrition_url"],
    image_small_url:
      json["image_small_url"] == null ? undefined : json["image_small_url"],
    image_thumb_url:
      json["image_thumb_url"] == null ? undefined : json["image_thumb_url"],
    image_url: json["image_url"] == null ? undefined : json["image_url"],
    images:
      json["images"] == null
        ? undefined
        : ProductImagesPropertiesFromJSON(json["images"]),
    last_image_dates_tags:
      json["last_image_dates_tags"] == null
        ? undefined
        : json["last_image_dates_tags"],
    last_image_t:
      json["last_image_t"] == null ? undefined : json["last_image_t"],
    selected_images:
      json["selected_images"] == null
        ? undefined
        : ProductSelectedImagesFromJSON(json["selected_images"]),
    ecoscore_data:
      json["ecoscore_data"] == null
        ? undefined
        : ProductEcoscoreDataFromJSON(json["ecoscore_data"]),
    ecoscore_extended_data_version:
      json["ecoscore_extended_data_version"] == null
        ? undefined
        : json["ecoscore_extended_data_version"],
    environment_impact_level:
      json["environment_impact_level"] == null
        ? undefined
        : json["environment_impact_level"],
    environment_impact_level_tags:
      json["environment_impact_level_tags"] == null
        ? undefined
        : json["environment_impact_level_tags"],
    additives_tags:
      json["additives_tags"] == null ? undefined : json["additives_tags"],
    allergens: json["allergens"] == null ? undefined : json["allergens"],
    allergens_lc:
      json["allergens_lc"] == null ? undefined : json["allergens_lc"],
    allergens_hierarchy:
      json["allergens_hierarchy"] == null
        ? undefined
        : json["allergens_hierarchy"],
    allergens_tags:
      json["allergens_tags"] == null ? undefined : json["allergens_tags"],
    ingredients:
      json["ingredients"] == null
        ? undefined
        : (json["ingredients"] as Array<any>).map(IngredientFromJSON),
    ingredients_analysis:
      json["ingredients_analysis"] == null
        ? undefined
        : ProductIngredientsIngredientsAnalysisFromJSON(
            json["ingredients_analysis"],
          ),
    ingredients_analysis_tags:
      json["ingredients_analysis_tags"] == null
        ? undefined
        : json["ingredients_analysis_tags"],
    ingredients_from_or_that_may_be_from_palm_oil_n:
      json["ingredients_from_or_that_may_be_from_palm_oil_n"] == null
        ? undefined
        : json["ingredients_from_or_that_may_be_from_palm_oil_n"],
    ingredients_from_palm_oil_n:
      json["ingredients_from_palm_oil_n"] == null
        ? undefined
        : json["ingredients_from_palm_oil_n"],
    ingredients_from_palm_oil_tags:
      json["ingredients_from_palm_oil_tags"] == null
        ? undefined
        : json["ingredients_from_palm_oil_tags"],
    ingredients_hierarchy:
      json["ingredients_hierarchy"] == null
        ? undefined
        : json["ingredients_hierarchy"],
    ingredients_n:
      json["ingredients_n"] == null ? undefined : json["ingredients_n"],
    ingredients_n_tags:
      json["ingredients_n_tags"] == null
        ? undefined
        : json["ingredients_n_tags"],
    ingredients_original_tags:
      json["ingredients_original_tags"] == null
        ? undefined
        : json["ingredients_original_tags"],
    ingredients_percent_analysis:
      json["ingredients_percent_analysis"] == null
        ? undefined
        : json["ingredients_percent_analysis"],
    ingredients_sweeteners_n:
      json["ingredients_sweeteners_n"] == null
        ? undefined
        : json["ingredients_sweeteners_n"],
    ingredients_non_nutritive_sweeteners_n:
      json["ingredients_non_nutritive_sweeteners_n"] == null
        ? undefined
        : json["ingredients_non_nutritive_sweeteners_n"],
    ingredients_tags:
      json["ingredients_tags"] == null ? undefined : json["ingredients_tags"],
    ingredients_lc:
      json["ingredients_lc"] == null ? undefined : json["ingredients_lc"],
    ingredients_text_it:
      json["ingredients_text_it"] == null
        ? undefined
        : json["ingredients_text_it"],
    ingredients_text_en:
      json["ingredients_text_en"] == null
        ? undefined
        : json["ingredients_text_en"],
    ingredients_text:
      json["ingredients_text"] == null ? undefined : json["ingredients_text"],
    ingredients_text_with_allergens:
      json["ingredients_text_with_allergens"] == null
        ? undefined
        : json["ingredients_text_with_allergens"],
    ingredients_text_with_allergens_it:
      json["ingredients_text_with_allergens_it"] == null
        ? undefined
        : json["ingredients_text_with_allergens_it"],
    ingredients_that_may_be_from_palm_oil_n:
      json["ingredients_that_may_be_from_palm_oil_n"] == null
        ? undefined
        : json["ingredients_that_may_be_from_palm_oil_n"],
    ingredients_that_may_be_from_palm_oil_tags:
      json["ingredients_that_may_be_from_palm_oil_tags"] == null
        ? undefined
        : json["ingredients_that_may_be_from_palm_oil_tags"],
    ingredients_with_specified_percent_n:
      json["ingredients_with_specified_percent_n"] == null
        ? undefined
        : json["ingredients_with_specified_percent_n"],
    ingredients_with_specified_percent_sum:
      json["ingredients_with_specified_percent_sum"] == null
        ? undefined
        : json["ingredients_with_specified_percent_sum"],
    ingredients_with_unspecified_percent_n:
      json["ingredients_with_unspecified_percent_n"] == null
        ? undefined
        : json["ingredients_with_unspecified_percent_n"],
    ingredients_with_unspecified_percent_sum:
      json["ingredients_with_unspecified_percent_sum"] == null
        ? undefined
        : json["ingredients_with_unspecified_percent_sum"],
    known_ingredients_n:
      json["known_ingredients_n"] == null
        ? undefined
        : json["known_ingredients_n"],
    origins: json["origins"] == null ? undefined : json["origins"],
    origins_hierarchy:
      json["origins_hierarchy"] == null ? undefined : json["origins_hierarchy"],
    origins_lc: json["origins_lc"] == null ? undefined : json["origins_lc"],
    origins_tags:
      json["origins_tags"] == null ? undefined : json["origins_tags"],
    traces: json["traces"] == null ? undefined : json["traces"],
    traces_hierarchy:
      json["traces_hierarchy"] == null
        ? undefined
        : (json["traces_hierarchy"] as Array<any>).map(
            NumberStringObjectTypeFromJSON,
          ),
    traces_lc: json["traces_lc"] == null ? undefined : json["traces_lc"],
    traces_tags:
      json["traces_tags"] == null
        ? undefined
        : (json["traces_tags"] as Array<any>).map(
            NumberStringObjectTypeFromJSON,
          ),
    unknown_ingredients_n:
      json["unknown_ingredients_n"] == null
        ? undefined
        : json["unknown_ingredients_n"],
    no_nutrition_data:
      json["no_nutrition_data"] == null ? undefined : json["no_nutrition_data"],
    nutrition_data_per:
      json["nutrition_data_per"] == null
        ? undefined
        : json["nutrition_data_per"],
    nutrition_data_prepared_per:
      json["nutrition_data_prepared_per"] == null
        ? undefined
        : json["nutrition_data_prepared_per"],
    nutriments:
      json["nutriments"] == null
        ? undefined
        : ProductNutritionNutrimentsFromJSON(json["nutriments"]),
    nutriscore_data:
      json["nutriscore_data"] == null
        ? undefined
        : Nutriscore2021DataFromJSON(json["nutriscore_data"]),
    nutrition_grade_fr:
      json["nutrition_grade_fr"] == null
        ? undefined
        : json["nutrition_grade_fr"],
    nutrition_grades:
      json["nutrition_grades"] == null ? undefined : json["nutrition_grades"],
    nutrition_grades_tags:
      json["nutrition_grades_tags"] == null
        ? undefined
        : json["nutrition_grades_tags"],
    nutrition_score_beverage:
      json["nutrition_score_beverage"] == null
        ? undefined
        : json["nutrition_score_beverage"],
    nutrition_score_warning_fruits_vegetables_legumes_estimate_from_ingredients:
      json[
        "nutrition_score_warning_fruits_vegetables_legumes_estimate_from_ingredients"
      ] == null
        ? undefined
        : json[
            "nutrition_score_warning_fruits_vegetables_legumes_estimate_from_ingredients"
          ],
    nutrition_score_warning_fruits_vegetables_legumes_estimate_from_ingredients_value:
      json[
        "nutrition_score_warning_fruits_vegetables_legumes_estimate_from_ingredients_value"
      ] == null
        ? undefined
        : json[
            "nutrition_score_warning_fruits_vegetables_legumes_estimate_from_ingredients_value"
          ],
    nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients:
      json[
        "nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients"
      ] == null
        ? undefined
        : json[
            "nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients"
          ],
    nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients_value:
      json[
        "nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients_value"
      ] == null
        ? undefined
        : json[
            "nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients_value"
          ],
    nutrition_score_warning_no_fiber:
      json["nutrition_score_warning_no_fiber"] == null
        ? undefined
        : json["nutrition_score_warning_no_fiber"],
    other_nutritional_substances_tags:
      json["other_nutritional_substances_tags"] == null
        ? undefined
        : json["other_nutritional_substances_tags"],
    unknown_nutrients_tags:
      json["unknown_nutrients_tags"] == null
        ? undefined
        : json["unknown_nutrients_tags"],
    vitamins_tags:
      json["vitamins_tags"] == null ? undefined : json["vitamins_tags"],
    nutriscore:
      json["nutriscore"] == null
        ? undefined
        : NutriscoresFromJSON(json["nutriscore"]),
    nutriscore_2021_tags:
      json["nutriscore_2021_tags"] == null
        ? undefined
        : json["nutriscore_2021_tags"],
    nutriscore_2023_tags:
      json["nutriscore_2023_tags"] == null
        ? undefined
        : json["nutriscore_2023_tags"],
    nutriscore_grade:
      json["nutriscore_grade"] == null ? undefined : json["nutriscore_grade"],
    nutriscore_score:
      json["nutriscore_score"] == null ? undefined : json["nutriscore_score"],
    nutriscore_score_opposite:
      json["nutriscore_score_opposite"] == null
        ? undefined
        : json["nutriscore_score_opposite"],
    nutriscore_tags:
      json["nutriscore_tags"] == null ? undefined : json["nutriscore_tags"],
    nutriscore_version:
      json["nutriscore_version"] == null
        ? undefined
        : json["nutriscore_version"],
    data_quality_bugs_tags:
      json["data_quality_bugs_tags"] == null
        ? undefined
        : json["data_quality_bugs_tags"],
    data_quality_errors_tags:
      json["data_quality_errors_tags"] == null
        ? undefined
        : json["data_quality_errors_tags"],
    data_quality_info_tags:
      json["data_quality_info_tags"] == null
        ? undefined
        : json["data_quality_info_tags"],
    data_quality_tags:
      json["data_quality_tags"] == null ? undefined : json["data_quality_tags"],
    data_quality_warning_tags:
      json["data_quality_warning_tags"] == null
        ? undefined
        : json["data_quality_warning_tags"],
    data_quality_warnings_tags:
      json["data_quality_warnings_tags"] == null
        ? undefined
        : json["data_quality_warnings_tags"],
    data_sources:
      json["data_sources"] == null ? undefined : json["data_sources"],
    data_sources_tags:
      json["data_sources_tags"] == null ? undefined : json["data_sources_tags"],
    debug_param_sorted_langs:
      json["debug_param_sorted_langs"] == null
        ? undefined
        : json["debug_param_sorted_langs"],
    last_check_dates_tags:
      json["last_check_dates_tags"] == null
        ? undefined
        : json["last_check_dates_tags"],
    last_checked_t:
      json["last_checked_t"] == null ? undefined : json["last_checked_t"],
    last_checker:
      json["last_checker"] == null ? undefined : json["last_checker"],
    states: json["states"] == null ? undefined : json["states"],
    states_hierarchy:
      json["states_hierarchy"] == null ? undefined : json["states_hierarchy"],
    states_tags: json["states_tags"] == null ? undefined : json["states_tags"],
    misc_tags: json["misc_tags"] == null ? undefined : json["misc_tags"],
    additives_original_tags:
      json["additives_original_tags"] == null
        ? undefined
        : json["additives_original_tags"],
    additives_prev_original_tags:
      json["additives_prev_original_tags"] == null
        ? undefined
        : json["additives_prev_original_tags"],
    added_countries_tags:
      json["added_countries_tags"] == null
        ? undefined
        : json["added_countries_tags"],
    allergens_from_ingredients:
      json["allergens_from_ingredients"] == null
        ? undefined
        : json["allergens_from_ingredients"],
    allergens_from_user:
      json["allergens_from_user"] == null
        ? undefined
        : json["allergens_from_user"],
    amino_acids_prev_tags:
      json["amino_acids_prev_tags"] == null
        ? undefined
        : json["amino_acids_prev_tags"],
    amino_acids_tags:
      json["amino_acids_tags"] == null ? undefined : json["amino_acids_tags"],
    carbon_footprint_percent_of_known_ingredients:
      json["carbon_footprint_percent_of_known_ingredients"] == null
        ? undefined
        : json["carbon_footprint_percent_of_known_ingredients"],
    categories_properties:
      json["categories_properties"] == null
        ? undefined
        : ProductExtendedCategoriesPropertiesFromJSON(
            json["categories_properties"],
          ),
    categories_properties_tags:
      json["categories_properties_tags"] == null
        ? undefined
        : json["categories_properties_tags"],
    category_properties:
      json["category_properties"] == null
        ? undefined
        : json["category_properties"],
    ciqual_food_name_tags:
      json["ciqual_food_name_tags"] == null
        ? undefined
        : json["ciqual_food_name_tags"],
    compared_to_category:
      json["compared_to_category"] == null
        ? undefined
        : json["compared_to_category"],
    conservation_conditions:
      json["conservation_conditions"] == null
        ? undefined
        : json["conservation_conditions"],
    customer_service:
      json["customer_service"] == null ? undefined : json["customer_service"],
    expiration_date:
      json["expiration_date"] == null ? undefined : json["expiration_date"],
    link: json["link"] == null ? undefined : json["link"],
    main_countries_tags:
      json["main_countries_tags"] == null
        ? undefined
        : json["main_countries_tags"],
    minerals_prev_tags:
      json["minerals_prev_tags"] == null
        ? undefined
        : json["minerals_prev_tags"],
    minerals_tags:
      json["minerals_tags"] == null ? undefined : json["minerals_tags"],
    owner_fields:
      json["owner_fields"] == null
        ? undefined
        : ProductExtendedOwnerFieldsFromJSON(json["owner_fields"]),
    nova_groups_markers:
      json["nova_groups_markers"] == null
        ? undefined
        : json["nova_groups_markers"],
    nucleotides_tags:
      json["nucleotides_tags"] == null ? undefined : json["nucleotides_tags"],
    origin: json["origin"] == null ? undefined : json["origin"],
    purchase_places:
      json["purchase_places"] == null ? undefined : json["purchase_places"],
    purchase_places_tags:
      json["purchase_places_tags"] == null
        ? undefined
        : json["purchase_places_tags"],
    stores: json["stores"] == null ? undefined : json["stores"],
    stores_tags: json["stores_tags"] == null ? undefined : json["stores_tags"],
    traces_from_ingredients:
      json["traces_from_ingredients"] == null
        ? undefined
        : json["traces_from_ingredients"],
    traces_from_user:
      json["traces_from_user"] == null ? undefined : json["traces_from_user"],
    created_t: json["created_t"] == null ? undefined : json["created_t"],
    creator: json["creator"] == null ? undefined : json["creator"],
    editors_tags:
      json["editors_tags"] == null ? undefined : json["editors_tags"],
    informers_tags:
      json["informers_tags"] == null ? undefined : json["informers_tags"],
    interface_version_created:
      json["interface_version_created"] == null
        ? undefined
        : json["interface_version_created"],
    interface_version_modified:
      json["interface_version_modified"] == null
        ? undefined
        : json["interface_version_modified"],
    languages: json["languages"] == null ? undefined : json["languages"],
    languages_codes:
      json["languages_codes"] == null ? undefined : json["languages_codes"],
    languages_hierarchy:
      json["languages_hierarchy"] == null
        ? undefined
        : json["languages_hierarchy"],
    languages_tags:
      json["languages_tags"] == null ? undefined : json["languages_tags"],
    last_edit_dates_tags:
      json["last_edit_dates_tags"] == null
        ? undefined
        : json["last_edit_dates_tags"],
    last_editor: json["last_editor"] == null ? undefined : json["last_editor"],
    last_modified_by:
      json["last_modified_by"] == null ? undefined : json["last_modified_by"],
    last_modified_t:
      json["last_modified_t"] == null ? undefined : json["last_modified_t"],
    last_updated_t:
      json["last_updated_t"] == null ? undefined : json["last_updated_t"],
    owner: json["owner"] == null ? undefined : json["owner"],
    owners_tags: json["owners_tags"] == null ? undefined : json["owners_tags"],
    photographers_tags:
      json["photographers_tags"] == null
        ? undefined
        : json["photographers_tags"],
    rev: json["rev"] == null ? undefined : json["rev"],
    sources:
      json["sources"] == null
        ? undefined
        : (json["sources"] as Array<any>).map(ProductMetaSourceFromJSON),
    sources_fields:
      json["sources_fields"] == null
        ? undefined
        : ProductMetaSourceFieldsFromJSON(json["sources_fields"]),
    teams: json["teams"] == null ? undefined : json["teams"],
    teams_tags: json["teams_tags"] == null ? undefined : json["teams_tags"],
    update_key: json["update_key"] == null ? undefined : json["update_key"],
    knowledge_panels:
      json["knowledge_panels"] == null
        ? undefined
        : PanelsFromJSON(json["knowledge_panels"]),
    attribute_groups:
      json["attribute_groups"] == null
        ? undefined
        : (json["attribute_groups"] as Array<any>).map(
            ProductAttributeGroupFromJSON,
          ),
  };
}

export function ProductToJSON(json: any): Product {
  return ProductToJSONTyped(json, false);
}

export function ProductToJSONTyped(
  value?: Product | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    abbreviated_product_name: value["abbreviated_product_name"],
    code: value["code"],
    codes_tags: value["codes_tags"],
    generic_name_it: value["generic_name_it"],
    generic_name: value["generic_name"],
    _id: value["_id"],
    _keywords: value["_keywords"],
    id: value["id"],
    lc: value["lc"],
    lang: value["lang"],
    nova_group: value["nova_group"],
    nova_groups: value["nova_groups"],
    obsolete: value["obsolete"],
    obsolete_since_date: value["obsolete_since_date"],
    product_name: value["product_name"],
    product_name_it: value["product_name_it"],
    product_name_en: value["product_name_en"],
    product_quantity: value["product_quantity"],
    product_quantity_unit: value["product_quantity_unit"],
    quantity: value["quantity"],
    additives_n: value["additives_n"],
    checked: value["checked"],
    complete: value["complete"],
    completeness: value["completeness"],
    ecoscore_grade: value["ecoscore_grade"],
    ecoscore_score: value["ecoscore_score"],
    food_groups: value["food_groups"],
    food_groups_tags: value["food_groups_tags"],
    nutrient_levels: ProductMiscNutrientLevelsToJSON(value["nutrient_levels"]),
    packaging_text: value["packaging_text"],
    packagings:
      value["packagings"] == null
        ? undefined
        : (value["packagings"] as Array<any>).map(PackagingComponentREADToJSON),
    packagings_complete: value["packagings_complete"],
    pnns_groups_1: value["pnns_groups_1"],
    pnns_groups_1_tags: value["pnns_groups_1_tags"],
    pnns_groups_2: value["pnns_groups_2"],
    pnns_groups_2_tags: value["pnns_groups_2_tags"],
    popularity_key: value["popularity_key"],
    popularity_tags: value["popularity_tags"],
    scans_n: value["scans_n"],
    unique_scans_n: value["unique_scans_n"],
    sortkey: value["sortkey"],
    serving_quantity: value["serving_quantity"],
    serving_quantity_unit: value["serving_quantity_unit"],
    serving_size: value["serving_size"],
    brands: value["brands"],
    brands_tags: value["brands_tags"],
    categories: value["categories"],
    categories_hierarchy: value["categories_hierarchy"],
    categories_lc: value["categories_lc"],
    categories_old: value["categories_old"],
    categories_tags: value["categories_tags"],
    checkers_tags: value["checkers_tags"],
    cities: value["cities"],
    cities_tags: value["cities_tags"],
    correctors_tags: value["correctors_tags"],
    countries: value["countries"],
    countries_beforescanbot: value["countries_beforescanbot"],
    countries_hierarchy: value["countries_hierarchy"],
    countries_lc: value["countries_lc"],
    countries_tags: value["countries_tags"],
    ecoscore_tags: value["ecoscore_tags"],
    emb_codes: value["emb_codes"],
    emb_codes_orig: value["emb_codes_orig"],
    emb_codes_tags: value["emb_codes_tags"],
    labels: value["labels"],
    labels_hierarchy: value["labels_hierarchy"],
    labels_lc: value["labels_lc"],
    labels_tags: value["labels_tags"],
    entry_dates_tags: value["entry_dates_tags"],
    manufacturing_places: value["manufacturing_places"],
    manufacturing_places_tags: value["manufacturing_places_tags"],
    nova_groups_tags: value["nova_groups_tags"],
    nutrient_levels_tags: value["nutrient_levels_tags"],
    image_front_small_url: value["image_front_small_url"],
    image_front_thumb_url: value["image_front_thumb_url"],
    image_front_url: value["image_front_url"],
    image_ingredients_small_url: value["image_ingredients_small_url"],
    image_ingredients_thumb_url: value["image_ingredients_thumb_url"],
    image_ingredients_url: value["image_ingredients_url"],
    image_packaging_small_url: value["image_packaging_small_url"],
    image_packaging_thumb_url: value["image_packaging_thumb_url"],
    image_packaging_url: value["image_packaging_url"],
    image_nutrition_small_url: value["image_nutrition_small_url"],
    image_nutrition_thumb_url: value["image_nutrition_thumb_url"],
    image_nutrition_url: value["image_nutrition_url"],
    image_small_url: value["image_small_url"],
    image_thumb_url: value["image_thumb_url"],
    image_url: value["image_url"],
    images: ProductImagesPropertiesToJSON(value["images"]),
    last_image_dates_tags: value["last_image_dates_tags"],
    last_image_t: value["last_image_t"],
    selected_images: ProductSelectedImagesToJSON(value["selected_images"]),
    ecoscore_data: ProductEcoscoreDataToJSON(value["ecoscore_data"]),
    ecoscore_extended_data_version: value["ecoscore_extended_data_version"],
    environment_impact_level: value["environment_impact_level"],
    environment_impact_level_tags: value["environment_impact_level_tags"],
    additives_tags: value["additives_tags"],
    allergens: value["allergens"],
    allergens_lc: value["allergens_lc"],
    allergens_hierarchy: value["allergens_hierarchy"],
    allergens_tags: value["allergens_tags"],
    ingredients:
      value["ingredients"] == null
        ? undefined
        : (value["ingredients"] as Array<any>).map(IngredientToJSON),
    ingredients_analysis: ProductIngredientsIngredientsAnalysisToJSON(
      value["ingredients_analysis"],
    ),
    ingredients_analysis_tags: value["ingredients_analysis_tags"],
    ingredients_from_or_that_may_be_from_palm_oil_n:
      value["ingredients_from_or_that_may_be_from_palm_oil_n"],
    ingredients_from_palm_oil_n: value["ingredients_from_palm_oil_n"],
    ingredients_from_palm_oil_tags: value["ingredients_from_palm_oil_tags"],
    ingredients_hierarchy: value["ingredients_hierarchy"],
    ingredients_n: value["ingredients_n"],
    ingredients_n_tags: value["ingredients_n_tags"],
    ingredients_original_tags: value["ingredients_original_tags"],
    ingredients_percent_analysis: value["ingredients_percent_analysis"],
    ingredients_sweeteners_n: value["ingredients_sweeteners_n"],
    ingredients_non_nutritive_sweeteners_n:
      value["ingredients_non_nutritive_sweeteners_n"],
    ingredients_tags: value["ingredients_tags"],
    ingredients_lc: value["ingredients_lc"],
    ingredients_text_it: value["ingredients_text_it"],
    ingredients_text_en: value["ingredients_text_en"],
    ingredients_text: value["ingredients_text"],
    ingredients_text_with_allergens: value["ingredients_text_with_allergens"],
    ingredients_text_with_allergens_it:
      value["ingredients_text_with_allergens_it"],
    ingredients_that_may_be_from_palm_oil_n:
      value["ingredients_that_may_be_from_palm_oil_n"],
    ingredients_that_may_be_from_palm_oil_tags:
      value["ingredients_that_may_be_from_palm_oil_tags"],
    ingredients_with_specified_percent_n:
      value["ingredients_with_specified_percent_n"],
    ingredients_with_specified_percent_sum:
      value["ingredients_with_specified_percent_sum"],
    ingredients_with_unspecified_percent_n:
      value["ingredients_with_unspecified_percent_n"],
    ingredients_with_unspecified_percent_sum:
      value["ingredients_with_unspecified_percent_sum"],
    known_ingredients_n: value["known_ingredients_n"],
    origins: value["origins"],
    origins_hierarchy: value["origins_hierarchy"],
    origins_lc: value["origins_lc"],
    origins_tags: value["origins_tags"],
    traces: value["traces"],
    traces_hierarchy:
      value["traces_hierarchy"] == null
        ? undefined
        : (value["traces_hierarchy"] as Array<any>).map(
            NumberStringObjectTypeToJSON,
          ),
    traces_lc: value["traces_lc"],
    traces_tags:
      value["traces_tags"] == null
        ? undefined
        : (value["traces_tags"] as Array<any>).map(
            NumberStringObjectTypeToJSON,
          ),
    unknown_ingredients_n: value["unknown_ingredients_n"],
    no_nutrition_data: value["no_nutrition_data"],
    nutrition_data_per: value["nutrition_data_per"],
    nutrition_data_prepared_per: value["nutrition_data_prepared_per"],
    nutriments: ProductNutritionNutrimentsToJSON(value["nutriments"]),
    nutriscore_data: Nutriscore2021DataToJSON(value["nutriscore_data"]),
    nutrition_grade_fr: value["nutrition_grade_fr"],
    nutrition_grades: value["nutrition_grades"],
    nutrition_grades_tags: value["nutrition_grades_tags"],
    nutrition_score_beverage: value["nutrition_score_beverage"],
    nutrition_score_warning_fruits_vegetables_legumes_estimate_from_ingredients:
      value[
        "nutrition_score_warning_fruits_vegetables_legumes_estimate_from_ingredients"
      ],
    nutrition_score_warning_fruits_vegetables_legumes_estimate_from_ingredients_value:
      value[
        "nutrition_score_warning_fruits_vegetables_legumes_estimate_from_ingredients_value"
      ],
    nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients:
      value[
        "nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients"
      ],
    nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients_value:
      value[
        "nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients_value"
      ],
    nutrition_score_warning_no_fiber: value["nutrition_score_warning_no_fiber"],
    other_nutritional_substances_tags:
      value["other_nutritional_substances_tags"],
    unknown_nutrients_tags: value["unknown_nutrients_tags"],
    vitamins_tags: value["vitamins_tags"],
    nutriscore: NutriscoresToJSON(value["nutriscore"]),
    nutriscore_2021_tags: value["nutriscore_2021_tags"],
    nutriscore_2023_tags: value["nutriscore_2023_tags"],
    nutriscore_grade: value["nutriscore_grade"],
    nutriscore_score: value["nutriscore_score"],
    nutriscore_score_opposite: value["nutriscore_score_opposite"],
    nutriscore_tags: value["nutriscore_tags"],
    nutriscore_version: value["nutriscore_version"],
    data_quality_bugs_tags: value["data_quality_bugs_tags"],
    data_quality_errors_tags: value["data_quality_errors_tags"],
    data_quality_info_tags: value["data_quality_info_tags"],
    data_quality_tags: value["data_quality_tags"],
    data_quality_warning_tags: value["data_quality_warning_tags"],
    data_quality_warnings_tags: value["data_quality_warnings_tags"],
    data_sources: value["data_sources"],
    data_sources_tags: value["data_sources_tags"],
    debug_param_sorted_langs: value["debug_param_sorted_langs"],
    last_check_dates_tags: value["last_check_dates_tags"],
    last_checked_t: value["last_checked_t"],
    last_checker: value["last_checker"],
    states: value["states"],
    states_hierarchy: value["states_hierarchy"],
    states_tags: value["states_tags"],
    misc_tags: value["misc_tags"],
    additives_original_tags: value["additives_original_tags"],
    additives_prev_original_tags: value["additives_prev_original_tags"],
    added_countries_tags: value["added_countries_tags"],
    allergens_from_ingredients: value["allergens_from_ingredients"],
    allergens_from_user: value["allergens_from_user"],
    amino_acids_prev_tags: value["amino_acids_prev_tags"],
    amino_acids_tags: value["amino_acids_tags"],
    carbon_footprint_percent_of_known_ingredients:
      value["carbon_footprint_percent_of_known_ingredients"],
    categories_properties: ProductExtendedCategoriesPropertiesToJSON(
      value["categories_properties"],
    ),
    categories_properties_tags: value["categories_properties_tags"],
    category_properties: value["category_properties"],
    ciqual_food_name_tags: value["ciqual_food_name_tags"],
    compared_to_category: value["compared_to_category"],
    conservation_conditions: value["conservation_conditions"],
    customer_service: value["customer_service"],
    expiration_date: value["expiration_date"],
    link: value["link"],
    main_countries_tags: value["main_countries_tags"],
    minerals_prev_tags: value["minerals_prev_tags"],
    minerals_tags: value["minerals_tags"],
    owner_fields: ProductExtendedOwnerFieldsToJSON(value["owner_fields"]),
    nova_groups_markers: value["nova_groups_markers"],
    nucleotides_tags: value["nucleotides_tags"],
    origin: value["origin"],
    purchase_places: value["purchase_places"],
    purchase_places_tags: value["purchase_places_tags"],
    stores: value["stores"],
    stores_tags: value["stores_tags"],
    traces_from_ingredients: value["traces_from_ingredients"],
    traces_from_user: value["traces_from_user"],
    created_t: value["created_t"],
    creator: value["creator"],
    editors_tags: value["editors_tags"],
    informers_tags: value["informers_tags"],
    interface_version_created: value["interface_version_created"],
    interface_version_modified: value["interface_version_modified"],
    languages: value["languages"],
    languages_codes: value["languages_codes"],
    languages_hierarchy: value["languages_hierarchy"],
    languages_tags: value["languages_tags"],
    last_edit_dates_tags: value["last_edit_dates_tags"],
    last_editor: value["last_editor"],
    last_modified_by: value["last_modified_by"],
    last_modified_t: value["last_modified_t"],
    last_updated_t: value["last_updated_t"],
    owner: value["owner"],
    owners_tags: value["owners_tags"],
    photographers_tags: value["photographers_tags"],
    rev: value["rev"],
    sources:
      value["sources"] == null
        ? undefined
        : (value["sources"] as Array<any>).map(ProductMetaSourceToJSON),
    sources_fields: ProductMetaSourceFieldsToJSON(value["sources_fields"]),
    teams: value["teams"],
    teams_tags: value["teams_tags"],
    update_key: value["update_key"],
    knowledge_panels: PanelsToJSON(value["knowledge_panels"]),
    attribute_groups:
      value["attribute_groups"] == null
        ? undefined
        : (value["attribute_groups"] as Array<any>).map(
            ProductAttributeGroupToJSON,
          ),
  };
}
