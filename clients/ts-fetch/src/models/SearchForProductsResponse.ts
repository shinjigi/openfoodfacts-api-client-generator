/* tslint:disable */
/* eslint-disable */
/**
 * Open Food Facts Open API
 * As a developer, the Open Food Facts API allows you to get information and contribute to the products database. You can create great apps to help people make better food choices and also provide data to enhance the database.
 *
 * The version of the OpenAPI document: 2
 * Contact: reuse@openfoodfacts.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { Product } from "./Product";
import {
  ProductFromJSON,
  ProductFromJSONTyped,
  ProductToJSON,
  ProductToJSONTyped,
} from "./Product";

/**
 *
 * @export
 * @interface SearchForProductsResponse
 */
export interface SearchForProductsResponse {
  /**
   * Total number of products found
   *
   * @type {number}
   * @memberof SearchForProductsResponse
   */
  count?: number;
  /**
   * Page number of returned results.
   *
   * You can get a different page, by using the `page` query parameter.
   *
   * @type {number}
   * @memberof SearchForProductsResponse
   */
  page?: number;
  /**
   * Number of products in this page.
   *
   * This will differ from page_size only on the last page.
   *
   * @type {number}
   * @memberof SearchForProductsResponse
   */
  page_count?: number;
  /**
   * Requested number of products per pages
   *
   * To get the number of pages, divide count by page_size
   * (eg. `Math.floor( count / page_size) + 1 `)
   *
   * @type {number}
   * @memberof SearchForProductsResponse
   */
  page_size?: number;
  /**
   * The products matching the query corresponding to current page
   *
   * @type {Array<Product>}
   * @memberof SearchForProductsResponse
   */
  products?: Array<Product>;
  /**
   *
   * @type {number}
   * @memberof SearchForProductsResponse
   */
  skip?: number;
}

/**
 * Check if a given object implements the SearchForProductsResponse interface.
 */
export function instanceOfSearchForProductsResponse(
  value: object,
): value is SearchForProductsResponse {
  return true;
}

export function SearchForProductsResponseFromJSON(
  json: any,
): SearchForProductsResponse {
  return SearchForProductsResponseFromJSONTyped(json, false);
}

export function SearchForProductsResponseFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): SearchForProductsResponse {
  if (json == null) {
    return json;
  }
  return {
    count: json["count"] == null ? undefined : json["count"],
    page: json["page"] == null ? undefined : json["page"],
    page_count: json["page_count"] == null ? undefined : json["page_count"],
    page_size: json["page_size"] == null ? undefined : json["page_size"],
    products:
      json["products"] == null
        ? undefined
        : (json["products"] as Array<any>).map(ProductFromJSON),
    skip: json["skip"] == null ? undefined : json["skip"],
  };
}

export function SearchForProductsResponseToJSON(
  json: any,
): SearchForProductsResponse {
  return SearchForProductsResponseToJSONTyped(json, false);
}

export function SearchForProductsResponseToJSONTyped(
  value?: SearchForProductsResponse | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    count: value["count"],
    page: value["page"],
    page_count: value["page_count"],
    page_size: value["page_size"],
    products:
      value["products"] == null
        ? undefined
        : (value["products"] as Array<any>).map(ProductToJSON),
    skip: value["skip"],
  };
}
