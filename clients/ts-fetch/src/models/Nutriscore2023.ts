/* tslint:disable */
/* eslint-disable */
/**
 * Open Food Facts Open API
 * As a developer, the Open Food Facts API allows you to get information and contribute to the products database. You can create great apps to help people make better food choices and also provide data to enhance the database.
 *
 * The version of the OpenAPI document: 2
 * Contact: reuse@openfoodfacts.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { Nutriscore2023Data } from "./Nutriscore2023Data";
import {
  Nutriscore2023DataFromJSON,
  Nutriscore2023DataFromJSONTyped,
  Nutriscore2023DataToJSON,
  Nutriscore2023DataToJSONTyped,
} from "./Nutriscore2023Data";

/**
 *
 * @export
 * @interface Nutriscore2023
 */
export interface Nutriscore2023 {
  /**
   *
   * @type {number}
   * @memberof Nutriscore2023
   */
  category_available?: Nutriscore2023CategoryAvailableEnum;
  /**
   * Nutri-Score for the product as a letter.
   *
   * See https://world.openfoodfacts.org/nutriscore.
   *
   * @type {string}
   * @memberof Nutriscore2023
   */
  grade?: Nutriscore2023GradeEnum;
  /**
   *
   * @type {number}
   * @memberof Nutriscore2023
   */
  nutrients_available?: Nutriscore2023NutrientsAvailableEnum;
  /**
   *
   * @type {number}
   * @memberof Nutriscore2023
   */
  nutriscore_applicable?: Nutriscore2023NutriscoreApplicableEnum;
  /**
   *
   * @type {number}
   * @memberof Nutriscore2023
   */
  nutriscore_computed?: Nutriscore2023NutriscoreComputedEnum;
  /**
   *
   * @type {number}
   * @memberof Nutriscore2023
   */
  score?: number;
  /**
   *
   * @type {Nutriscore2023Data}
   * @memberof Nutriscore2023
   */
  data?: Nutriscore2023Data;
}

/**
 * @export
 */
export const Nutriscore2023CategoryAvailableEnum = {
  NUMBER_0: 0,
  NUMBER_1: 1,
} as const;
export type Nutriscore2023CategoryAvailableEnum =
  (typeof Nutriscore2023CategoryAvailableEnum)[keyof typeof Nutriscore2023CategoryAvailableEnum];

/**
 * @export
 */
export const Nutriscore2023GradeEnum = {
  a: "a",
  b: "b",
  c: "c",
  d: "d",
  e: "e",
} as const;
export type Nutriscore2023GradeEnum =
  (typeof Nutriscore2023GradeEnum)[keyof typeof Nutriscore2023GradeEnum];

/**
 * @export
 */
export const Nutriscore2023NutrientsAvailableEnum = {
  NUMBER_0: 0,
  NUMBER_1: 1,
} as const;
export type Nutriscore2023NutrientsAvailableEnum =
  (typeof Nutriscore2023NutrientsAvailableEnum)[keyof typeof Nutriscore2023NutrientsAvailableEnum];

/**
 * @export
 */
export const Nutriscore2023NutriscoreApplicableEnum = {
  NUMBER_0: 0,
  NUMBER_1: 1,
} as const;
export type Nutriscore2023NutriscoreApplicableEnum =
  (typeof Nutriscore2023NutriscoreApplicableEnum)[keyof typeof Nutriscore2023NutriscoreApplicableEnum];

/**
 * @export
 */
export const Nutriscore2023NutriscoreComputedEnum = {
  NUMBER_0: 0,
  NUMBER_1: 1,
} as const;
export type Nutriscore2023NutriscoreComputedEnum =
  (typeof Nutriscore2023NutriscoreComputedEnum)[keyof typeof Nutriscore2023NutriscoreComputedEnum];

/**
 * Check if a given object implements the Nutriscore2023 interface.
 */
export function instanceOfNutriscore2023(
  value: object,
): value is Nutriscore2023 {
  return true;
}

export function Nutriscore2023FromJSON(json: any): Nutriscore2023 {
  return Nutriscore2023FromJSONTyped(json, false);
}

export function Nutriscore2023FromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): Nutriscore2023 {
  if (json == null) {
    return json;
  }
  return {
    category_available:
      json["category_available"] == null
        ? undefined
        : json["category_available"],
    grade: json["grade"] == null ? undefined : json["grade"],
    nutrients_available:
      json["nutrients_available"] == null
        ? undefined
        : json["nutrients_available"],
    nutriscore_applicable:
      json["nutriscore_applicable"] == null
        ? undefined
        : json["nutriscore_applicable"],
    nutriscore_computed:
      json["nutriscore_computed"] == null
        ? undefined
        : json["nutriscore_computed"],
    score: json["score"] == null ? undefined : json["score"],
    data:
      json["data"] == null
        ? undefined
        : Nutriscore2023DataFromJSON(json["data"]),
  };
}

export function Nutriscore2023ToJSON(json: any): Nutriscore2023 {
  return Nutriscore2023ToJSONTyped(json, false);
}

export function Nutriscore2023ToJSONTyped(
  value?: Nutriscore2023 | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    category_available: value["category_available"],
    grade: value["grade"],
    nutrients_available: value["nutrients_available"],
    nutriscore_applicable: value["nutriscore_applicable"],
    nutriscore_computed: value["nutriscore_computed"],
    score: value["score"],
    data: Nutriscore2023DataToJSON(value["data"]),
  };
}
