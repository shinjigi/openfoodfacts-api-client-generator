/* tslint:disable */
/* eslint-disable */
/**
 * Open Food Facts Open API
 * As a developer, the Open Food Facts API allows you to get information and contribute to the products database. You can create great apps to help people make better food choices and also provide data to enhance the database.
 *
 * The version of the OpenAPI document: 2
 * Contact: reuse@openfoodfacts.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
import type { PanelGroupElement } from "./PanelGroupElement";
import {
  PanelGroupElementFromJSON,
  PanelGroupElementFromJSONTyped,
  PanelGroupElementToJSON,
  PanelGroupElementToJSONTyped,
} from "./PanelGroupElement";
import type { TextElement } from "./TextElement";
import {
  TextElementFromJSON,
  TextElementFromJSONTyped,
  TextElementToJSON,
  TextElementToJSONTyped,
} from "./TextElement";
import type { ImageElement } from "./ImageElement";
import {
  ImageElementFromJSON,
  ImageElementFromJSONTyped,
  ImageElementToJSON,
  ImageElementToJSONTyped,
} from "./ImageElement";
import type { PanelElement } from "./PanelElement";
import {
  PanelElementFromJSON,
  PanelElementFromJSONTyped,
  PanelElementToJSON,
  PanelElementToJSONTyped,
} from "./PanelElement";
import type { TableElement } from "./TableElement";
import {
  TableElementFromJSON,
  TableElementFromJSONTyped,
  TableElementToJSON,
  TableElementToJSONTyped,
} from "./TableElement";

/**
 * Each element object contains one specific element object such as a text element or an image element.
 *
 * @export
 * @interface Element
 */
export interface Element {
  /**
   * The type of the included element object.
   * The type also indicates which field contains the included element object.
   * e.g. if the type is "text", the included element object will be in the "text_element" field.
   *
   * Note that in the future, new type of element may be added,
   * so your code should ignore unrecognized types, and unknown properties.
   *
   * TODO: add Map type
   *
   * @type {string}
   * @memberof Element
   */
  type: ElementTypeEnum;
  /**
   *
   * @type {TextElement}
   * @memberof Element
   */
  text_element?: TextElement;
  /**
   *
   * @type {ImageElement}
   * @memberof Element
   */
  image_element?: ImageElement;
  /**
   *
   * @type {string}
   * @memberof Element
   */
  action_element?: string;
  /**
   *
   * @type {PanelElement}
   * @memberof Element
   */
  panel_element?: PanelElement;
  /**
   *
   * @type {PanelGroupElement}
   * @memberof Element
   */
  panel_group_element?: PanelGroupElement;
  /**
   *
   * @type {TableElement}
   * @memberof Element
   */
  table_element?: TableElement;
}

/**
 * @export
 */
export const ElementTypeEnum = {
  text: "text",
  image: "image",
  action: "action",
  panel: "panel",
  panel_group: "panel_group",
  table: "table",
} as const;
export type ElementTypeEnum =
  (typeof ElementTypeEnum)[keyof typeof ElementTypeEnum];

/**
 * Check if a given object implements the Element interface.
 */
export function instanceOfElement(value: object): value is Element {
  if (!("type" in value) || value["type"] === undefined) return false;
  return true;
}

export function ElementFromJSON(json: any): Element {
  return ElementFromJSONTyped(json, false);
}

export function ElementFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): Element {
  if (json == null) {
    return json;
  }
  return {
    type: json["type"],
    text_element:
      json["text_element"] == null
        ? undefined
        : TextElementFromJSON(json["text_element"]),
    image_element:
      json["image_element"] == null
        ? undefined
        : ImageElementFromJSON(json["image_element"]),
    action_element:
      json["action_element"] == null ? undefined : json["action_element"],
    panel_element:
      json["panel_element"] == null
        ? undefined
        : PanelElementFromJSON(json["panel_element"]),
    panel_group_element:
      json["panel_group_element"] == null
        ? undefined
        : PanelGroupElementFromJSON(json["panel_group_element"]),
    table_element:
      json["table_element"] == null
        ? undefined
        : TableElementFromJSON(json["table_element"]),
  };
}

export function ElementToJSON(json: any): Element {
  return ElementToJSONTyped(json, false);
}

export function ElementToJSONTyped(
  value?: Element | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    type: value["type"],
    text_element: TextElementToJSON(value["text_element"]),
    image_element: ImageElementToJSON(value["image_element"]),
    action_element: value["action_element"],
    panel_element: PanelElementToJSON(value["panel_element"]),
    panel_group_element: PanelGroupElementToJSON(value["panel_group_element"]),
    table_element: TableElementToJSON(value["table_element"]),
  };
}
