/* tslint:disable */
/* eslint-disable */
/**
 * Open Food Facts Open API
 * As a developer, the Open Food Facts API allows you to get information and contribute to the products database. You can create great apps to help people make better food choices and also provide data to enhance the database.
 *
 * The version of the OpenAPI document: 2
 * Contact: reuse@openfoodfacts.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 * Data about a product which is represented as tags
 *
 * @export
 * @interface ProductTags
 */
export interface ProductTags {
  /**
   * List of brands (not taxonomized)
   * @type {string}
   * @memberof ProductTags
   */
  brands?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ProductTags
   */
  brands_tags?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ProductTags
   */
  categories?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ProductTags
   */
  categories_hierarchy?: Array<string>;
  /**
   * Categories language code
   * @type {string}
   * @memberof ProductTags
   */
  categories_lc?: string;
  /**
   *
   * @type {string}
   * @memberof ProductTags
   */
  categories_old?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ProductTags
   */
  categories_tags?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof ProductTags
   */
  checkers_tags?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ProductTags
   */
  cities?: string;
  /**
   *
   * @type {Array<object>}
   * @memberof ProductTags
   */
  cities_tags?: Array<object>;
  /**
   *
   * @type {Array<string>}
   * @memberof ProductTags
   */
  correctors_tags?: Array<string>;
  /**
   * List of countries where the product is sold.
   *
   * @type {string}
   * @memberof ProductTags
   */
  countries?: string;
  /**
   *
   * @type {string}
   * @memberof ProductTags
   */
  countries_beforescanbot?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ProductTags
   */
  countries_hierarchy?: Array<string>;
  /**
   * Countries language code
   * @type {string}
   * @memberof ProductTags
   */
  countries_lc?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ProductTags
   */
  countries_tags?: Array<string>;
  /**
   * All ecoscore of a product.
   * Most of the time it's only one value,
   * but it might eventually be more for products composed of sub-products.
   * See also: `ecoscore_score`, `ecoscore_grade`.
   *
   * @type {Array<string>}
   * @memberof ProductTags
   */
  ecoscore_tags?: Array<string>;
  /**
   * Packager code. EMB is the French system of traceability codes for packager.
   *
   * @type {string}
   * @memberof ProductTags
   */
  emb_codes?: string;
  /**
   *
   * @type {string}
   * @memberof ProductTags
   */
  emb_codes_orig?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ProductTags
   */
  emb_codes_tags?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ProductTags
   */
  labels?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ProductTags
   */
  labels_hierarchy?: Array<string>;
  /**
   *
   * @type {string}
   * @memberof ProductTags
   */
  labels_lc?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ProductTags
   */
  labels_tags?: Array<string>;
  /**
   * The data as a series of tag: `yyyy-mm-dd`, `yyyy-mm`, `yyyy`
   *
   * @type {Array<string>}
   * @memberof ProductTags
   */
  entry_dates_tags?: Array<string>;
  /**
   * Places where the product was manufactured or transformed.
   *
   * @type {string}
   * @memberof ProductTags
   */
  manufacturing_places?: string;
  /**
   *
   * @type {Array<string>}
   * @memberof ProductTags
   */
  manufacturing_places_tags?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof ProductTags
   */
  nova_groups_tags?: Array<string>;
  /**
   *
   * @type {Array<string>}
   * @memberof ProductTags
   */
  nutrient_levels_tags?: Array<string>;
}

/**
 * Check if a given object implements the ProductTags interface.
 */
export function instanceOfProductTags(value: object): value is ProductTags {
  return true;
}

export function ProductTagsFromJSON(json: any): ProductTags {
  return ProductTagsFromJSONTyped(json, false);
}

export function ProductTagsFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean,
): ProductTags {
  if (json == null) {
    return json;
  }
  return {
    brands: json["brands"] == null ? undefined : json["brands"],
    brands_tags: json["brands_tags"] == null ? undefined : json["brands_tags"],
    categories: json["categories"] == null ? undefined : json["categories"],
    categories_hierarchy:
      json["categories_hierarchy"] == null
        ? undefined
        : json["categories_hierarchy"],
    categories_lc:
      json["categories_lc"] == null ? undefined : json["categories_lc"],
    categories_old:
      json["categories_old"] == null ? undefined : json["categories_old"],
    categories_tags:
      json["categories_tags"] == null ? undefined : json["categories_tags"],
    checkers_tags:
      json["checkers_tags"] == null ? undefined : json["checkers_tags"],
    cities: json["cities"] == null ? undefined : json["cities"],
    cities_tags: json["cities_tags"] == null ? undefined : json["cities_tags"],
    correctors_tags:
      json["correctors_tags"] == null ? undefined : json["correctors_tags"],
    countries: json["countries"] == null ? undefined : json["countries"],
    countries_beforescanbot:
      json["countries_beforescanbot"] == null
        ? undefined
        : json["countries_beforescanbot"],
    countries_hierarchy:
      json["countries_hierarchy"] == null
        ? undefined
        : json["countries_hierarchy"],
    countries_lc:
      json["countries_lc"] == null ? undefined : json["countries_lc"],
    countries_tags:
      json["countries_tags"] == null ? undefined : json["countries_tags"],
    ecoscore_tags:
      json["ecoscore_tags"] == null ? undefined : json["ecoscore_tags"],
    emb_codes: json["emb_codes"] == null ? undefined : json["emb_codes"],
    emb_codes_orig:
      json["emb_codes_orig"] == null ? undefined : json["emb_codes_orig"],
    emb_codes_tags:
      json["emb_codes_tags"] == null ? undefined : json["emb_codes_tags"],
    labels: json["labels"] == null ? undefined : json["labels"],
    labels_hierarchy:
      json["labels_hierarchy"] == null ? undefined : json["labels_hierarchy"],
    labels_lc: json["labels_lc"] == null ? undefined : json["labels_lc"],
    labels_tags: json["labels_tags"] == null ? undefined : json["labels_tags"],
    entry_dates_tags:
      json["entry_dates_tags"] == null ? undefined : json["entry_dates_tags"],
    manufacturing_places:
      json["manufacturing_places"] == null
        ? undefined
        : json["manufacturing_places"],
    manufacturing_places_tags:
      json["manufacturing_places_tags"] == null
        ? undefined
        : json["manufacturing_places_tags"],
    nova_groups_tags:
      json["nova_groups_tags"] == null ? undefined : json["nova_groups_tags"],
    nutrient_levels_tags:
      json["nutrient_levels_tags"] == null
        ? undefined
        : json["nutrient_levels_tags"],
  };
}

export function ProductTagsToJSON(json: any): ProductTags {
  return ProductTagsToJSONTyped(json, false);
}

export function ProductTagsToJSONTyped(
  value?: ProductTags | null,
  ignoreDiscriminator: boolean = false,
): any {
  if (value == null) {
    return value;
  }

  return {
    brands: value["brands"],
    brands_tags: value["brands_tags"],
    categories: value["categories"],
    categories_hierarchy: value["categories_hierarchy"],
    categories_lc: value["categories_lc"],
    categories_old: value["categories_old"],
    categories_tags: value["categories_tags"],
    checkers_tags: value["checkers_tags"],
    cities: value["cities"],
    cities_tags: value["cities_tags"],
    correctors_tags: value["correctors_tags"],
    countries: value["countries"],
    countries_beforescanbot: value["countries_beforescanbot"],
    countries_hierarchy: value["countries_hierarchy"],
    countries_lc: value["countries_lc"],
    countries_tags: value["countries_tags"],
    ecoscore_tags: value["ecoscore_tags"],
    emb_codes: value["emb_codes"],
    emb_codes_orig: value["emb_codes_orig"],
    emb_codes_tags: value["emb_codes_tags"],
    labels: value["labels"],
    labels_hierarchy: value["labels_hierarchy"],
    labels_lc: value["labels_lc"],
    labels_tags: value["labels_tags"],
    entry_dates_tags: value["entry_dates_tags"],
    manufacturing_places: value["manufacturing_places"],
    manufacturing_places_tags: value["manufacturing_places_tags"],
    nova_groups_tags: value["nova_groups_tags"],
    nutrient_levels_tags: value["nutrient_levels_tags"],
  };
}
