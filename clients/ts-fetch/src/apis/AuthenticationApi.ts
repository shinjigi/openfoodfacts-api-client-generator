/* tslint:disable */
/* eslint-disable */
/**
 * Open Food Facts Open API
 * As a developer, the Open Food Facts API allows you to get information and contribute to the products database. You can create great apps to help people make better food choices and also provide data to enhance the database.
 *
 * The version of the OpenAPI document: 2
 * Contact: reuse@openfoodfacts.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import * as runtime from "../runtime";

export interface GetCgiSessionPlRequest {
  user_id: string;
  password: string;
}

/**
 *
 */
export class AuthenticationApi extends runtime.BaseAPI {
  /**
   * Retrieve session cookie for writing operations.
   * Login and obtain a session cookie
   */
  async getCgiSessionPlRaw(
    requestParameters: GetCgiSessionPlRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters["user_id"] == null) {
      throw new runtime.RequiredError(
        "user_id",
        'Required parameter "user_id" was null or undefined when calling getCgiSessionPl().',
      );
    }

    if (requestParameters["password"] == null) {
      throw new runtime.RequiredError(
        "password",
        'Required parameter "password" was null or undefined when calling getCgiSessionPl().',
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    const consumes: runtime.Consume[] = [
      { contentType: "application/x-www-form-urlencoded" },
    ];
    // @ts-ignore: canConsumeForm may be unused
    const canConsumeForm = runtime.canConsumeForm(consumes);

    let formParams: { append(param: string, value: any): any };
    let useForm = false;
    if (useForm) {
      formParams = new FormData();
    } else {
      formParams = new URLSearchParams();
    }

    if (requestParameters["user_id"] != null) {
      formParams.append("user_id", requestParameters["user_id"] as any);
    }

    if (requestParameters["password"] != null) {
      formParams.append("password", requestParameters["password"] as any);
    }

    const response = await this.request(
      {
        path: `/cgi/session.pl`,
        method: "POST",
        headers: headerParameters,
        query: queryParameters,
        body: formParams,
      },
      initOverrides,
    );

    return new runtime.VoidApiResponse(response);
  }

  /**
   * Retrieve session cookie for writing operations.
   * Login and obtain a session cookie
   */
  async getCgiSessionPl(
    requestParameters: GetCgiSessionPlRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction,
  ): Promise<void> {
    await this.getCgiSessionPlRaw(requestParameters, initOverrides);
  }
}
