/**
 * Open Food Facts Open API
 * As a developer, the Open Food Facts API allows you to get information and contribute to the products database. You can create great apps to help people make better food choices and also provide data to enhance the database. 
 *
 * OpenAPI spec version: 2
 * Contact: reuse@openfoodfacts.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Element } from '../models/Element';
import { TitleElement } from '../models/TitleElement';
import { HttpFile } from '../http/http';

/**
* Each panel contains an optional title and an optional array of elements.
*/
export class Panel {
    /**
    * Type of the panel. If set to \"card\", the panel and its sub-panels should be displayed in a card. If set to \"inline\", the panel should have its content always displayed.
    */
    'type'?: string;
    /**
    * If true, the panel is to be displayed already expanded. If false, only the title should be displayed, and the user should be able to click or tap it to open the panel and display the elements.
    */
    'expanded'?: boolean;
    /**
    * If set to \"large\", the content of the panel should be expanded on large screens, but it should still be possible to unexpand it.
    */
    'expand_for'?: string;
    /**
    * A simple assessment of the panel value, typically used to format fonts, et.c e.g. bad = red
    */
    'evaluation'?: PanelEvaluationEnum;
    'title_element'?: TitleElement;
    /**
    * An ordered list of elements to display in the content of the panel.
    */
    'elements'?: Array<Element>;
    /**
    * a message level, as levels we use in log. It might help theming the panel visualy 
    */
    'level'?: string;
    /**
    * size is either empty (normal display)  or small to indicate a panel that should have a smaller font size 
    */
    'size'?: PanelSizeEnum;
    'topics'?: Array<string>;

    static readonly discriminator: string | undefined = undefined;

    static readonly mapping: {[index: string]: string} | undefined = undefined;

    static readonly attributeTypeMap: Array<{name: string, baseName: string, type: string, format: string}> = [
        {
            "name": "type",
            "baseName": "type",
            "type": "string",
            "format": ""
        },
        {
            "name": "expanded",
            "baseName": "expanded",
            "type": "boolean",
            "format": ""
        },
        {
            "name": "expand_for",
            "baseName": "expand_for",
            "type": "string",
            "format": ""
        },
        {
            "name": "evaluation",
            "baseName": "evaluation",
            "type": "PanelEvaluationEnum",
            "format": ""
        },
        {
            "name": "title_element",
            "baseName": "title_element",
            "type": "TitleElement",
            "format": ""
        },
        {
            "name": "elements",
            "baseName": "elements",
            "type": "Array<Element>",
            "format": ""
        },
        {
            "name": "level",
            "baseName": "level",
            "type": "string",
            "format": ""
        },
        {
            "name": "size",
            "baseName": "size",
            "type": "PanelSizeEnum",
            "format": ""
        },
        {
            "name": "topics",
            "baseName": "topics",
            "type": "Array<string>",
            "format": ""
        }    ];

    static getAttributeTypeMap() {
        return Panel.attributeTypeMap;
    }

    public constructor() {
    }
}

export enum PanelEvaluationEnum {
    good = 'good',
    average = 'average',
    neutral = 'neutral',
    bad = 'bad',
    unknown = 'unknown'
}
export enum PanelSizeEnum {
    small = 'small'
}

