/**
 * Open Food Facts Open API
 * As a developer, the Open Food Facts API allows you to get information and contribute to the products database. You can create great apps to help people make better food choices and also provide data to enhance the database. 
 *
 * The version of the OpenAPI document: 2
 * Contact: reuse@openfoodfacts.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', process.cwd()+'/src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require(process.cwd()+'/src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.OpenFoodFactsOpenApi);
  }
}(this, function(expect, OpenFoodFactsOpenApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new OpenFoodFactsOpenApi.ProductMetadata();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('ProductMetadata', function() {
    it('should create an instance of ProductMetadata', function() {
      // uncomment below and update the code to test ProductMetadata
      //var instance = new OpenFoodFactsOpenApi.ProductMetadata();
      //expect(instance).to.be.a(OpenFoodFactsOpenApi.ProductMetadata);
    });

    it('should have the property created_t (base name: "created_t")', function() {
      // uncomment below and update the code to test the property created_t
      //var instance = new OpenFoodFactsOpenApi.ProductMetadata();
      //expect(instance).to.be();
    });

    it('should have the property creator (base name: "creator")', function() {
      // uncomment below and update the code to test the property creator
      //var instance = new OpenFoodFactsOpenApi.ProductMetadata();
      //expect(instance).to.be();
    });

    it('should have the property editors_tags (base name: "editors_tags")', function() {
      // uncomment below and update the code to test the property editors_tags
      //var instance = new OpenFoodFactsOpenApi.ProductMetadata();
      //expect(instance).to.be();
    });

    it('should have the property informers_tags (base name: "informers_tags")', function() {
      // uncomment below and update the code to test the property informers_tags
      //var instance = new OpenFoodFactsOpenApi.ProductMetadata();
      //expect(instance).to.be();
    });

    it('should have the property interface_version_created (base name: "interface_version_created")', function() {
      // uncomment below and update the code to test the property interface_version_created
      //var instance = new OpenFoodFactsOpenApi.ProductMetadata();
      //expect(instance).to.be();
    });

    it('should have the property interface_version_modified (base name: "interface_version_modified")', function() {
      // uncomment below and update the code to test the property interface_version_modified
      //var instance = new OpenFoodFactsOpenApi.ProductMetadata();
      //expect(instance).to.be();
    });

    it('should have the property languages (base name: "languages")', function() {
      // uncomment below and update the code to test the property languages
      //var instance = new OpenFoodFactsOpenApi.ProductMetadata();
      //expect(instance).to.be();
    });

    it('should have the property languages_codes (base name: "languages_codes")', function() {
      // uncomment below and update the code to test the property languages_codes
      //var instance = new OpenFoodFactsOpenApi.ProductMetadata();
      //expect(instance).to.be();
    });

    it('should have the property languages_hierarchy (base name: "languages_hierarchy")', function() {
      // uncomment below and update the code to test the property languages_hierarchy
      //var instance = new OpenFoodFactsOpenApi.ProductMetadata();
      //expect(instance).to.be();
    });

    it('should have the property languages_tags (base name: "languages_tags")', function() {
      // uncomment below and update the code to test the property languages_tags
      //var instance = new OpenFoodFactsOpenApi.ProductMetadata();
      //expect(instance).to.be();
    });

    it('should have the property last_edit_dates_tags (base name: "last_edit_dates_tags")', function() {
      // uncomment below and update the code to test the property last_edit_dates_tags
      //var instance = new OpenFoodFactsOpenApi.ProductMetadata();
      //expect(instance).to.be();
    });

    it('should have the property last_editor (base name: "last_editor")', function() {
      // uncomment below and update the code to test the property last_editor
      //var instance = new OpenFoodFactsOpenApi.ProductMetadata();
      //expect(instance).to.be();
    });

    it('should have the property last_modified_by (base name: "last_modified_by")', function() {
      // uncomment below and update the code to test the property last_modified_by
      //var instance = new OpenFoodFactsOpenApi.ProductMetadata();
      //expect(instance).to.be();
    });

    it('should have the property last_modified_t (base name: "last_modified_t")', function() {
      // uncomment below and update the code to test the property last_modified_t
      //var instance = new OpenFoodFactsOpenApi.ProductMetadata();
      //expect(instance).to.be();
    });

    it('should have the property owner (base name: "owner")', function() {
      // uncomment below and update the code to test the property owner
      //var instance = new OpenFoodFactsOpenApi.ProductMetadata();
      //expect(instance).to.be();
    });

    it('should have the property owners_tags (base name: "owners_tags")', function() {
      // uncomment below and update the code to test the property owners_tags
      //var instance = new OpenFoodFactsOpenApi.ProductMetadata();
      //expect(instance).to.be();
    });

    it('should have the property photographers_tags (base name: "photographers_tags")', function() {
      // uncomment below and update the code to test the property photographers_tags
      //var instance = new OpenFoodFactsOpenApi.ProductMetadata();
      //expect(instance).to.be();
    });

    it('should have the property rev (base name: "rev")', function() {
      // uncomment below and update the code to test the property rev
      //var instance = new OpenFoodFactsOpenApi.ProductMetadata();
      //expect(instance).to.be();
    });

    it('should have the property sources (base name: "sources")', function() {
      // uncomment below and update the code to test the property sources
      //var instance = new OpenFoodFactsOpenApi.ProductMetadata();
      //expect(instance).to.be();
    });

    it('should have the property sources_fields (base name: "sources_fields")', function() {
      // uncomment below and update the code to test the property sources_fields
      //var instance = new OpenFoodFactsOpenApi.ProductMetadata();
      //expect(instance).to.be();
    });

    it('should have the property teams (base name: "teams")', function() {
      // uncomment below and update the code to test the property teams
      //var instance = new OpenFoodFactsOpenApi.ProductMetadata();
      //expect(instance).to.be();
    });

    it('should have the property teams_tags (base name: "teams_tags")', function() {
      // uncomment below and update the code to test the property teams_tags
      //var instance = new OpenFoodFactsOpenApi.ProductMetadata();
      //expect(instance).to.be();
    });

    it('should have the property update_key (base name: "update_key")', function() {
      // uncomment below and update the code to test the property update_key
      //var instance = new OpenFoodFactsOpenApi.ProductMetadata();
      //expect(instance).to.be();
    });

  });

}));
