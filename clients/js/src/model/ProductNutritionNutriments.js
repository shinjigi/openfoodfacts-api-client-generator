/**
 * Open Food Facts Open API
 * As a developer, the Open Food Facts API allows you to get information and contribute to the products database. You can create great apps to help people make better food choices and also provide data to enhance the database. 
 *
 * The version of the OpenAPI document: 2
 * Contact: reuse@openfoodfacts.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProductNutritionNutriments model module.
 * @module model/ProductNutritionNutriments
 * @version 2
 */
class ProductNutritionNutriments {
    /**
     * Constructs a new <code>ProductNutritionNutriments</code>.
     * All known nutrients for the product.  Note that each nutrients are declined with a variety of suffixes like &#x60;_100g&#x60;, &#x60;_serving&#x60;, see patternProperties below.  A specific &#x60;_unit&#x60; is the unit used to measure the nutrient.  Beware that some properties are to be interpreted based upon &#x60;nutrition_data_per&#x60; value.  Also for products that have a nutrition table for prepared product (eg. the nutrition facts for a bowl of milk with cocoa powder), a &#x60;_prepared&#x60; suffix is added (before other suffixes).  You can get all possible nutrients from the [nutrients taxonomy](https://static.openfoodfacts.org/data/taxonomies/nutrients.json)  **FIXME** add more nutrients with description. 
     * @alias module:model/ProductNutritionNutriments
     */
    constructor() { 
        
        ProductNutritionNutriments.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductNutritionNutriments</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductNutritionNutriments} obj Optional instance to populate.
     * @return {module:model/ProductNutritionNutriments} The populated <code>ProductNutritionNutriments</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductNutritionNutriments();

            if (data.hasOwnProperty('alcohol')) {
                obj['alcohol'] = ApiClient.convertToType(data['alcohol'], 'Number');
            }
            if (data.hasOwnProperty('carbohydrates')) {
                obj['carbohydrates'] = ApiClient.convertToType(data['carbohydrates'], 'Number');
            }
            if (data.hasOwnProperty('carbohydrates_100g')) {
                obj['carbohydrates_100g'] = ApiClient.convertToType(data['carbohydrates_100g'], 'Number');
            }
            if (data.hasOwnProperty('carbohydrates_serving')) {
                obj['carbohydrates_serving'] = ApiClient.convertToType(data['carbohydrates_serving'], 'Number');
            }
            if (data.hasOwnProperty('carbohydrates_unit')) {
                obj['carbohydrates_unit'] = ApiClient.convertToType(data['carbohydrates_unit'], 'String');
            }
            if (data.hasOwnProperty('carbohydrates_value')) {
                obj['carbohydrates_value'] = ApiClient.convertToType(data['carbohydrates_value'], 'Number');
            }
            if (data.hasOwnProperty('cocoa')) {
                obj['cocoa'] = ApiClient.convertToType(data['cocoa'], 'Number');
            }
            if (data.hasOwnProperty('cocoa_100g')) {
                obj['cocoa_100g'] = ApiClient.convertToType(data['cocoa_100g'], 'Number');
            }
            if (data.hasOwnProperty('cocoa_label')) {
                obj['cocoa_label'] = ApiClient.convertToType(data['cocoa_label'], 'String');
            }
            if (data.hasOwnProperty('cocoa_serving')) {
                obj['cocoa_serving'] = ApiClient.convertToType(data['cocoa_serving'], 'Number');
            }
            if (data.hasOwnProperty('cocoa_unit')) {
                obj['cocoa_unit'] = ApiClient.convertToType(data['cocoa_unit'], 'String');
            }
            if (data.hasOwnProperty('cocoa_value')) {
                obj['cocoa_value'] = ApiClient.convertToType(data['cocoa_value'], 'Number');
            }
            if (data.hasOwnProperty('energy')) {
                obj['energy'] = ApiClient.convertToType(data['energy'], 'Number');
            }
            if (data.hasOwnProperty('energy_100g')) {
                obj['energy_100g'] = ApiClient.convertToType(data['energy_100g'], 'Number');
            }
            if (data.hasOwnProperty('energy_value')) {
                obj['energy_value'] = ApiClient.convertToType(data['energy_value'], 'Number');
            }
            if (data.hasOwnProperty('energy_serving')) {
                obj['energy_serving'] = ApiClient.convertToType(data['energy_serving'], 'Number');
            }
            if (data.hasOwnProperty('energy_unit')) {
                obj['energy_unit'] = ApiClient.convertToType(data['energy_unit'], 'String');
            }
            if (data.hasOwnProperty('energy_kj')) {
                obj['energy_kj'] = ApiClient.convertToType(data['energy_kj'], 'Number');
            }
            if (data.hasOwnProperty('energy_kj_100g')) {
                obj['energy_kj_100g'] = ApiClient.convertToType(data['energy_kj_100g'], 'Number');
            }
            if (data.hasOwnProperty('energy_kj_serving')) {
                obj['energy_kj_serving'] = ApiClient.convertToType(data['energy_kj_serving'], 'Number');
            }
            if (data.hasOwnProperty('energy_kj_unit')) {
                obj['energy_kj_unit'] = ApiClient.convertToType(data['energy_kj_unit'], 'String');
            }
            if (data.hasOwnProperty('energy_kj_value')) {
                obj['energy_kj_value'] = ApiClient.convertToType(data['energy_kj_value'], 'Number');
            }
            if (data.hasOwnProperty('energy_kj_value_computed')) {
                obj['energy_kj_value_computed'] = ApiClient.convertToType(data['energy_kj_value_computed'], 'Number');
            }
            if (data.hasOwnProperty('fat')) {
                obj['fat'] = ApiClient.convertToType(data['fat'], 'Number');
            }
            if (data.hasOwnProperty('fat_value')) {
                obj['fat_value'] = ApiClient.convertToType(data['fat_value'], 'Number');
            }
            if (data.hasOwnProperty('fat_100g')) {
                obj['fat_100g'] = ApiClient.convertToType(data['fat_100g'], 'Number');
            }
            if (data.hasOwnProperty('fat_serving')) {
                obj['fat_serving'] = ApiClient.convertToType(data['fat_serving'], 'Number');
            }
            if (data.hasOwnProperty('fat_unit')) {
                obj['fat_unit'] = ApiClient.convertToType(data['fat_unit'], 'String');
            }
            if (data.hasOwnProperty('nova-group_100g')) {
                obj['nova-group_100g'] = ApiClient.convertToType(data['nova-group_100g'], 'Number');
            }
            if (data.hasOwnProperty('nova-group_serving')) {
                obj['nova-group_serving'] = ApiClient.convertToType(data['nova-group_serving'], 'Number');
            }
            if (data.hasOwnProperty('nutrition-score-fr_100g')) {
                obj['nutrition-score-fr_100g'] = ApiClient.convertToType(data['nutrition-score-fr_100g'], 'Number');
            }
            if (data.hasOwnProperty('proteins_100g')) {
                obj['proteins_100g'] = ApiClient.convertToType(data['proteins_100g'], 'Number');
            }
            if (data.hasOwnProperty('proteins_serving')) {
                obj['proteins_serving'] = ApiClient.convertToType(data['proteins_serving'], 'Number');
            }
            if (data.hasOwnProperty('proteins_unit')) {
                obj['proteins_unit'] = ApiClient.convertToType(data['proteins_unit'], 'String');
            }
            if (data.hasOwnProperty('proteins_value')) {
                obj['proteins_value'] = ApiClient.convertToType(data['proteins_value'], 'Number');
            }
            if (data.hasOwnProperty('salt_100g')) {
                obj['salt_100g'] = ApiClient.convertToType(data['salt_100g'], 'Number');
            }
            if (data.hasOwnProperty('salt_serving')) {
                obj['salt_serving'] = ApiClient.convertToType(data['salt_serving'], 'Number');
            }
            if (data.hasOwnProperty('salt_unit')) {
                obj['salt_unit'] = ApiClient.convertToType(data['salt_unit'], 'String');
            }
            if (data.hasOwnProperty('salt_value')) {
                obj['salt_value'] = ApiClient.convertToType(data['salt_value'], 'Number');
            }
            if (data.hasOwnProperty('saturated-fat')) {
                obj['saturated-fat'] = ApiClient.convertToType(data['saturated-fat'], 'Number');
            }
            if (data.hasOwnProperty('saturated-fat_100g')) {
                obj['saturated-fat_100g'] = ApiClient.convertToType(data['saturated-fat_100g'], 'Number');
            }
            if (data.hasOwnProperty('saturated-fat_serving')) {
                obj['saturated-fat_serving'] = ApiClient.convertToType(data['saturated-fat_serving'], 'Number');
            }
            if (data.hasOwnProperty('saturated-fat_unit')) {
                obj['saturated-fat_unit'] = ApiClient.convertToType(data['saturated-fat_unit'], 'String');
            }
            if (data.hasOwnProperty('saturated-fat_value')) {
                obj['saturated-fat_value'] = ApiClient.convertToType(data['saturated-fat_value'], 'Number');
            }
            if (data.hasOwnProperty('sodium_100g')) {
                obj['sodium_100g'] = ApiClient.convertToType(data['sodium_100g'], 'Number');
            }
            if (data.hasOwnProperty('sodium_serving')) {
                obj['sodium_serving'] = ApiClient.convertToType(data['sodium_serving'], 'Number');
            }
            if (data.hasOwnProperty('sodium_unit')) {
                obj['sodium_unit'] = ApiClient.convertToType(data['sodium_unit'], 'String');
            }
            if (data.hasOwnProperty('sodium_value')) {
                obj['sodium_value'] = ApiClient.convertToType(data['sodium_value'], 'Number');
            }
            if (data.hasOwnProperty('sugars_100g')) {
                obj['sugars_100g'] = ApiClient.convertToType(data['sugars_100g'], 'Number');
            }
            if (data.hasOwnProperty('sugars_serving')) {
                obj['sugars_serving'] = ApiClient.convertToType(data['sugars_serving'], 'Number');
            }
            if (data.hasOwnProperty('sugars_unit')) {
                obj['sugars_unit'] = ApiClient.convertToType(data['sugars_unit'], 'String');
            }
            if (data.hasOwnProperty('sugars_value')) {
                obj['sugars_value'] = ApiClient.convertToType(data['sugars_value'], 'Number');
            }
            if (data.hasOwnProperty('fiber_100g')) {
                obj['fiber_100g'] = ApiClient.convertToType(data['fiber_100g'], 'Number');
            }
            if (data.hasOwnProperty('fiber_serving')) {
                obj['fiber_serving'] = ApiClient.convertToType(data['fiber_serving'], 'Number');
            }
            if (data.hasOwnProperty('fiber_unit')) {
                obj['fiber_unit'] = ApiClient.convertToType(data['fiber_unit'], 'String');
            }
            if (data.hasOwnProperty('fiber_value')) {
                obj['fiber_value'] = ApiClient.convertToType(data['fiber_value'], 'Number');
            }
            if (data.hasOwnProperty('energy-kcal_100g')) {
                obj['energy-kcal_100g'] = ApiClient.convertToType(data['energy-kcal_100g'], 'Number');
            }
            if (data.hasOwnProperty('energy-kcal_serving')) {
                obj['energy-kcal_serving'] = ApiClient.convertToType(data['energy-kcal_serving'], 'Number');
            }
            if (data.hasOwnProperty('energy-kcal_unit')) {
                obj['energy-kcal_unit'] = ApiClient.convertToType(data['energy-kcal_unit'], 'String');
            }
            if (data.hasOwnProperty('energy-kcal_value')) {
                obj['energy-kcal_value'] = ApiClient.convertToType(data['energy-kcal_value'], 'Number');
            }
            if (data.hasOwnProperty('energy-kcal_value_computed')) {
                obj['energy-kcal_value_computed'] = ApiClient.convertToType(data['energy-kcal_value_computed'], 'Number');
            }
            if (data.hasOwnProperty('energy-kcal')) {
                obj['energy-kcal'] = ApiClient.convertToType(data['energy-kcal'], 'Number');
            }
            if (data.hasOwnProperty('fruits-vegetables-legumes-estimate-from-ingredients_serving')) {
                obj['fruits-vegetables-legumes-estimate-from-ingredients_serving'] = ApiClient.convertToType(data['fruits-vegetables-legumes-estimate-from-ingredients_serving'], 'Number');
            }
            if (data.hasOwnProperty('fruits-vegetables-legumes-estimate-from-ingredients_100g')) {
                obj['fruits-vegetables-legumes-estimate-from-ingredients_100g'] = ApiClient.convertToType(data['fruits-vegetables-legumes-estimate-from-ingredients_100g'], 'Number');
            }
            if (data.hasOwnProperty('fruits-vegetables-legumes-estimate-from-ingredients')) {
                obj['fruits-vegetables-legumes-estimate-from-ingredients'] = ApiClient.convertToType(data['fruits-vegetables-legumes-estimate-from-ingredients'], 'Number');
            }
            if (data.hasOwnProperty('fruits-vegetables-nuts-estimate-from-ingredients_serving')) {
                obj['fruits-vegetables-nuts-estimate-from-ingredients_serving'] = ApiClient.convertToType(data['fruits-vegetables-nuts-estimate-from-ingredients_serving'], 'Number');
            }
            if (data.hasOwnProperty('fruits-vegetables-nuts-estimate-from-ingredients_100g')) {
                obj['fruits-vegetables-nuts-estimate-from-ingredients_100g'] = ApiClient.convertToType(data['fruits-vegetables-nuts-estimate-from-ingredients_100g'], 'Number');
            }
            if (data.hasOwnProperty('fruits-vegetables-nuts-estimate-from-ingredients')) {
                obj['fruits-vegetables-nuts-estimate-from-ingredients'] = ApiClient.convertToType(data['fruits-vegetables-nuts-estimate-from-ingredients'], 'Number');
            }
            if (data.hasOwnProperty('nova-group')) {
                obj['nova-group'] = ApiClient.convertToType(data['nova-group'], 'Number');
            }
            if (data.hasOwnProperty('nutrition-score-fr')) {
                obj['nutrition-score-fr'] = ApiClient.convertToType(data['nutrition-score-fr'], Object);
            }
            if (data.hasOwnProperty('proteins')) {
                obj['proteins'] = ApiClient.convertToType(data['proteins'], 'Number');
            }
            if (data.hasOwnProperty('salt')) {
                obj['salt'] = ApiClient.convertToType(data['salt'], 'Number');
            }
            if (data.hasOwnProperty('sodium')) {
                obj['sodium'] = ApiClient.convertToType(data['sodium'], 'Number');
            }
            if (data.hasOwnProperty('sugars')) {
                obj['sugars'] = ApiClient.convertToType(data['sugars'], 'Number');
            }
            if (data.hasOwnProperty('fiber')) {
                obj['fiber'] = ApiClient.convertToType(data['fiber'], 'Number');
            }
            if (data.hasOwnProperty('carbon-footprint-from-known-ingredients_product')) {
                obj['carbon-footprint-from-known-ingredients_product'] = ApiClient.convertToType(data['carbon-footprint-from-known-ingredients_product'], 'Number');
            }
            if (data.hasOwnProperty('carbon-footprint-from-known-ingredients_serving')) {
                obj['carbon-footprint-from-known-ingredients_serving'] = ApiClient.convertToType(data['carbon-footprint-from-known-ingredients_serving'], 'Number');
            }
            if (data.hasOwnProperty('erythritol')) {
                obj['erythritol'] = ApiClient.convertToType(data['erythritol'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductNutritionNutriments</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductNutritionNutriments</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['carbohydrates_unit'] && !(typeof data['carbohydrates_unit'] === 'string' || data['carbohydrates_unit'] instanceof String)) {
            throw new Error("Expected the field `carbohydrates_unit` to be a primitive type in the JSON string but got " + data['carbohydrates_unit']);
        }
        // ensure the json data is a string
        if (data['cocoa_label'] && !(typeof data['cocoa_label'] === 'string' || data['cocoa_label'] instanceof String)) {
            throw new Error("Expected the field `cocoa_label` to be a primitive type in the JSON string but got " + data['cocoa_label']);
        }
        // ensure the json data is a string
        if (data['cocoa_unit'] && !(typeof data['cocoa_unit'] === 'string' || data['cocoa_unit'] instanceof String)) {
            throw new Error("Expected the field `cocoa_unit` to be a primitive type in the JSON string but got " + data['cocoa_unit']);
        }
        // ensure the json data is a string
        if (data['energy_unit'] && !(typeof data['energy_unit'] === 'string' || data['energy_unit'] instanceof String)) {
            throw new Error("Expected the field `energy_unit` to be a primitive type in the JSON string but got " + data['energy_unit']);
        }
        // ensure the json data is a string
        if (data['energy_kj_unit'] && !(typeof data['energy_kj_unit'] === 'string' || data['energy_kj_unit'] instanceof String)) {
            throw new Error("Expected the field `energy_kj_unit` to be a primitive type in the JSON string but got " + data['energy_kj_unit']);
        }
        // ensure the json data is a string
        if (data['fat_unit'] && !(typeof data['fat_unit'] === 'string' || data['fat_unit'] instanceof String)) {
            throw new Error("Expected the field `fat_unit` to be a primitive type in the JSON string but got " + data['fat_unit']);
        }
        // ensure the json data is a string
        if (data['proteins_unit'] && !(typeof data['proteins_unit'] === 'string' || data['proteins_unit'] instanceof String)) {
            throw new Error("Expected the field `proteins_unit` to be a primitive type in the JSON string but got " + data['proteins_unit']);
        }
        // ensure the json data is a string
        if (data['salt_unit'] && !(typeof data['salt_unit'] === 'string' || data['salt_unit'] instanceof String)) {
            throw new Error("Expected the field `salt_unit` to be a primitive type in the JSON string but got " + data['salt_unit']);
        }
        // ensure the json data is a string
        if (data['saturated-fat_unit'] && !(typeof data['saturated-fat_unit'] === 'string' || data['saturated-fat_unit'] instanceof String)) {
            throw new Error("Expected the field `saturated-fat_unit` to be a primitive type in the JSON string but got " + data['saturated-fat_unit']);
        }
        // ensure the json data is a string
        if (data['sodium_unit'] && !(typeof data['sodium_unit'] === 'string' || data['sodium_unit'] instanceof String)) {
            throw new Error("Expected the field `sodium_unit` to be a primitive type in the JSON string but got " + data['sodium_unit']);
        }
        // ensure the json data is a string
        if (data['sugars_unit'] && !(typeof data['sugars_unit'] === 'string' || data['sugars_unit'] instanceof String)) {
            throw new Error("Expected the field `sugars_unit` to be a primitive type in the JSON string but got " + data['sugars_unit']);
        }
        // ensure the json data is a string
        if (data['fiber_unit'] && !(typeof data['fiber_unit'] === 'string' || data['fiber_unit'] instanceof String)) {
            throw new Error("Expected the field `fiber_unit` to be a primitive type in the JSON string but got " + data['fiber_unit']);
        }
        // ensure the json data is a string
        if (data['energy-kcal_unit'] && !(typeof data['energy-kcal_unit'] === 'string' || data['energy-kcal_unit'] instanceof String)) {
            throw new Error("Expected the field `energy-kcal_unit` to be a primitive type in the JSON string but got " + data['energy-kcal_unit']);
        }

        return true;
    }


}



/**
 * Quantity of alcohol  (per 100g or per serving) in a standard unit (g or ml) 
 * @member {Number} alcohol
 */
ProductNutritionNutriments.prototype['alcohol'] = undefined;

/**
 * @member {Number} carbohydrates
 */
ProductNutritionNutriments.prototype['carbohydrates'] = undefined;

/**
 * @member {Number} carbohydrates_100g
 */
ProductNutritionNutriments.prototype['carbohydrates_100g'] = undefined;

/**
 * @member {Number} carbohydrates_serving
 */
ProductNutritionNutriments.prototype['carbohydrates_serving'] = undefined;

/**
 * @member {module:model/ProductNutritionNutriments.CarbohydratesUnitEnum} carbohydrates_unit
 */
ProductNutritionNutriments.prototype['carbohydrates_unit'] = undefined;

/**
 * @member {Number} carbohydrates_value
 */
ProductNutritionNutriments.prototype['carbohydrates_value'] = undefined;

/**
 * @member {Number} cocoa
 */
ProductNutritionNutriments.prototype['cocoa'] = undefined;

/**
 * @member {Number} cocoa_100g
 */
ProductNutritionNutriments.prototype['cocoa_100g'] = undefined;

/**
 * @member {String} cocoa_label
 */
ProductNutritionNutriments.prototype['cocoa_label'] = undefined;

/**
 * @member {Number} cocoa_serving
 */
ProductNutritionNutriments.prototype['cocoa_serving'] = undefined;

/**
 * @member {module:model/ProductNutritionNutriments.CocoaUnitEnum} cocoa_unit
 */
ProductNutritionNutriments.prototype['cocoa_unit'] = undefined;

/**
 * @member {Number} cocoa_value
 */
ProductNutritionNutriments.prototype['cocoa_value'] = undefined;

/**
 * It is the same as `energy-kj` if we have it, or computed from `energy-kcal` otherwise  (per 100g or per serving) in kj 
 * @member {Number} energy
 */
ProductNutritionNutriments.prototype['energy'] = undefined;

/**
 * @member {Number} energy_100g
 */
ProductNutritionNutriments.prototype['energy_100g'] = undefined;

/**
 * energy_value will be equal to energy-kj_value if we have it or to energy-kcal_value otherwise 
 * @member {Number} energy_value
 */
ProductNutritionNutriments.prototype['energy_value'] = undefined;

/**
 * @member {Number} energy_serving
 */
ProductNutritionNutriments.prototype['energy_serving'] = undefined;

/**
 * Equal to energy-kj_unit if we have it or to energy-kcal_unit otherwise 
 * @member {module:model/ProductNutritionNutriments.EnergyUnitEnum} energy_unit
 */
ProductNutritionNutriments.prototype['energy_unit'] = undefined;

/**
 * energy in kj, if it is specified  (per 100g or per serving) in a standard unit (g or ml) 
 * @member {Number} energy_kj
 */
ProductNutritionNutriments.prototype['energy_kj'] = undefined;

/**
 * @member {Number} energy_kj_100g
 */
ProductNutritionNutriments.prototype['energy_kj_100g'] = undefined;

/**
 * @member {Number} energy_kj_serving
 */
ProductNutritionNutriments.prototype['energy_kj_serving'] = undefined;

/**
 * @member {module:model/ProductNutritionNutriments.EnergyKjUnitEnum} energy_kj_unit
 */
ProductNutritionNutriments.prototype['energy_kj_unit'] = undefined;

/**
 * @member {Number} energy_kj_value
 */
ProductNutritionNutriments.prototype['energy_kj_value'] = undefined;

/**
 * @member {Number} energy_kj_value_computed
 */
ProductNutritionNutriments.prototype['energy_kj_value_computed'] = undefined;

/**
 * @member {Number} fat
 */
ProductNutritionNutriments.prototype['fat'] = undefined;

/**
 * @member {Number} fat_value
 */
ProductNutritionNutriments.prototype['fat_value'] = undefined;

/**
 * @member {Number} fat_100g
 */
ProductNutritionNutriments.prototype['fat_100g'] = undefined;

/**
 * @member {Number} fat_serving
 */
ProductNutritionNutriments.prototype['fat_serving'] = undefined;

/**
 * @member {String} fat_unit
 */
ProductNutritionNutriments.prototype['fat_unit'] = undefined;

/**
 * @member {Number} nova-group_100g
 */
ProductNutritionNutriments.prototype['nova-group_100g'] = undefined;

/**
 * @member {Number} nova-group_serving
 */
ProductNutritionNutriments.prototype['nova-group_serving'] = undefined;

/**
 * @member {Number} nutrition-score-fr_100g
 */
ProductNutritionNutriments.prototype['nutrition-score-fr_100g'] = undefined;

/**
 * @member {Number} proteins_100g
 */
ProductNutritionNutriments.prototype['proteins_100g'] = undefined;

/**
 * @member {Number} proteins_serving
 */
ProductNutritionNutriments.prototype['proteins_serving'] = undefined;

/**
 * @member {String} proteins_unit
 */
ProductNutritionNutriments.prototype['proteins_unit'] = undefined;

/**
 * @member {Number} proteins_value
 */
ProductNutritionNutriments.prototype['proteins_value'] = undefined;

/**
 * @member {Number} salt_100g
 */
ProductNutritionNutriments.prototype['salt_100g'] = undefined;

/**
 * @member {Number} salt_serving
 */
ProductNutritionNutriments.prototype['salt_serving'] = undefined;

/**
 * @member {String} salt_unit
 */
ProductNutritionNutriments.prototype['salt_unit'] = undefined;

/**
 * @member {Number} salt_value
 */
ProductNutritionNutriments.prototype['salt_value'] = undefined;

/**
 * @member {Number} saturated-fat
 */
ProductNutritionNutriments.prototype['saturated-fat'] = undefined;

/**
 * @member {Number} saturated-fat_100g
 */
ProductNutritionNutriments.prototype['saturated-fat_100g'] = undefined;

/**
 * @member {Number} saturated-fat_serving
 */
ProductNutritionNutriments.prototype['saturated-fat_serving'] = undefined;

/**
 * @member {String} saturated-fat_unit
 */
ProductNutritionNutriments.prototype['saturated-fat_unit'] = undefined;

/**
 * @member {Number} saturated-fat_value
 */
ProductNutritionNutriments.prototype['saturated-fat_value'] = undefined;

/**
 * @member {Number} sodium_100g
 */
ProductNutritionNutriments.prototype['sodium_100g'] = undefined;

/**
 * @member {Number} sodium_serving
 */
ProductNutritionNutriments.prototype['sodium_serving'] = undefined;

/**
 * @member {String} sodium_unit
 */
ProductNutritionNutriments.prototype['sodium_unit'] = undefined;

/**
 * @member {Number} sodium_value
 */
ProductNutritionNutriments.prototype['sodium_value'] = undefined;

/**
 * @member {Number} sugars_100g
 */
ProductNutritionNutriments.prototype['sugars_100g'] = undefined;

/**
 * @member {Number} sugars_serving
 */
ProductNutritionNutriments.prototype['sugars_serving'] = undefined;

/**
 * @member {String} sugars_unit
 */
ProductNutritionNutriments.prototype['sugars_unit'] = undefined;

/**
 * @member {Number} sugars_value
 */
ProductNutritionNutriments.prototype['sugars_value'] = undefined;

/**
 * @member {Number} fiber_100g
 */
ProductNutritionNutriments.prototype['fiber_100g'] = undefined;

/**
 * @member {Number} fiber_serving
 */
ProductNutritionNutriments.prototype['fiber_serving'] = undefined;

/**
 * @member {String} fiber_unit
 */
ProductNutritionNutriments.prototype['fiber_unit'] = undefined;

/**
 * @member {Number} fiber_value
 */
ProductNutritionNutriments.prototype['fiber_value'] = undefined;

/**
 * @member {Number} energy-kcal_100g
 */
ProductNutritionNutriments.prototype['energy-kcal_100g'] = undefined;

/**
 * @member {Number} energy-kcal_serving
 */
ProductNutritionNutriments.prototype['energy-kcal_serving'] = undefined;

/**
 * @member {String} energy-kcal_unit
 */
ProductNutritionNutriments.prototype['energy-kcal_unit'] = undefined;

/**
 * @member {Number} energy-kcal_value
 */
ProductNutritionNutriments.prototype['energy-kcal_value'] = undefined;

/**
 * @member {Number} energy-kcal_value_computed
 */
ProductNutritionNutriments.prototype['energy-kcal_value_computed'] = undefined;

/**
 * energy in kcal, if it is specified  (per 100g or per serving) in a standard unit (g or ml) 
 * @member {Number} energy-kcal
 */
ProductNutritionNutriments.prototype['energy-kcal'] = undefined;

/**
 * @member {Number} fruits-vegetables-legumes-estimate-from-ingredients_serving
 */
ProductNutritionNutriments.prototype['fruits-vegetables-legumes-estimate-from-ingredients_serving'] = undefined;

/**
 * @member {Number} fruits-vegetables-legumes-estimate-from-ingredients_100g
 */
ProductNutritionNutriments.prototype['fruits-vegetables-legumes-estimate-from-ingredients_100g'] = undefined;

/**
 * An estimate, from the ingredients list of the percentage of fruits, vegetable and legumes. This is an important information for Nutri-Score (2023 version) computation. 
 * @member {Number} fruits-vegetables-legumes-estimate-from-ingredients
 */
ProductNutritionNutriments.prototype['fruits-vegetables-legumes-estimate-from-ingredients'] = undefined;

/**
 * @member {Number} fruits-vegetables-nuts-estimate-from-ingredients_serving
 */
ProductNutritionNutriments.prototype['fruits-vegetables-nuts-estimate-from-ingredients_serving'] = undefined;

/**
 * @member {Number} fruits-vegetables-nuts-estimate-from-ingredients_100g
 */
ProductNutritionNutriments.prototype['fruits-vegetables-nuts-estimate-from-ingredients_100g'] = undefined;

/**
 * An estimate, from the ingredients list of the percentage of fruits, vegetable and nuts. This is an important information for Nutri-Score (2021 version) computation. 
 * @member {Number} fruits-vegetables-nuts-estimate-from-ingredients
 */
ProductNutritionNutriments.prototype['fruits-vegetables-nuts-estimate-from-ingredients'] = undefined;

/**
 * @member {Number} nova-group
 */
ProductNutritionNutriments.prototype['nova-group'] = undefined;

/**
 * @member {Object} nutrition-score-fr
 */
ProductNutritionNutriments.prototype['nutrition-score-fr'] = undefined;

/**
 * @member {Number} proteins
 */
ProductNutritionNutriments.prototype['proteins'] = undefined;

/**
 * @member {Number} salt
 */
ProductNutritionNutriments.prototype['salt'] = undefined;

/**
 * @member {Number} sodium
 */
ProductNutritionNutriments.prototype['sodium'] = undefined;

/**
 * @member {Number} sugars
 */
ProductNutritionNutriments.prototype['sugars'] = undefined;

/**
 * @member {Number} fiber
 */
ProductNutritionNutriments.prototype['fiber'] = undefined;

/**
 * @member {Number} carbon-footprint-from-known-ingredients_product
 */
ProductNutritionNutriments.prototype['carbon-footprint-from-known-ingredients_product'] = undefined;

/**
 * @member {Number} carbon-footprint-from-known-ingredients_serving
 */
ProductNutritionNutriments.prototype['carbon-footprint-from-known-ingredients_serving'] = undefined;

/**
 * erythritol is a polyol which is not providing any energy. As such, it needs not be taken into account when computing the energy of a product. Eryhtritol is now displayed on nutrition facts sheet of some products, mainly in the USA. This value is entered either by contributors, either by imports. 
 * @member {Number} erythritol
 */
ProductNutritionNutriments.prototype['erythritol'] = undefined;





/**
 * Allowed values for the <code>carbohydrates_unit</code> property.
 * @enum {String}
 * @readonly
 */
ProductNutritionNutriments['CarbohydratesUnitEnum'] = {

    /**
     * value: "g"
     * @const
     */
    "g": "g",

    /**
     * value: "mg"
     * @const
     */
    "mg": "mg",

    /**
     * value: "μg"
     * @const
     */
    "μg": "μg"
};


/**
 * Allowed values for the <code>cocoa_unit</code> property.
 * @enum {String}
 * @readonly
 */
ProductNutritionNutriments['CocoaUnitEnum'] = {

    /**
     * value: "g"
     * @const
     */
    "g": "g",

    /**
     * value: "mg"
     * @const
     */
    "mg": "mg",

    /**
     * value: "μg"
     * @const
     */
    "μg": "μg"
};


/**
 * Allowed values for the <code>energy_unit</code> property.
 * @enum {String}
 * @readonly
 */
ProductNutritionNutriments['EnergyUnitEnum'] = {

    /**
     * value: "kcal"
     * @const
     */
    "kcal": "kcal",

    /**
     * value: "kJ"
     * @const
     */
    "kJ": "kJ"
};


/**
 * Allowed values for the <code>energy_kj_unit</code> property.
 * @enum {String}
 * @readonly
 */
ProductNutritionNutriments['EnergyKjUnitEnum'] = {

    /**
     * value: "kJ"
     * @const
     */
    "kJ": "kJ"
};



export default ProductNutritionNutriments;

