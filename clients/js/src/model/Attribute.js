/**
 * Open Food Facts Open API
 * As a developer, the Open Food Facts API allows you to get information and contribute to the products database. You can create great apps to help people make better food choices and also provide data to enhance the database. 
 *
 * The version of the OpenAPI document: 2
 * Contact: reuse@openfoodfacts.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The Attribute model module.
 * @module model/Attribute
 * @version 2
 */
class Attribute {
    /**
     * Constructs a new <code>Attribute</code>.
     * @alias module:model/Attribute
     */
    constructor() { 
        
        Attribute.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Attribute</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Attribute} obj Optional instance to populate.
     * @return {module:model/Attribute} The populated <code>Attribute</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Attribute();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('icon_url')) {
                obj['icon_url'] = ApiClient.convertToType(data['icon_url'], 'String');
            }
            if (data.hasOwnProperty('setting_name')) {
                obj['setting_name'] = ApiClient.convertToType(data['setting_name'], 'String');
            }
            if (data.hasOwnProperty('setting_note')) {
                obj['setting_note'] = ApiClient.convertToType(data['setting_note'], 'String');
            }
            if (data.hasOwnProperty('default')) {
                obj['default'] = ApiClient.convertToType(data['default'], 'String');
            }
            if (data.hasOwnProperty('panel_id')) {
                obj['panel_id'] = ApiClient.convertToType(data['panel_id'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Attribute</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Attribute</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['icon_url'] && !(typeof data['icon_url'] === 'string' || data['icon_url'] instanceof String)) {
            throw new Error("Expected the field `icon_url` to be a primitive type in the JSON string but got " + data['icon_url']);
        }
        // ensure the json data is a string
        if (data['setting_name'] && !(typeof data['setting_name'] === 'string' || data['setting_name'] instanceof String)) {
            throw new Error("Expected the field `setting_name` to be a primitive type in the JSON string but got " + data['setting_name']);
        }
        // ensure the json data is a string
        if (data['setting_note'] && !(typeof data['setting_note'] === 'string' || data['setting_note'] instanceof String)) {
            throw new Error("Expected the field `setting_note` to be a primitive type in the JSON string but got " + data['setting_note']);
        }
        // ensure the json data is a string
        if (data['default'] && !(typeof data['default'] === 'string' || data['default'] instanceof String)) {
            throw new Error("Expected the field `default` to be a primitive type in the JSON string but got " + data['default']);
        }
        // ensure the json data is a string
        if (data['panel_id'] && !(typeof data['panel_id'] === 'string' || data['panel_id'] instanceof String)) {
            throw new Error("Expected the field `panel_id` to be a primitive type in the JSON string but got " + data['panel_id']);
        }

        return true;
    }


}



/**
 * unique id of the attribute
 * @member {String} id
 */
Attribute.prototype['id'] = undefined;

/**
 * Name of the attribute
 * @member {String} name
 */
Attribute.prototype['name'] = undefined;

/**
 * url of icon to display next to the settings for this attribute
 * @member {String} icon_url
 */
Attribute.prototype['icon_url'] = undefined;

/**
 * a description of the attribute to display to users
 * @member {String} setting_name
 */
Attribute.prototype['setting_name'] = undefined;

/**
 * a complementary note on the attribute
 * @member {String} setting_note
 */
Attribute.prototype['setting_note'] = undefined;

/**
 * Indicates the default setting for this attribute
 * @member {module:model/Attribute.DefaultEnum} default
 */
Attribute.prototype['default'] = undefined;

/**
 * Linked knowledge panel (optional)
 * @member {String} panel_id
 */
Attribute.prototype['panel_id'] = undefined;





/**
 * Allowed values for the <code>default</code> property.
 * @enum {String}
 * @readonly
 */
Attribute['DefaultEnum'] = {

    /**
     * value: "mandatory"
     * @const
     */
    "mandatory": "mandatory",

    /**
     * value: "very_important"
     * @const
     */
    "very_important": "very_important",

    /**
     * value: "important"
     * @const
     */
    "important": "important",

    /**
     * value: "not_important"
     * @const
     */
    "not_important": "not_important"
};



export default Attribute;

