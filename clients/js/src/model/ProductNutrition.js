/**
 * Open Food Facts Open API
 * As a developer, the Open Food Facts API allows you to get information and contribute to the products database. You can create great apps to help people make better food choices and also provide data to enhance the database. 
 *
 * The version of the OpenAPI document: 2
 * Contact: reuse@openfoodfacts.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ProductNutritionNutriments from './ProductNutritionNutriments';
import ProductNutritionNutriscoreData from './ProductNutritionNutriscoreData';

/**
 * The ProductNutrition model module.
 * @module model/ProductNutrition
 * @version 2
 */
class ProductNutrition {
    /**
     * Constructs a new <code>ProductNutrition</code>.
     * Nutrition fields of a product  Most of these properties are read-only.  See [how to add nutrition data](https://openfoodfacts.github.io/openfoodfacts-server/api/ref-cheatsheet/#add-nutrition-facts-values-units-and-base) 
     * @alias module:model/ProductNutrition
     */
    constructor() { 
        
        ProductNutrition.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductNutrition</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductNutrition} obj Optional instance to populate.
     * @return {module:model/ProductNutrition} The populated <code>ProductNutrition</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductNutrition();

            if (data.hasOwnProperty('no_nutrition_data')) {
                obj['no_nutrition_data'] = ApiClient.convertToType(data['no_nutrition_data'], 'String');
            }
            if (data.hasOwnProperty('nutrition_data_per')) {
                obj['nutrition_data_per'] = ApiClient.convertToType(data['nutrition_data_per'], 'String');
            }
            if (data.hasOwnProperty('nutrition_data_prepared_per')) {
                obj['nutrition_data_prepared_per'] = ApiClient.convertToType(data['nutrition_data_prepared_per'], 'String');
            }
            if (data.hasOwnProperty('nutriments')) {
                obj['nutriments'] = ProductNutritionNutriments.constructFromObject(data['nutriments']);
            }
            if (data.hasOwnProperty('nutriscore_data')) {
                obj['nutriscore_data'] = ProductNutritionNutriscoreData.constructFromObject(data['nutriscore_data']);
            }
            if (data.hasOwnProperty('nutrition_grade_fr')) {
                obj['nutrition_grade_fr'] = ApiClient.convertToType(data['nutrition_grade_fr'], 'String');
            }
            if (data.hasOwnProperty('nutrition_grades')) {
                obj['nutrition_grades'] = ApiClient.convertToType(data['nutrition_grades'], 'String');
            }
            if (data.hasOwnProperty('nutrition_grades_tags')) {
                obj['nutrition_grades_tags'] = ApiClient.convertToType(data['nutrition_grades_tags'], ['String']);
            }
            if (data.hasOwnProperty('nutrition_score_beverage')) {
                obj['nutrition_score_beverage'] = ApiClient.convertToType(data['nutrition_score_beverage'], 'Number');
            }
            if (data.hasOwnProperty('nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients')) {
                obj['nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients'] = ApiClient.convertToType(data['nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients'], 'Number');
            }
            if (data.hasOwnProperty('nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients_value')) {
                obj['nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients_value'] = ApiClient.convertToType(data['nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients_value'], 'Number');
            }
            if (data.hasOwnProperty('nutrition_score_warning_no_fiber')) {
                obj['nutrition_score_warning_no_fiber'] = ApiClient.convertToType(data['nutrition_score_warning_no_fiber'], 'Number');
            }
            if (data.hasOwnProperty('other_nutritional_substances_tags')) {
                obj['other_nutritional_substances_tags'] = ApiClient.convertToType(data['other_nutritional_substances_tags'], [Object]);
            }
            if (data.hasOwnProperty('unknown_nutrients_tags')) {
                obj['unknown_nutrients_tags'] = ApiClient.convertToType(data['unknown_nutrients_tags'], [Object]);
            }
            if (data.hasOwnProperty('vitamins_tags')) {
                obj['vitamins_tags'] = ApiClient.convertToType(data['vitamins_tags'], [Object]);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductNutrition</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductNutrition</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['no_nutrition_data'] && !(typeof data['no_nutrition_data'] === 'string' || data['no_nutrition_data'] instanceof String)) {
            throw new Error("Expected the field `no_nutrition_data` to be a primitive type in the JSON string but got " + data['no_nutrition_data']);
        }
        // ensure the json data is a string
        if (data['nutrition_data_per'] && !(typeof data['nutrition_data_per'] === 'string' || data['nutrition_data_per'] instanceof String)) {
            throw new Error("Expected the field `nutrition_data_per` to be a primitive type in the JSON string but got " + data['nutrition_data_per']);
        }
        // ensure the json data is a string
        if (data['nutrition_data_prepared_per'] && !(typeof data['nutrition_data_prepared_per'] === 'string' || data['nutrition_data_prepared_per'] instanceof String)) {
            throw new Error("Expected the field `nutrition_data_prepared_per` to be a primitive type in the JSON string but got " + data['nutrition_data_prepared_per']);
        }
        // validate the optional field `nutriments`
        if (data['nutriments']) { // data not null
          ProductNutritionNutriments.validateJSON(data['nutriments']);
        }
        // validate the optional field `nutriscore_data`
        if (data['nutriscore_data']) { // data not null
          ProductNutritionNutriscoreData.validateJSON(data['nutriscore_data']);
        }
        // ensure the json data is a string
        if (data['nutrition_grade_fr'] && !(typeof data['nutrition_grade_fr'] === 'string' || data['nutrition_grade_fr'] instanceof String)) {
            throw new Error("Expected the field `nutrition_grade_fr` to be a primitive type in the JSON string but got " + data['nutrition_grade_fr']);
        }
        // ensure the json data is a string
        if (data['nutrition_grades'] && !(typeof data['nutrition_grades'] === 'string' || data['nutrition_grades'] instanceof String)) {
            throw new Error("Expected the field `nutrition_grades` to be a primitive type in the JSON string but got " + data['nutrition_grades']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['nutrition_grades_tags'])) {
            throw new Error("Expected the field `nutrition_grades_tags` to be an array in the JSON data but got " + data['nutrition_grades_tags']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['other_nutritional_substances_tags'])) {
            throw new Error("Expected the field `other_nutritional_substances_tags` to be an array in the JSON data but got " + data['other_nutritional_substances_tags']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['unknown_nutrients_tags'])) {
            throw new Error("Expected the field `unknown_nutrients_tags` to be an array in the JSON data but got " + data['unknown_nutrients_tags']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['vitamins_tags'])) {
            throw new Error("Expected the field `vitamins_tags` to be an array in the JSON data but got " + data['vitamins_tags']);
        }

        return true;
    }


}



/**
 * When a product does not have nutrition data displayed on the packaging, the user can check the field \"Nutrition facts are not specified on the product\". By doing so, the no_nutrition_data field takes the value \"on\". This case is frequent (thousands of products). 
 * @member {String} no_nutrition_data
 */
ProductNutrition.prototype['no_nutrition_data'] = undefined;

/**
 * The nutrition data on the package can be per serving or per 100g.  This is essential to understand if `<nutrient>_value` and `<nutrient>` values in `nutriments` applies for a serving or for 100g.  **IMPORTANT:** When writing products, this setting applies to all existing nutrients values for the product, not only the nutrient values sent in the write request. So it should not be changed unless all nutrients values are provided with values that match the nutrition_data_per field. 
 * @member {module:model/ProductNutrition.NutritionDataPerEnum} nutrition_data_per
 */
ProductNutrition.prototype['nutrition_data_per'] = undefined;

/**
 * The nutrition data for prepared product on the package (if any) can be per serving or per 100g.  This is essential to understand if `<nutrient>_prepared_value` and `<nutrient>_prepared` values in `nutriments` applies for a serving or for 100g.  See also important note on `nutrition_data_per`. 
 * @member {module:model/ProductNutrition.NutritionDataPreparedPerEnum} nutrition_data_prepared_per
 */
ProductNutrition.prototype['nutrition_data_prepared_per'] = undefined;

/**
 * @member {module:model/ProductNutritionNutriments} nutriments
 */
ProductNutrition.prototype['nutriments'] = undefined;

/**
 * @member {module:model/ProductNutritionNutriscoreData} nutriscore_data
 */
ProductNutrition.prototype['nutriscore_data'] = undefined;

/**
 * Nutrition grade (‘a’ to ‘e’), https://world.openfoodfacts.org/nutriscore. 
 * @member {String} nutrition_grade_fr
 */
ProductNutrition.prototype['nutrition_grade_fr'] = undefined;

/**
 * Nutrition grades as a comma separated list.  Some products with multiple components might have multiple Nutri-Score 
 * @member {String} nutrition_grades
 */
ProductNutrition.prototype['nutrition_grades'] = undefined;

/**
 * @member {Array.<String>} nutrition_grades_tags
 */
ProductNutrition.prototype['nutrition_grades_tags'] = undefined;

/**
 * @member {Number} nutrition_score_beverage
 */
ProductNutrition.prototype['nutrition_score_beverage'] = undefined;

/**
 * @member {Number} nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients
 */
ProductNutrition.prototype['nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients'] = undefined;

/**
 * @member {Number} nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients_value
 */
ProductNutrition.prototype['nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients_value'] = undefined;

/**
 * @member {Number} nutrition_score_warning_no_fiber
 */
ProductNutrition.prototype['nutrition_score_warning_no_fiber'] = undefined;

/**
 * @member {Array.<Object>} other_nutritional_substances_tags
 */
ProductNutrition.prototype['other_nutritional_substances_tags'] = undefined;

/**
 * @member {Array.<Object>} unknown_nutrients_tags
 */
ProductNutrition.prototype['unknown_nutrients_tags'] = undefined;

/**
 * @member {Array.<Object>} vitamins_tags
 */
ProductNutrition.prototype['vitamins_tags'] = undefined;





/**
 * Allowed values for the <code>nutrition_data_per</code> property.
 * @enum {String}
 * @readonly
 */
ProductNutrition['NutritionDataPerEnum'] = {

    /**
     * value: "serving"
     * @const
     */
    "serving": "serving",

    /**
     * value: "100g"
     * @const
     */
    "100g": "100g"
};


/**
 * Allowed values for the <code>nutrition_data_prepared_per</code> property.
 * @enum {String}
 * @readonly
 */
ProductNutrition['NutritionDataPreparedPerEnum'] = {

    /**
     * value: "serving"
     * @const
     */
    "serving": "serving",

    /**
     * value: "100g"
     * @const
     */
    "100g": "100g"
};



export default ProductNutrition;

