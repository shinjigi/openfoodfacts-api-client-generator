/**
 * Open Food Facts Open API
 * As a developer, the Open Food Facts API allows you to get information and contribute to the products database. You can create great apps to help people make better food choices and also provide data to enhance the database. 
 *
 * The version of the OpenAPI document: 2
 * Contact: reuse@openfoodfacts.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Element from './Element';
import TitleElement from './TitleElement';

/**
 * The Panel model module.
 * @module model/Panel
 * @version 2
 */
class Panel {
    /**
     * Constructs a new <code>Panel</code>.
     * Each panel contains an optional title and an optional array of elements.
     * @alias module:model/Panel
     */
    constructor() { 
        
        Panel.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>Panel</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Panel} obj Optional instance to populate.
     * @return {module:model/Panel} The populated <code>Panel</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Panel();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('expanded')) {
                obj['expanded'] = ApiClient.convertToType(data['expanded'], 'Boolean');
            }
            if (data.hasOwnProperty('expand_for')) {
                obj['expand_for'] = ApiClient.convertToType(data['expand_for'], 'String');
            }
            if (data.hasOwnProperty('evaluation')) {
                obj['evaluation'] = ApiClient.convertToType(data['evaluation'], 'String');
            }
            if (data.hasOwnProperty('title_element')) {
                obj['title_element'] = TitleElement.constructFromObject(data['title_element']);
            }
            if (data.hasOwnProperty('elements')) {
                obj['elements'] = ApiClient.convertToType(data['elements'], [Element]);
            }
            if (data.hasOwnProperty('level')) {
                obj['level'] = ApiClient.convertToType(data['level'], 'String');
            }
            if (data.hasOwnProperty('size')) {
                obj['size'] = ApiClient.convertToType(data['size'], 'String');
            }
            if (data.hasOwnProperty('topics')) {
                obj['topics'] = ApiClient.convertToType(data['topics'], ['String']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Panel</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Panel</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // ensure the json data is a string
        if (data['expand_for'] && !(typeof data['expand_for'] === 'string' || data['expand_for'] instanceof String)) {
            throw new Error("Expected the field `expand_for` to be a primitive type in the JSON string but got " + data['expand_for']);
        }
        // ensure the json data is a string
        if (data['evaluation'] && !(typeof data['evaluation'] === 'string' || data['evaluation'] instanceof String)) {
            throw new Error("Expected the field `evaluation` to be a primitive type in the JSON string but got " + data['evaluation']);
        }
        // validate the optional field `title_element`
        if (data['title_element']) { // data not null
          TitleElement.validateJSON(data['title_element']);
        }
        if (data['elements']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['elements'])) {
                throw new Error("Expected the field `elements` to be an array in the JSON data but got " + data['elements']);
            }
            // validate the optional field `elements` (array)
            for (const item of data['elements']) {
                Element.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['level'] && !(typeof data['level'] === 'string' || data['level'] instanceof String)) {
            throw new Error("Expected the field `level` to be a primitive type in the JSON string but got " + data['level']);
        }
        // ensure the json data is a string
        if (data['size'] && !(typeof data['size'] === 'string' || data['size'] instanceof String)) {
            throw new Error("Expected the field `size` to be a primitive type in the JSON string but got " + data['size']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['topics'])) {
            throw new Error("Expected the field `topics` to be an array in the JSON data but got " + data['topics']);
        }

        return true;
    }


}



/**
 * Type of the panel. If set to \"card\", the panel and its sub-panels should be displayed in a card. If set to \"inline\", the panel should have its content always displayed.
 * @member {String} type
 */
Panel.prototype['type'] = undefined;

/**
 * If true, the panel is to be displayed already expanded. If false, only the title should be displayed, and the user should be able to click or tap it to open the panel and display the elements.
 * @member {Boolean} expanded
 */
Panel.prototype['expanded'] = undefined;

/**
 * If set to \"large\", the content of the panel should be expanded on large screens, but it should still be possible to unexpand it.
 * @member {String} expand_for
 */
Panel.prototype['expand_for'] = undefined;

/**
 * A simple assessment of the panel value, typically used to format fonts, et.c e.g. bad = red
 * @member {module:model/Panel.EvaluationEnum} evaluation
 */
Panel.prototype['evaluation'] = undefined;

/**
 * @member {module:model/TitleElement} title_element
 */
Panel.prototype['title_element'] = undefined;

/**
 * An ordered list of elements to display in the content of the panel.
 * @member {Array.<module:model/Element>} elements
 */
Panel.prototype['elements'] = undefined;

/**
 * a message level, as levels we use in log. It might help theming the panel visualy 
 * @member {String} level
 */
Panel.prototype['level'] = undefined;

/**
 * size is either empty (normal display)  or small to indicate a panel that should have a smaller font size 
 * @member {module:model/Panel.SizeEnum} size
 */
Panel.prototype['size'] = undefined;

/**
 * @member {Array.<String>} topics
 */
Panel.prototype['topics'] = undefined;





/**
 * Allowed values for the <code>evaluation</code> property.
 * @enum {String}
 * @readonly
 */
Panel['EvaluationEnum'] = {

    /**
     * value: "good"
     * @const
     */
    "good": "good",

    /**
     * value: "average"
     * @const
     */
    "average": "average",

    /**
     * value: "neutral"
     * @const
     */
    "neutral": "neutral",

    /**
     * value: "bad"
     * @const
     */
    "bad": "bad",

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown"
};


/**
 * Allowed values for the <code>size</code> property.
 * @enum {String}
 * @readonly
 */
Panel['SizeEnum'] = {

    /**
     * value: "small"
     * @const
     */
    "small": "small"
};



export default Panel;

