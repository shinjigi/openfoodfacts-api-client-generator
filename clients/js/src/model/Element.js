/**
 * Open Food Facts Open API
 * As a developer, the Open Food Facts API allows you to get information and contribute to the products database. You can create great apps to help people make better food choices and also provide data to enhance the database. 
 *
 * The version of the OpenAPI document: 2
 * Contact: reuse@openfoodfacts.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import ImageElement from './ImageElement';
import PanelElement from './PanelElement';
import PanelGroupElement from './PanelGroupElement';
import TableElement from './TableElement';
import TextElement from './TextElement';

/**
 * The Element model module.
 * @module model/Element
 * @version 2
 */
class Element {
    /**
     * Constructs a new <code>Element</code>.
     * Each element object contains one specific element object such as a text element or an image element. 
     * @alias module:model/Element
     * @param type {module:model/Element.TypeEnum} The type of the included element object. The type also indicates which field contains the included element object. e.g. if the type is \"text\", the included element object will be in the \"text_element\" field.  Note that in the future, new type of element may be added, so your code should ignore unrecognized types, and unknown properties.  TODO: add Map type 
     */
    constructor(type) { 
        
        Element.initialize(this, type);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj, type) { 
        obj['type'] = type;
    }

    /**
     * Constructs a <code>Element</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/Element} obj Optional instance to populate.
     * @return {module:model/Element} The populated <code>Element</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new Element();

            if (data.hasOwnProperty('type')) {
                obj['type'] = ApiClient.convertToType(data['type'], 'String');
            }
            if (data.hasOwnProperty('text_element')) {
                obj['text_element'] = TextElement.constructFromObject(data['text_element']);
            }
            if (data.hasOwnProperty('image_element')) {
                obj['image_element'] = ImageElement.constructFromObject(data['image_element']);
            }
            if (data.hasOwnProperty('action_element')) {
                obj['action_element'] = ApiClient.convertToType(data['action_element'], 'String');
            }
            if (data.hasOwnProperty('panel_element')) {
                obj['panel_element'] = PanelElement.constructFromObject(data['panel_element']);
            }
            if (data.hasOwnProperty('panel_group_element')) {
                obj['panel_group_element'] = PanelGroupElement.constructFromObject(data['panel_group_element']);
            }
            if (data.hasOwnProperty('table_element')) {
                obj['table_element'] = TableElement.constructFromObject(data['table_element']);
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>Element</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>Element</code>.
     */
    static validateJSON(data) {
        // check to make sure all required properties are present in the JSON string
        for (const property of Element.RequiredProperties) {
            if (!data.hasOwnProperty(property)) {
                throw new Error("The required field `" + property + "` is not found in the JSON data: " + JSON.stringify(data));
            }
        }
        // ensure the json data is a string
        if (data['type'] && !(typeof data['type'] === 'string' || data['type'] instanceof String)) {
            throw new Error("Expected the field `type` to be a primitive type in the JSON string but got " + data['type']);
        }
        // validate the optional field `text_element`
        if (data['text_element']) { // data not null
          TextElement.validateJSON(data['text_element']);
        }
        // validate the optional field `image_element`
        if (data['image_element']) { // data not null
          ImageElement.validateJSON(data['image_element']);
        }
        // ensure the json data is a string
        if (data['action_element'] && !(typeof data['action_element'] === 'string' || data['action_element'] instanceof String)) {
            throw new Error("Expected the field `action_element` to be a primitive type in the JSON string but got " + data['action_element']);
        }
        // validate the optional field `panel_element`
        if (data['panel_element']) { // data not null
          PanelElement.validateJSON(data['panel_element']);
        }
        // validate the optional field `panel_group_element`
        if (data['panel_group_element']) { // data not null
          PanelGroupElement.validateJSON(data['panel_group_element']);
        }
        // validate the optional field `table_element`
        if (data['table_element']) { // data not null
          TableElement.validateJSON(data['table_element']);
        }

        return true;
    }


}

Element.RequiredProperties = ["type"];

/**
 * The type of the included element object. The type also indicates which field contains the included element object. e.g. if the type is \"text\", the included element object will be in the \"text_element\" field.  Note that in the future, new type of element may be added, so your code should ignore unrecognized types, and unknown properties.  TODO: add Map type 
 * @member {module:model/Element.TypeEnum} type
 */
Element.prototype['type'] = undefined;

/**
 * @member {module:model/TextElement} text_element
 */
Element.prototype['text_element'] = undefined;

/**
 * @member {module:model/ImageElement} image_element
 */
Element.prototype['image_element'] = undefined;

/**
 * @member {String} action_element
 */
Element.prototype['action_element'] = undefined;

/**
 * @member {module:model/PanelElement} panel_element
 */
Element.prototype['panel_element'] = undefined;

/**
 * @member {module:model/PanelGroupElement} panel_group_element
 */
Element.prototype['panel_group_element'] = undefined;

/**
 * @member {module:model/TableElement} table_element
 */
Element.prototype['table_element'] = undefined;





/**
 * Allowed values for the <code>type</code> property.
 * @enum {String}
 * @readonly
 */
Element['TypeEnum'] = {

    /**
     * value: "text"
     * @const
     */
    "text": "text",

    /**
     * value: "image"
     * @const
     */
    "image": "image",

    /**
     * value: "action"
     * @const
     */
    "action": "action",

    /**
     * value: "panel"
     * @const
     */
    "panel": "panel",

    /**
     * value: "panel_group"
     * @const
     */
    "panel_group": "panel_group",

    /**
     * value: "table"
     * @const
     */
    "table": "table"
};



export default Element;

