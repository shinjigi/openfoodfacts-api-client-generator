/**
 * Open Food Facts Open API
 * As a developer, the Open Food Facts API allows you to get information and contribute to the products database. You can create great apps to help people make better food choices and also provide data to enhance the database. 
 *
 * The version of the OpenAPI document: 2
 * Contact: reuse@openfoodfacts.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';
import Ingredient from './Ingredient';
import NumberStringObjectType from './NumberStringObjectType';
import ProductIngredientsIngredientsAnalysis from './ProductIngredientsIngredientsAnalysis';

/**
 * The ProductIngredients model module.
 * @module model/ProductIngredients
 * @version 2
 */
class ProductIngredients {
    /**
     * Constructs a new <code>ProductIngredients</code>.
     * Fields about ingredients of a product
     * @alias module:model/ProductIngredients
     */
    constructor() { 
        
        ProductIngredients.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductIngredients</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductIngredients} obj Optional instance to populate.
     * @return {module:model/ProductIngredients} The populated <code>ProductIngredients</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductIngredients();

            if (data.hasOwnProperty('additives_tags')) {
                obj['additives_tags'] = ApiClient.convertToType(data['additives_tags'], ['String']);
            }
            if (data.hasOwnProperty('allergens')) {
                obj['allergens'] = ApiClient.convertToType(data['allergens'], 'String');
            }
            if (data.hasOwnProperty('allergens_lc')) {
                obj['allergens_lc'] = ApiClient.convertToType(data['allergens_lc'], 'String');
            }
            if (data.hasOwnProperty('allergens_hierarchy')) {
                obj['allergens_hierarchy'] = ApiClient.convertToType(data['allergens_hierarchy'], ['String']);
            }
            if (data.hasOwnProperty('allergens_tags')) {
                obj['allergens_tags'] = ApiClient.convertToType(data['allergens_tags'], ['String']);
            }
            if (data.hasOwnProperty('ingredients')) {
                obj['ingredients'] = ApiClient.convertToType(data['ingredients'], [Ingredient]);
            }
            if (data.hasOwnProperty('ingredients_analysis')) {
                obj['ingredients_analysis'] = ProductIngredientsIngredientsAnalysis.constructFromObject(data['ingredients_analysis']);
            }
            if (data.hasOwnProperty('ingredients_analysis_tags')) {
                obj['ingredients_analysis_tags'] = ApiClient.convertToType(data['ingredients_analysis_tags'], ['String']);
            }
            if (data.hasOwnProperty('ingredients_from_or_that_may_be_from_palm_oil_n')) {
                obj['ingredients_from_or_that_may_be_from_palm_oil_n'] = ApiClient.convertToType(data['ingredients_from_or_that_may_be_from_palm_oil_n'], 'Number');
            }
            if (data.hasOwnProperty('ingredients_from_palm_oil_n')) {
                obj['ingredients_from_palm_oil_n'] = ApiClient.convertToType(data['ingredients_from_palm_oil_n'], 'Number');
            }
            if (data.hasOwnProperty('ingredients_from_palm_oil_tags')) {
                obj['ingredients_from_palm_oil_tags'] = ApiClient.convertToType(data['ingredients_from_palm_oil_tags'], [Object]);
            }
            if (data.hasOwnProperty('ingredients_hierarchy')) {
                obj['ingredients_hierarchy'] = ApiClient.convertToType(data['ingredients_hierarchy'], ['String']);
            }
            if (data.hasOwnProperty('ingredients_n')) {
                obj['ingredients_n'] = ApiClient.convertToType(data['ingredients_n'], 'Number');
            }
            if (data.hasOwnProperty('ingredients_n_tags')) {
                obj['ingredients_n_tags'] = ApiClient.convertToType(data['ingredients_n_tags'], ['String']);
            }
            if (data.hasOwnProperty('ingredients_original_tags')) {
                obj['ingredients_original_tags'] = ApiClient.convertToType(data['ingredients_original_tags'], ['String']);
            }
            if (data.hasOwnProperty('ingredients_percent_analysis')) {
                obj['ingredients_percent_analysis'] = ApiClient.convertToType(data['ingredients_percent_analysis'], 'Number');
            }
            if (data.hasOwnProperty('ingredients_sweeteners_n')) {
                obj['ingredients_sweeteners_n'] = ApiClient.convertToType(data['ingredients_sweeteners_n'], 'Number');
            }
            if (data.hasOwnProperty('ingredients_non_nutritive_sweeteners_n')) {
                obj['ingredients_non_nutritive_sweeteners_n'] = ApiClient.convertToType(data['ingredients_non_nutritive_sweeteners_n'], 'Number');
            }
            if (data.hasOwnProperty('ingredients_tags')) {
                obj['ingredients_tags'] = ApiClient.convertToType(data['ingredients_tags'], ['String']);
            }
            if (data.hasOwnProperty('ingredients_lc')) {
                obj['ingredients_lc'] = ApiClient.convertToType(data['ingredients_lc'], 'String');
            }
            if (data.hasOwnProperty('ingredients_text_it')) {
                obj['ingredients_text_it'] = ApiClient.convertToType(data['ingredients_text_it'], 'String');
            }
            if (data.hasOwnProperty('ingredients_text_en')) {
                obj['ingredients_text_en'] = ApiClient.convertToType(data['ingredients_text_en'], 'String');
            }
            if (data.hasOwnProperty('ingredients_text')) {
                obj['ingredients_text'] = ApiClient.convertToType(data['ingredients_text'], 'String');
            }
            if (data.hasOwnProperty('ingredients_text_with_allergens')) {
                obj['ingredients_text_with_allergens'] = ApiClient.convertToType(data['ingredients_text_with_allergens'], 'String');
            }
            if (data.hasOwnProperty('ingredients_text_with_allergens_it')) {
                obj['ingredients_text_with_allergens_it'] = ApiClient.convertToType(data['ingredients_text_with_allergens_it'], 'String');
            }
            if (data.hasOwnProperty('ingredients_that_may_be_from_palm_oil_n')) {
                obj['ingredients_that_may_be_from_palm_oil_n'] = ApiClient.convertToType(data['ingredients_that_may_be_from_palm_oil_n'], 'Number');
            }
            if (data.hasOwnProperty('ingredients_that_may_be_from_palm_oil_tags')) {
                obj['ingredients_that_may_be_from_palm_oil_tags'] = ApiClient.convertToType(data['ingredients_that_may_be_from_palm_oil_tags'], [Object]);
            }
            if (data.hasOwnProperty('ingredients_with_specified_percent_n')) {
                obj['ingredients_with_specified_percent_n'] = ApiClient.convertToType(data['ingredients_with_specified_percent_n'], 'Number');
            }
            if (data.hasOwnProperty('ingredients_with_specified_percent_sum')) {
                obj['ingredients_with_specified_percent_sum'] = ApiClient.convertToType(data['ingredients_with_specified_percent_sum'], 'Number');
            }
            if (data.hasOwnProperty('ingredients_with_unspecified_percent_n')) {
                obj['ingredients_with_unspecified_percent_n'] = ApiClient.convertToType(data['ingredients_with_unspecified_percent_n'], 'Number');
            }
            if (data.hasOwnProperty('ingredients_with_unspecified_percent_sum')) {
                obj['ingredients_with_unspecified_percent_sum'] = ApiClient.convertToType(data['ingredients_with_unspecified_percent_sum'], 'Number');
            }
            if (data.hasOwnProperty('known_ingredients_n')) {
                obj['known_ingredients_n'] = ApiClient.convertToType(data['known_ingredients_n'], 'Number');
            }
            if (data.hasOwnProperty('origins')) {
                obj['origins'] = ApiClient.convertToType(data['origins'], 'String');
            }
            if (data.hasOwnProperty('origins_hierarchy')) {
                obj['origins_hierarchy'] = ApiClient.convertToType(data['origins_hierarchy'], [Object]);
            }
            if (data.hasOwnProperty('origins_lc')) {
                obj['origins_lc'] = ApiClient.convertToType(data['origins_lc'], 'String');
            }
            if (data.hasOwnProperty('origins_tags')) {
                obj['origins_tags'] = ApiClient.convertToType(data['origins_tags'], [Object]);
            }
            if (data.hasOwnProperty('traces')) {
                obj['traces'] = ApiClient.convertToType(data['traces'], 'String');
            }
            if (data.hasOwnProperty('traces_hierarchy')) {
                obj['traces_hierarchy'] = ApiClient.convertToType(data['traces_hierarchy'], [NumberStringObjectType]);
            }
            if (data.hasOwnProperty('traces_lc')) {
                obj['traces_lc'] = ApiClient.convertToType(data['traces_lc'], 'String');
            }
            if (data.hasOwnProperty('traces_tags')) {
                obj['traces_tags'] = ApiClient.convertToType(data['traces_tags'], [NumberStringObjectType]);
            }
            if (data.hasOwnProperty('unknown_ingredients_n')) {
                obj['unknown_ingredients_n'] = ApiClient.convertToType(data['unknown_ingredients_n'], 'Number');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductIngredients</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductIngredients</code>.
     */
    static validateJSON(data) {
        // ensure the json data is an array
        if (!Array.isArray(data['additives_tags'])) {
            throw new Error("Expected the field `additives_tags` to be an array in the JSON data but got " + data['additives_tags']);
        }
        // ensure the json data is a string
        if (data['allergens'] && !(typeof data['allergens'] === 'string' || data['allergens'] instanceof String)) {
            throw new Error("Expected the field `allergens` to be a primitive type in the JSON string but got " + data['allergens']);
        }
        // ensure the json data is a string
        if (data['allergens_lc'] && !(typeof data['allergens_lc'] === 'string' || data['allergens_lc'] instanceof String)) {
            throw new Error("Expected the field `allergens_lc` to be a primitive type in the JSON string but got " + data['allergens_lc']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['allergens_hierarchy'])) {
            throw new Error("Expected the field `allergens_hierarchy` to be an array in the JSON data but got " + data['allergens_hierarchy']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['allergens_tags'])) {
            throw new Error("Expected the field `allergens_tags` to be an array in the JSON data but got " + data['allergens_tags']);
        }
        if (data['ingredients']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['ingredients'])) {
                throw new Error("Expected the field `ingredients` to be an array in the JSON data but got " + data['ingredients']);
            }
            // validate the optional field `ingredients` (array)
            for (const item of data['ingredients']) {
                Ingredient.validateJSON(item);
            };
        }
        // validate the optional field `ingredients_analysis`
        if (data['ingredients_analysis']) { // data not null
          ProductIngredientsIngredientsAnalysis.validateJSON(data['ingredients_analysis']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ingredients_analysis_tags'])) {
            throw new Error("Expected the field `ingredients_analysis_tags` to be an array in the JSON data but got " + data['ingredients_analysis_tags']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ingredients_from_palm_oil_tags'])) {
            throw new Error("Expected the field `ingredients_from_palm_oil_tags` to be an array in the JSON data but got " + data['ingredients_from_palm_oil_tags']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ingredients_hierarchy'])) {
            throw new Error("Expected the field `ingredients_hierarchy` to be an array in the JSON data but got " + data['ingredients_hierarchy']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ingredients_n_tags'])) {
            throw new Error("Expected the field `ingredients_n_tags` to be an array in the JSON data but got " + data['ingredients_n_tags']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ingredients_original_tags'])) {
            throw new Error("Expected the field `ingredients_original_tags` to be an array in the JSON data but got " + data['ingredients_original_tags']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ingredients_tags'])) {
            throw new Error("Expected the field `ingredients_tags` to be an array in the JSON data but got " + data['ingredients_tags']);
        }
        // ensure the json data is a string
        if (data['ingredients_lc'] && !(typeof data['ingredients_lc'] === 'string' || data['ingredients_lc'] instanceof String)) {
            throw new Error("Expected the field `ingredients_lc` to be a primitive type in the JSON string but got " + data['ingredients_lc']);
        }
        // ensure the json data is a string
        if (data['ingredients_text_it'] && !(typeof data['ingredients_text_it'] === 'string' || data['ingredients_text_it'] instanceof String)) {
            throw new Error("Expected the field `ingredients_text_it` to be a primitive type in the JSON string but got " + data['ingredients_text_it']);
        }
        // ensure the json data is a string
        if (data['ingredients_text_en'] && !(typeof data['ingredients_text_en'] === 'string' || data['ingredients_text_en'] instanceof String)) {
            throw new Error("Expected the field `ingredients_text_en` to be a primitive type in the JSON string but got " + data['ingredients_text_en']);
        }
        // ensure the json data is a string
        if (data['ingredients_text'] && !(typeof data['ingredients_text'] === 'string' || data['ingredients_text'] instanceof String)) {
            throw new Error("Expected the field `ingredients_text` to be a primitive type in the JSON string but got " + data['ingredients_text']);
        }
        // ensure the json data is a string
        if (data['ingredients_text_with_allergens'] && !(typeof data['ingredients_text_with_allergens'] === 'string' || data['ingredients_text_with_allergens'] instanceof String)) {
            throw new Error("Expected the field `ingredients_text_with_allergens` to be a primitive type in the JSON string but got " + data['ingredients_text_with_allergens']);
        }
        // ensure the json data is a string
        if (data['ingredients_text_with_allergens_it'] && !(typeof data['ingredients_text_with_allergens_it'] === 'string' || data['ingredients_text_with_allergens_it'] instanceof String)) {
            throw new Error("Expected the field `ingredients_text_with_allergens_it` to be a primitive type in the JSON string but got " + data['ingredients_text_with_allergens_it']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['ingredients_that_may_be_from_palm_oil_tags'])) {
            throw new Error("Expected the field `ingredients_that_may_be_from_palm_oil_tags` to be an array in the JSON data but got " + data['ingredients_that_may_be_from_palm_oil_tags']);
        }
        // ensure the json data is a string
        if (data['origins'] && !(typeof data['origins'] === 'string' || data['origins'] instanceof String)) {
            throw new Error("Expected the field `origins` to be a primitive type in the JSON string but got " + data['origins']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['origins_hierarchy'])) {
            throw new Error("Expected the field `origins_hierarchy` to be an array in the JSON data but got " + data['origins_hierarchy']);
        }
        // ensure the json data is a string
        if (data['origins_lc'] && !(typeof data['origins_lc'] === 'string' || data['origins_lc'] instanceof String)) {
            throw new Error("Expected the field `origins_lc` to be a primitive type in the JSON string but got " + data['origins_lc']);
        }
        // ensure the json data is an array
        if (!Array.isArray(data['origins_tags'])) {
            throw new Error("Expected the field `origins_tags` to be an array in the JSON data but got " + data['origins_tags']);
        }
        // ensure the json data is a string
        if (data['traces'] && !(typeof data['traces'] === 'string' || data['traces'] instanceof String)) {
            throw new Error("Expected the field `traces` to be a primitive type in the JSON string but got " + data['traces']);
        }
        if (data['traces_hierarchy']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['traces_hierarchy'])) {
                throw new Error("Expected the field `traces_hierarchy` to be an array in the JSON data but got " + data['traces_hierarchy']);
            }
            // validate the optional field `traces_hierarchy` (array)
            for (const item of data['traces_hierarchy']) {
                NumberStringObjectType.validateJSON(item);
            };
        }
        // ensure the json data is a string
        if (data['traces_lc'] && !(typeof data['traces_lc'] === 'string' || data['traces_lc'] instanceof String)) {
            throw new Error("Expected the field `traces_lc` to be a primitive type in the JSON string but got " + data['traces_lc']);
        }
        if (data['traces_tags']) { // data not null
            // ensure the json data is an array
            if (!Array.isArray(data['traces_tags'])) {
                throw new Error("Expected the field `traces_tags` to be an array in the JSON data but got " + data['traces_tags']);
            }
            // validate the optional field `traces_tags` (array)
            for (const item of data['traces_tags']) {
                NumberStringObjectType.validateJSON(item);
            };
        }

        return true;
    }


}



/**
 * @member {Array.<String>} additives_tags
 */
ProductIngredients.prototype['additives_tags'] = undefined;

/**
 * comma separated list of allergens
 * @member {String} allergens
 */
ProductIngredients.prototype['allergens'] = undefined;

/**
 * language in which `allergens` where input
 * @member {String} allergens_lc
 */
ProductIngredients.prototype['allergens_lc'] = undefined;

/**
 * @member {Array.<String>} allergens_hierarchy
 */
ProductIngredients.prototype['allergens_hierarchy'] = undefined;

/**
 * @member {Array.<String>} allergens_tags
 */
ProductIngredients.prototype['allergens_tags'] = undefined;

/**
 * This structure gives the different ingredients and some information about them, like estimate on their quantity. 
 * @member {Array.<module:model/Ingredient>} ingredients
 */
ProductIngredients.prototype['ingredients'] = undefined;

/**
 * @member {module:model/ProductIngredientsIngredientsAnalysis} ingredients_analysis
 */
ProductIngredients.prototype['ingredients_analysis'] = undefined;

/**
 * @member {Array.<String>} ingredients_analysis_tags
 */
ProductIngredients.prototype['ingredients_analysis_tags'] = undefined;

/**
 * @member {Number} ingredients_from_or_that_may_be_from_palm_oil_n
 */
ProductIngredients.prototype['ingredients_from_or_that_may_be_from_palm_oil_n'] = undefined;

/**
 * @member {Number} ingredients_from_palm_oil_n
 */
ProductIngredients.prototype['ingredients_from_palm_oil_n'] = undefined;

/**
 * @member {Array.<Object>} ingredients_from_palm_oil_tags
 */
ProductIngredients.prototype['ingredients_from_palm_oil_tags'] = undefined;

/**
 * @member {Array.<String>} ingredients_hierarchy
 */
ProductIngredients.prototype['ingredients_hierarchy'] = undefined;

/**
 * @member {Number} ingredients_n
 */
ProductIngredients.prototype['ingredients_n'] = undefined;

/**
 * @member {Array.<String>} ingredients_n_tags
 */
ProductIngredients.prototype['ingredients_n_tags'] = undefined;

/**
 * @member {Array.<String>} ingredients_original_tags
 */
ProductIngredients.prototype['ingredients_original_tags'] = undefined;

/**
 * @member {Number} ingredients_percent_analysis
 */
ProductIngredients.prototype['ingredients_percent_analysis'] = undefined;

/**
 * Number of sweeteners additives in the ingredients. Undefined if ingredients are not specified. 
 * @member {Number} ingredients_sweeteners_n
 */
ProductIngredients.prototype['ingredients_sweeteners_n'] = undefined;

/**
 * Number of non-nutritive sweeteners additives (as specified in the Nutri-Score formula) in the ingredients. Undefined if ingredients are not specified. 
 * @member {Number} ingredients_non_nutritive_sweeteners_n
 */
ProductIngredients.prototype['ingredients_non_nutritive_sweeteners_n'] = undefined;

/**
 * @member {Array.<String>} ingredients_tags
 */
ProductIngredients.prototype['ingredients_tags'] = undefined;

/**
 * Language that was used to parse the ingredient list. If `ingredients_text` is available for the product main language (`lang`), `ingredients_lc=lang`, otherwise we look at `ingredients_text` fields for other languages and set `ingredients_lc` to the first non-empty `ingredient_text`. 
 * @member {String} ingredients_lc
 */
ProductIngredients.prototype['ingredients_lc'] = undefined;

/**
 * Ingredients text in Italian
 * @member {String} ingredients_text_it
 */
ProductIngredients.prototype['ingredients_text_it'] = undefined;

/**
 * Ingredients text in English
 * @member {String} ingredients_text_en
 */
ProductIngredients.prototype['ingredients_text_en'] = undefined;

/**
 * Raw list of ingredients. This will get automatically parsed and get used to compute the Eco-Score or find allergens, etc..  It's a copy of ingredients_text in the main language of the product (see `lang` proprety). 
 * @member {String} ingredients_text
 */
ProductIngredients.prototype['ingredients_text'] = undefined;

/**
 * @member {String} ingredients_text_with_allergens
 */
ProductIngredients.prototype['ingredients_text_with_allergens'] = undefined;

/**
 * Same text as `ingredients_text` but where allergens have HTML elements around them to identify them 
 * @member {String} ingredients_text_with_allergens_it
 */
ProductIngredients.prototype['ingredients_text_with_allergens_it'] = undefined;

/**
 * @member {Number} ingredients_that_may_be_from_palm_oil_n
 */
ProductIngredients.prototype['ingredients_that_may_be_from_palm_oil_n'] = undefined;

/**
 * @member {Array.<Object>} ingredients_that_may_be_from_palm_oil_tags
 */
ProductIngredients.prototype['ingredients_that_may_be_from_palm_oil_tags'] = undefined;

/**
 * @member {Number} ingredients_with_specified_percent_n
 */
ProductIngredients.prototype['ingredients_with_specified_percent_n'] = undefined;

/**
 * @member {Number} ingredients_with_specified_percent_sum
 */
ProductIngredients.prototype['ingredients_with_specified_percent_sum'] = undefined;

/**
 * @member {Number} ingredients_with_unspecified_percent_n
 */
ProductIngredients.prototype['ingredients_with_unspecified_percent_n'] = undefined;

/**
 * @member {Number} ingredients_with_unspecified_percent_sum
 */
ProductIngredients.prototype['ingredients_with_unspecified_percent_sum'] = undefined;

/**
 * @member {Number} known_ingredients_n
 */
ProductIngredients.prototype['known_ingredients_n'] = undefined;

/**
 * Origins of ingredients 
 * @member {String} origins
 */
ProductIngredients.prototype['origins'] = undefined;

/**
 * @member {Array.<Object>} origins_hierarchy
 */
ProductIngredients.prototype['origins_hierarchy'] = undefined;

/**
 * @member {String} origins_lc
 */
ProductIngredients.prototype['origins_lc'] = undefined;

/**
 * @member {Array.<Object>} origins_tags
 */
ProductIngredients.prototype['origins_tags'] = undefined;

/**
 * List of substances that might cause allergies that are present in trace amounts in the product (this does not include the ingredients, as they are not only present in trace amounts). It is taxonomized with the allergens taxonomy. 
 * @member {String} traces
 */
ProductIngredients.prototype['traces'] = undefined;

/**
 * @member {Array.<module:model/NumberStringObjectType>} traces_hierarchy
 */
ProductIngredients.prototype['traces_hierarchy'] = undefined;

/**
 * @member {String} traces_lc
 */
ProductIngredients.prototype['traces_lc'] = undefined;

/**
 * @member {Array.<module:model/NumberStringObjectType>} traces_tags
 */
ProductIngredients.prototype['traces_tags'] = undefined;

/**
 * @member {Number} unknown_ingredients_n
 */
ProductIngredients.prototype['unknown_ingredients_n'] = undefined;






export default ProductIngredients;

