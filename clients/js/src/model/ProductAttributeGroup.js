/**
 * Open Food Facts Open API
 * As a developer, the Open Food Facts API allows you to get information and contribute to the products database. You can create great apps to help people make better food choices and also provide data to enhance the database. 
 *
 * The version of the OpenAPI document: 2
 * Contact: reuse@openfoodfacts.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */

import ApiClient from '../ApiClient';

/**
 * The ProductAttributeGroup model module.
 * @module model/ProductAttributeGroup
 * @version 2
 */
class ProductAttributeGroup {
    /**
     * Constructs a new <code>ProductAttributeGroup</code>.
     * @alias module:model/ProductAttributeGroup
     */
    constructor() { 
        
        ProductAttributeGroup.initialize(this);
    }

    /**
     * Initializes the fields of this object.
     * This method is used by the constructors of any subclasses, in order to implement multiple inheritance (mix-ins).
     * Only for internal use.
     */
    static initialize(obj) { 
    }

    /**
     * Constructs a <code>ProductAttributeGroup</code> from a plain JavaScript object, optionally creating a new instance.
     * Copies all relevant properties from <code>data</code> to <code>obj</code> if supplied or a new instance if not.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @param {module:model/ProductAttributeGroup} obj Optional instance to populate.
     * @return {module:model/ProductAttributeGroup} The populated <code>ProductAttributeGroup</code> instance.
     */
    static constructFromObject(data, obj) {
        if (data) {
            obj = obj || new ProductAttributeGroup();

            if (data.hasOwnProperty('id')) {
                obj['id'] = ApiClient.convertToType(data['id'], 'String');
            }
            if (data.hasOwnProperty('status')) {
                obj['status'] = ApiClient.convertToType(data['status'], 'String');
            }
            if (data.hasOwnProperty('title')) {
                obj['title'] = ApiClient.convertToType(data['title'], 'String');
            }
            if (data.hasOwnProperty('match')) {
                obj['match'] = ApiClient.convertToType(data['match'], 'Number');
            }
            if (data.hasOwnProperty('grade')) {
                obj['grade'] = ApiClient.convertToType(data['grade'], 'String');
            }
            if (data.hasOwnProperty('name')) {
                obj['name'] = ApiClient.convertToType(data['name'], 'String');
            }
            if (data.hasOwnProperty('icon_url')) {
                obj['icon_url'] = ApiClient.convertToType(data['icon_url'], 'String');
            }
            if (data.hasOwnProperty('description')) {
                obj['description'] = ApiClient.convertToType(data['description'], 'String');
            }
            if (data.hasOwnProperty('description_short')) {
                obj['description_short'] = ApiClient.convertToType(data['description_short'], 'String');
            }
        }
        return obj;
    }

    /**
     * Validates the JSON data with respect to <code>ProductAttributeGroup</code>.
     * @param {Object} data The plain JavaScript object bearing properties of interest.
     * @return {boolean} to indicate whether the JSON data is valid with respect to <code>ProductAttributeGroup</code>.
     */
    static validateJSON(data) {
        // ensure the json data is a string
        if (data['id'] && !(typeof data['id'] === 'string' || data['id'] instanceof String)) {
            throw new Error("Expected the field `id` to be a primitive type in the JSON string but got " + data['id']);
        }
        // ensure the json data is a string
        if (data['status'] && !(typeof data['status'] === 'string' || data['status'] instanceof String)) {
            throw new Error("Expected the field `status` to be a primitive type in the JSON string but got " + data['status']);
        }
        // ensure the json data is a string
        if (data['title'] && !(typeof data['title'] === 'string' || data['title'] instanceof String)) {
            throw new Error("Expected the field `title` to be a primitive type in the JSON string but got " + data['title']);
        }
        // ensure the json data is a string
        if (data['grade'] && !(typeof data['grade'] === 'string' || data['grade'] instanceof String)) {
            throw new Error("Expected the field `grade` to be a primitive type in the JSON string but got " + data['grade']);
        }
        // ensure the json data is a string
        if (data['name'] && !(typeof data['name'] === 'string' || data['name'] instanceof String)) {
            throw new Error("Expected the field `name` to be a primitive type in the JSON string but got " + data['name']);
        }
        // ensure the json data is a string
        if (data['icon_url'] && !(typeof data['icon_url'] === 'string' || data['icon_url'] instanceof String)) {
            throw new Error("Expected the field `icon_url` to be a primitive type in the JSON string but got " + data['icon_url']);
        }
        // ensure the json data is a string
        if (data['description'] && !(typeof data['description'] === 'string' || data['description'] instanceof String)) {
            throw new Error("Expected the field `description` to be a primitive type in the JSON string but got " + data['description']);
        }
        // ensure the json data is a string
        if (data['description_short'] && !(typeof data['description_short'] === 'string' || data['description_short'] instanceof String)) {
            throw new Error("Expected the field `description_short` to be a primitive type in the JSON string but got " + data['description_short']);
        }

        return true;
    }


}



/**
 * Unique id of the attribute.  It will be use to match against preferences parameters. 
 * @member {String} id
 */
ProductAttributeGroup.prototype['id'] = undefined;

/**
 * wether we have the information to really compute this criteria or not.
 * @member {module:model/ProductAttributeGroup.StatusEnum} status
 */
ProductAttributeGroup.prototype['status'] = undefined;

/**
 * A descriptive sentence about the situation of the product concerning attribute 
 * @member {String} title
 */
ProductAttributeGroup.prototype['title'] = undefined;

/**
 * a numeric value for the match, telling how much the products ranks well for this particular attribute. The higher the value, the better the match. 
 * @member {Number} match
 */
ProductAttributeGroup.prototype['match'] = undefined;

/**
 * every attribute as a grade for a to e
 * @member {module:model/ProductAttributeGroup.GradeEnum} grade
 */
ProductAttributeGroup.prototype['grade'] = undefined;

/**
 * The name of attribute, for eventual display
 * @member {String} name
 */
ProductAttributeGroup.prototype['name'] = undefined;

/**
 * an icon representing the attribute match (often using a color)
 * @member {String} icon_url
 */
ProductAttributeGroup.prototype['icon_url'] = undefined;

/**
 * An eventual description of the value of the property upon which this attribute is based
 * @member {String} description
 */
ProductAttributeGroup.prototype['description'] = undefined;

/**
 * An eventual short description of the value of the property upon which this attribute is based
 * @member {String} description_short
 */
ProductAttributeGroup.prototype['description_short'] = undefined;





/**
 * Allowed values for the <code>status</code> property.
 * @enum {String}
 * @readonly
 */
ProductAttributeGroup['StatusEnum'] = {

    /**
     * value: "known"
     * @const
     */
    "known": "known",

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown"
};


/**
 * Allowed values for the <code>grade</code> property.
 * @enum {String}
 * @readonly
 */
ProductAttributeGroup['GradeEnum'] = {

    /**
     * value: "unknown"
     * @const
     */
    "unknown": "unknown",

    /**
     * value: "a"
     * @const
     */
    "a": "a",

    /**
     * value: "b"
     * @const
     */
    "b": "b",

    /**
     * value: "c"
     * @const
     */
    "c": "c",

    /**
     * value: "d"
     * @const
     */
    "d": "d",

    /**
     * value: "e"
     * @const
     */
    "e": "e"
};



export default ProductAttributeGroup;

