/**
 * Open Food Facts Open API
 * As a developer, the Open Food Facts API allows you to get information and contribute to the products database. You can create great apps to help people make better food choices and also provide data to enhance the database. 
 *
 * The version of the OpenAPI document: 2
 * Contact: reuse@openfoodfacts.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import AddOrEditAProductResponse from '../model/AddOrEditAProductResponse';
import AddPhotoToExistingProductResponse from '../model/AddPhotoToExistingProductResponse';
import RotateAPhotoResponse from '../model/RotateAPhotoResponse';

/**
* WriteRequests service.
* @module api/WriteRequestsApi
* @version 2
*/
export default class WriteRequestsApi {

    /**
    * Constructs a new WriteRequestsApi. 
    * @alias module:api/WriteRequestsApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the getCgiProductImageCropPl operation.
     * @callback module:api/WriteRequestsApi~getCgiProductImageCropPlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/RotateAPhotoResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Rotate A Photo
     * Although we recommend rotating photos manually and uploading a new version of the image, the OFF API allows you to make api calls to automate this process. You can rotate existing photos by setting the angle to 90º, 180º, or 270º clockwise. 
     * @param {String} code Barcode of the product
     * @param {String} id 
     * @param {String} imgid 
     * @param {String} angle 
     * @param {module:api/WriteRequestsApi~getCgiProductImageCropPlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/RotateAPhotoResponse}
     */
    getCgiProductImageCropPl(code, id, imgid, angle, callback) {
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling getCgiProductImageCropPl");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling getCgiProductImageCropPl");
      }
      // verify the required parameter 'imgid' is set
      if (imgid === undefined || imgid === null) {
        throw new Error("Missing the required parameter 'imgid' when calling getCgiProductImageCropPl");
      }
      // verify the required parameter 'angle' is set
      if (angle === undefined || angle === null) {
        throw new Error("Missing the required parameter 'angle' when calling getCgiProductImageCropPl");
      }

      let pathParams = {
      };
      let queryParams = {
        'code': code,
        'id': id,
        'imgid': imgid,
        'angle': angle
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = [];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = RotateAPhotoResponse;
      return this.apiClient.callApi(
        '/cgi/product_image_crop.pl', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getCgiProductImageUploadPl operation.
     * @callback module:api/WriteRequestsApi~getCgiProductImageUploadPlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddPhotoToExistingProductResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a Photo to an Existing Product
     * Photos are source and proof of data. The first photo uploaded for a product is auto-selected as the product’s “front” photo.' 
     * @param {String} code Barcode of the product 
     * @param {String} imagefield Indicates the type of the image and the corresponding language. It should be in the format `{IMAGE_TYPE}_{LANG}` format, where `IMAGE_TYPE` is one of `front|ingredients|nutrition|packaging|other` and `LANG` is the 2 letter language code. Use `other` if you don't want the image to be selected. Note that the first image of a product is always selected as front picture. 
     * @param {File} imgupload_front_en This field must contain image binary content. The format and extension must be one of gif|jpeg|jpg|png|heic.             This field is dynamic and dependent on the value of imagefield in the request body. It wil be imgupload_the value of the imagefield stated earlier. For example, if `imagefield=front_en`, the name of this field should be `imageupload_front_en`. 
     * @param {module:api/WriteRequestsApi~getCgiProductImageUploadPlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddPhotoToExistingProductResponse}
     */
    getCgiProductImageUploadPl(code, imagefield, imgupload_front_en, callback) {
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling getCgiProductImageUploadPl");
      }
      // verify the required parameter 'imagefield' is set
      if (imagefield === undefined || imagefield === null) {
        throw new Error("Missing the required parameter 'imagefield' when calling getCgiProductImageUploadPl");
      }
      // verify the required parameter 'imgupload_front_en' is set
      if (imgupload_front_en === undefined || imgupload_front_en === null) {
        throw new Error("Missing the required parameter 'imgupload_front_en' when calling getCgiProductImageUploadPl");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'code': code,
        'imagefield': imagefield,
        'imgupload_front_en': imgupload_front_en
      };

      let authNames = ['userAgentAuth', 'cookieAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddPhotoToExistingProductResponse;
      return this.apiClient.callApi(
        '/cgi/product_image_upload.pl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCgiProductImageCropPl operation.
     * @callback module:api/WriteRequestsApi~postCgiProductImageCropPlCallback
     * @param {String} error Error message, if any.
     * @param {Object} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Crop A Photo
     * Cropping is only relevant for editing existing products. You cannot crop an image the first time you upload it to the system. 
     * @param {String} code Barcode of the product.
     * @param {Number} imgid identifier of the image to select, it should be a number
     * @param {String} id identifier of the selected image field, should be in the format `{IMAGE_TYPE}_{LANG}` format, where `IMAGE_TYPE` is one of `front|ingredients|nutrition|packaging|other` and `LANG` is the 2 letter language code. Note that if you select an image for the main language of the product (ex: `ingredients_it` if `it` is the main language), this image will be displayed on Product Opener for all languages (ex: on `https://fr.openfoodfacts.org`, unless `ingredients_fr` exists). 
     * @param {Object} opts Optional parameters
     * @param {Number} [x1] X origin coordinate of the crop, it must be lower than x2
     * @param {Number} [y1] Y origin coordinate of the crop, it must be lower than y2
     * @param {Number} [x2] X end coordinate of the crop, it must be higher than x1
     * @param {Number} [y2] Y end coordinate of the crop, it must be higher than y1
     * @param {Number} [angle] angle of the rotation to apply on the selected image. passing `90` as value rotate the image 90 degrees counter-clockwise. 
     * @param {module:model/String} [normalize] whether the selected image should be normalized using ImageMagick
     * @param {module:model/String} [white_magic = 'false')] whether the source image should be white magiced (background removal) using ImageMagick. 
     * @param {module:api/WriteRequestsApi~postCgiProductImageCropPlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object}
     */
    postCgiProductImageCropPl(code, imgid, id, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling postCgiProductImageCropPl");
      }
      // verify the required parameter 'imgid' is set
      if (imgid === undefined || imgid === null) {
        throw new Error("Missing the required parameter 'imgid' when calling postCgiProductImageCropPl");
      }
      // verify the required parameter 'id' is set
      if (id === undefined || id === null) {
        throw new Error("Missing the required parameter 'id' when calling postCgiProductImageCropPl");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'code': code,
        'imgid': imgid,
        'id': id,
        'x1': opts['x1'],
        'y1': opts['y1'],
        'x2': opts['x2'],
        'y2': opts['y2'],
        'angle': opts['angle'],
        'normalize': opts['normalize'],
        'white_magic': opts['white_magic']
      };

      let authNames = [];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = Object;
      return this.apiClient.callApi(
        '/cgi/product_image_crop.pl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the postCgiProductJqm2Pl operation.
     * @callback module:api/WriteRequestsApi~postCgiProductJqm2PlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/AddOrEditAProductResponse} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add or Edit A Product
     * This updates a product.  Note: If the barcode exists then you will be editing the existing product, However if it doesn''t you will be creating a new product with that unique barcode, and adding properties to the product. 
     * @param {String} code The barcode of the product to be added or edited
     * @param {String} user_id A valid username.
     * @param {String} password A valid corresponding password (related to specific environment).
     * @param {Object} opts Optional parameters
     * @param {String} [comment] A comment on the contribution. Adding meaningful comments help moderators and users understand a single product history. 
     * @param {Array.<String>} [brands] The brands of the product (comma separated list of values).
     * @param {Array.<String>} [labels] The labels of the product (comma separated list of values).
     * @param {Array.<String>} [categories] The categories of the product (comma separated list of values).
     * @param {String} [packaging] Packaging type, format, material. The [v3 API documentation](https://openfoodfacts.github.io/openfoodfacts-server/api/ref-v3/#operation/post-api-v3-product-barcode) has a more structured data for `packaging`. 
     * @param {String} [app_name] Name of the app providing the information 
     * @param {String} [app_version] Version of the app providing the information 
     * @param {String} [app_uuid] When an app uses a single user to log its contributions, it might be interesting to know which user of the app is providing the information. You can use this field to provide an identifier (eg: an sha1 of the username) that's privacy preserving. Make sure that your salt is strong, perfectly random and secret  In case we have trouble with one of your user, it helps our moderators revert edits. 
     * @param {String} [User_Agent] It is required that you pass a specific User-Agent header when you do an API request. But some times it's not possible to modify such a header (eg. request using JavaScript in a browser). In such cases, you can override it with this parameter. 
     * @param {module:api/WriteRequestsApi~postCgiProductJqm2PlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/AddOrEditAProductResponse}
     */
    postCgiProductJqm2Pl(code, user_id, password, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'code' is set
      if (code === undefined || code === null) {
        throw new Error("Missing the required parameter 'code' when calling postCgiProductJqm2Pl");
      }
      // verify the required parameter 'user_id' is set
      if (user_id === undefined || user_id === null) {
        throw new Error("Missing the required parameter 'user_id' when calling postCgiProductJqm2Pl");
      }
      // verify the required parameter 'password' is set
      if (password === undefined || password === null) {
        throw new Error("Missing the required parameter 'password' when calling postCgiProductJqm2Pl");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
        'code': code,
        'user_id': user_id,
        'password': password,
        'comment': opts['comment'],
        'brands': this.apiClient.buildCollectionParam(opts['brands'], 'csv'),
        'labels': this.apiClient.buildCollectionParam(opts['labels'], 'csv'),
        'categories': this.apiClient.buildCollectionParam(opts['categories'], 'csv'),
        'packaging': opts['packaging'],
        'app_name': opts['app_name'],
        'app_version': opts['app_version'],
        'app_uuid': opts['app_uuid'],
        'User-Agent': opts['User_Agent']
      };

      let authNames = ['userAgentAuth', 'cookieAuth'];
      let contentTypes = ['multipart/form-data'];
      let accepts = ['application/json'];
      let returnType = AddOrEditAProductResponse;
      return this.apiClient.callApi(
        '/cgi/product_jqm2.pl', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
