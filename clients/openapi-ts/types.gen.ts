// This file is auto-generated by @hey-api/openapi-ts

/**
 * Schema for application credentials
 */
export type AppCredentials = {
    /**
     * Name of the application
     */
    app_name: string;
    /**
     * Version of the application
     */
    app_version: string;
    /**
     * A salted random uuid (Unique identifier) for the user so that Open Food Facts moderators
     * can selectively ban any problematic user without banning your whole app account.
     *
     */
    app_uuid: string;
};

export type Ingredient = {
    ciqual_food_code?: string;
    ciqual_proxy_food_code?: string;
    ecobalyse_code?: string;
    from_palm_oil?: string;
    id?: string;
    /**
     * This structure gives the different ingredients and some information about them,
     * like estimate on their quantity.
     *
     */
    ingredients?: Array<Ingredient>;
    /**
     * The percentage of the ingredient.
     */
    percent?: number;
    is_in_taxonomy?: number;
    /**
     * Estimated percentage of the ingredient.
     */
    percent_estimate?: number;
    /**
     * Maximum percentage of the ingredient.
     */
    percent_max?: string | number;
    /**
     * Minimum percentage of the ingredient.
     */
    percent_min?: number;
    /**
     * Text description of the ingredient.
     */
    text?: string;
    /**
     * Indicates if the ingredient is vegan.
     */
    vegan?: string;
    /**
     * Indicates if the ingredient is vegetarian.
     */
    vegetarian?: string;
};

export type Nutrient = {
    /**
     * id of the nutrient
     */
    id?: string;
    /**
     * Name of the nutrient in the requested language
     */
    name?: string;
    /**
     * Indicates if the nutrient is always shown on the nutrition facts table
     */
    important?: boolean;
    /**
     * Indicates if the nutrient should be shown in the nutrition facts edit form
     */
    display_in_edit_form?: boolean;
    /**
     * Default unit of the nutrient
     */
    unit?: 'g' | 'mg' | 'μg' | 'cl' | 'ml' | 'dv' | '% vol' | '%';
    /**
     * Nutrients and sub-nutrients of a product, with their name and default unit.
     * (e.g. saturated-fat is a sub-nutrient of fat).
     *
     */
    nutrients?: Array<Nutrient>;
};

/**
 * Default unit of the nutrient
 */
export type unit = 'g' | 'mg' | 'μg' | 'cl' | 'ml' | 'dv' | '% vol' | '%';

export type Parameterangle = string;

/**
 * 2 letter code of the country of the user. Used for localizing some fields in returned values (e.g. knowledge panels). If not passed, the country may be inferred by the IP address of the request.
 */
export type Parametercc = string;

/**
 * Barcode of the product
 */
export type Parametercode = string;

/**
 * Specific fields to return. Use 'knowledge_panels' for Knowledge Panels only.
 */
export type Parameterfields = string;

export type Parameterid = string;

export type Parameterimgid = string;

/**
 * When knowledge_panels are requested, you can specify which panels to exclude from the response. All the others will be included.
 * If a panel is both excluded and included (with the knowledge_panels_excluded parameter), it will be excluded.
 *
 */
export type Parameterknowledge_panels_excluded = string;

/**
 * When knowledge_panels are requested, you can specify which panels should be in the response. All the others will be excluded.
 *
 */
export type Parameterknowledge_panels_included = string;

/**
 * 2 letter code of the language of the user.
 * Used for localizing some fields in returned values (e.g. knowledge panels).
 * If not passed, the language may be inferred by the Accept-Language header of the request,
 * or from the domain name prefix.
 *
 */
export type Parameterlc = string;

export type Parameterocr_engine = string;

/**
 * The page number you request to view (eg. in search results spanning multiple pages)
 *
 */
export type Parameterpage = number;

/**
 * The number of elements should be sent per page
 *
 */
export type Parameterpage_size = number;

export type Parameterprocess_image = string;

/**
 * The allowed values  used to sort/order the search results.
 *
 * * `product_name` sorts on name
 * * `ecoscore_score`, `nova_score`, `nutriscore_score` rank on the [Eco-Score](https://world.openfoodfacts.org/eco-score-the-environmental-impact-of-food-products), [Nova](https://world.openfoodfacts.org/nova), or [Nutri-Score](https://world.openfoodfacts.org/nutriscore)
 * * `scans_n`, `unique_scans_n` and `popularity_key` are about product popularity: number of scans on unique scans, rank of product
 * * `created_t`, `last_modified_t`, are about creation and modification dates
 * * `nothing`, tells not to sort at all (because if you do not provide the sort_by argument we default to sorting on popularity (for food) or last modification date)
 *
 */
export type Parametersort_by = 'product_name' | 'last_modified_t' | 'scans_n' | 'unique_scans_n' | 'created_t' | 'completeness' | 'popularity_key' | 'nutriscore_score' | 'nova_score' | 'nothing' | 'ecoscore_score';

export type Parametertagtype = string;

export type Parameterterm = string;

/**
 * This is all the fields describing a product and how to display it on a page.
 *
 * Refer to the different sub schema for more readable entries:
 *
 * * [Product Base](#cmp--schemas-product-base): Base fields of a product
 * * [Product Misc](#cmp--schemas-product-misc): Miscellaneous but important fields of a product
 * * [Product Tags](#cmp--schemas-product-tags): Tags fields on a product
 * * [Product Images](#cmp--schemas-product-images): Information about Images of a product
 * * [Product Eco-Score](#cmp--schemas-product-ecoscore): Fields related to Eco-Score for a product
 * * [Product Ingredients](#cmp--schemas-product-ingredients): Fields about ingredients of a product
 * * [Product Nutrition](#cmp--schemas-product-nutrition): Nutrition fields of a product
 * * [Product Data Quality](#cmp--schemas-product-quality): fields related to data quality for a product
 * * [Product Extended](#cmp--schemas-product-extended): TODO
 * * [Product Metadata](#cmp--schemas-product-meta): Metadata of a product (author, editors, etc.)
 * * [Product Knowledge Panels](#cmp--schemas-product-knowledge-panels): Knowledge panels for a product
 * * [Product Attribute Groups](#cmp--schemas-product-attribute-groups): Attribute groups for personal product matching
 *
 */
export type Product = Product_Base & Product_Misc & Product_Tags & Product_Images & Product_Eco_Score & Product_Ingredients & Product_Nutrition & Product_Nutriscore & Product_Quality & Product_Extended & Product_Metadata & Product_Knowledge_Panels & Product_Attribute_Groups;

/**
 * Specific data about a product to enable personal ranking
 *
 */
export type Product_Attribute_Groups = {
    /**
     * Each element is an attribute that can help compute a personal ranking for the product
     */
    attribute_groups?: Array<{
        /**
         * Unique id of the attribute.
         *
         * It will be use to match against preferences parameters.
         *
         */
        id?: string;
        /**
         * wether we have the information to really compute this criteria or not.
         */
        status?: 'known' | 'unknown';
        /**
         * A descriptive sentence about the situation of the product concerning attribute
         *
         */
        title?: string;
        /**
         * a numeric value for the match,
         * telling how much the products ranks well for this particular attribute.
         * The higher the value, the better the match.
         *
         */
        match?: number;
        /**
         * every attribute as a grade for a to e
         */
        grade?: 'unknown' | 'a' | 'b' | 'c' | 'd' | 'e';
        /**
         * The name of attribute, for eventual display
         */
        name?: string;
        /**
         * an icon representing the attribute match (often using a color)
         */
        icon_url?: string;
        /**
         * An eventual description of the value of the property upon which this attribute is based
         */
        description?: string;
        /**
         * An eventual short description of the value of the property upon which this attribute is based
         */
        description_short?: string;
    }>;
};

/**
 * Base product data
 *
 */
export type Product_Base = {
    /**
     * Abbreviated name in requested language
     */
    abbreviated_product_name?: string;
    /**
     * barcode of the product (can be EAN-13 or internal codes for some food stores),
     * for products without a barcode,
     * Open Food Facts assigns a number starting with the 200 reserved prefix
     *
     */
    code?: string;
    codes_tags?: Array<(string)>;
    generic_name_it?: string;
    /**
     * Legal name of the product as regulated
     * by the European authorities.
     *
     */
    generic_name?: string;
    /**
     * id in database of the product, this normally is the barcode
     */
    _id?: string;
    _keywords?: Array<(string)>;
    /**
     * internal identifier for the product, usually set to the value of `code`,
     * except on the producers platform where it is prefixed by the owner
     *
     */
    id?: string;
    /**
     * Main language of the product.
     * This is a duplicate of `lang` property (for historical reasons).
     *
     */
    lc?: string;
    /**
     * Main language of the product.
     *
     * This should be the main language of product packaging (if one is predominant).
     *
     * Main language is also used to decide which ingredients list to parse.
     *
     */
    lang?: string;
    /**
     * Nova group as an integer from 1 to 4. See https://world.openfoodfacts.org/nova
     *
     */
    nova_group?: number;
    nova_groups?: string;
    obsolete?: string;
    /**
     * A date at which the product was declared obsolete.
     * This means it's not produced any more.
     *
     */
    obsolete_since_date?: string;
    /**
     * The name of the product
     *
     */
    product_name?: string;
    /**
     * Italian name of the product
     *
     */
    product_name_it?: string;
    /**
     * The name of the product can also
     * be in many other languages like
     * product_name_fr (for French).
     *
     */
    product_name_en?: string;
    /**
     * The size in g or ml for the whole product.
     * It's a normalized version of the quantity field.
     *
     */
    product_quantity?: string;
    /**
     * The unit (either g or ml) for the correponding product_quantity.
     *
     */
    product_quantity_unit?: string;
    /**
     * Quantity and Unit.
     *
     */
    quantity?: string;
};

/**
 * Fields related to Eco-Score for a product.
 *
 * See also: `ecoscore_score`, `ecoscore_grade` and `ecoscore_tags`.
 *
 */
export type Product_Eco_Score = {
    /**
     * An object about a lot of details about data needed for Eco-Score computation
     * and complementary data of interest.
     *
     */
    ecoscore_data?: {
        adjustments?: {
            origins_of_ingredients?: {
                aggregated_origins?: Array<{
                    epi_score?: string;
                    origin?: string;
                    percent?: number;
                    transportation_score?: (number) | null;
                }>;
                epi_score?: number;
                epi_value?: number;
                origins_from_categories?: Array<(string)>;
                origins_from_origins_field?: Array<(string)>;
                transportation_score?: number;
                transportation_scores?: Product_Eco_Score_properties_ecoscore_data_properties_adjustments_properties_origins_of_ingredients_properties_values;
                transportation_value?: number;
                transportation_values?: Product_Eco_Score_properties_ecoscore_data_properties_adjustments_properties_origins_of_ingredients_properties_values;
                value?: number;
                values?: 'ad' | 'al' | 'at' | 'ax' | 'ba' | 'be' | 'bg' | 'ch' | 'cy' | 'cz' | 'de' | 'dk' | 'dz' | 'ee' | 'eg' | 'es' | 'fi' | 'fo' | 'fr' | 'gg' | 'gi' | 'gr' | 'hr' | 'hu' | 'ie' | 'il' | 'im' | 'is' | 'it' | 'je' | 'lb' | 'li' | 'lt' | 'lu' | 'lv' | 'ly' | 'ma' | 'mc' | 'md' | 'me' | 'mk' | 'mt' | 'nl' | 'no' | 'pl' | 'ps' | 'pt' | 'ro' | 'rs' | 'se' | 'si' | 'sj' | 'sk' | 'sm' | 'sy' | 'tn' | 'tr' | 'ua' | 'uk' | 'us' | 'va' | 'world' | 'xk';
                warning?: string;
            };
            packaging?: {
                non_recyclable_and_non_biodegradable_materials?: number;
                packagings?: Array<{
                    ecoscore_material_score?: number;
                    ecoscore_shape_ratio?: number;
                    material?: string;
                    shape?: string;
                    number_of_units?: number;
                    quantity_per_unit?: string;
                    quantity_per_unit_unit?: string;
                    quantity_per_unit_value?: number;
                    recycling?: string;
                    weight_measured?: number;
                }>;
                score?: number;
                value?: number;
                warning?: string;
            };
            production_system?: {
                labels?: Array<(string)>;
                value?: number;
                warning?: string;
            };
            threatened_species?: {
                ingredient?: string;
                value?: number;
            };
        };
        agribalyse?: {
            agribalyse_proxy_food_code?: string;
            agribalyse_food_code?: string;
            co2_agriculture?: number;
            co2_consumption?: number;
            co2_distribution?: number;
            co2_packaging?: number;
            co2_processing?: number;
            co2_total?: number;
            co2_transportation?: number;
            code?: string;
            dqr?: string;
            ef_agriculture?: number;
            ef_consumption?: number;
            ef_distribution?: number;
            ef_packaging?: number;
            ef_processing?: number;
            ef_total?: number;
            ef_transportation?: number;
            is_beverage?: number;
            /**
             * This can be returned in many other languages
             * like name_fr (for french).
             *
             */
            name_en?: string;
            score?: number;
            version?: string;
            warning?: string;
        };
        grade?: string;
        grades?: {
            [key: string]: unknown;
        };
        ecoscore_not_applicable_for_category?: string;
        missing?: {
            labels?: number;
            origins?: number;
            packagings?: number;
        };
        missing_data_warning?: number;
        previous_data?: {
            grade?: (string) | null;
            score?: (number) | null;
            agribalyse?: Product_Eco_Score_properties_ecoscore_data_properties_agribalyse;
        };
        score?: number;
        scores?: {
            [key: string]: unknown;
        };
        status?: string;
    };
    ecoscore_extended_data_version?: string;
    environment_impact_level?: string;
    environment_impact_level_tags?: Array<{
        [key: string]: unknown;
    }>;
};

export type values = 'ad' | 'al' | 'at' | 'ax' | 'ba' | 'be' | 'bg' | 'ch' | 'cy' | 'cz' | 'de' | 'dk' | 'dz' | 'ee' | 'eg' | 'es' | 'fi' | 'fo' | 'fr' | 'gg' | 'gi' | 'gr' | 'hr' | 'hu' | 'ie' | 'il' | 'im' | 'is' | 'it' | 'je' | 'lb' | 'li' | 'lt' | 'lu' | 'lv' | 'ly' | 'ma' | 'mc' | 'md' | 'me' | 'mk' | 'mt' | 'nl' | 'no' | 'pl' | 'ps' | 'pt' | 'ro' | 'rs' | 'se' | 'si' | 'sj' | 'sk' | 'sm' | 'sy' | 'tn' | 'tr' | 'ua' | 'uk' | 'us' | 'va' | 'world' | 'xk';

export type Product_Extended = {
    additives_original_tags?: Array<(string)>;
    additives_prev_original_tags?: Array<(string)>;
    added_countries_tags?: Array<{
        [key: string]: unknown;
    }>;
    allergens_from_ingredients?: string;
    allergens_from_user?: string;
    amino_acids_prev_tags?: Array<{
        [key: string]: unknown;
    }>;
    amino_acids_tags?: Array<{
        [key: string]: unknown;
    }>;
    carbon_footprint_percent_of_known_ingredients?: number;
    categories_properties?: {
        'agribalyse_food_code:en'?: string;
        'agribalyse_proxy_food_code:en'?: string;
        'ciqual_food_code:en'?: string;
    };
    categories_properties_tags?: Array<(string)>;
    category_properties?: {
        [key: string]: (string);
    };
    ciqual_food_name_tags?: Array<(string)>;
    /**
     * the category to use for comparison.
     *
     * **TODO** explain how it is chosen.
     *
     */
    compared_to_category?: string;
    conservation_conditions?: string;
    /**
     * Contact info of customer service.
     *
     */
    customer_service?: string;
    expiration_date?: string;
    /**
     * link to the product on the website of the producer
     *
     */
    link?: string;
    main_countries_tags?: Array<{
        [key: string]: unknown;
    }>;
    minerals_prev_tags?: Array<{
        [key: string]: unknown;
    }>;
    minerals_tags?: Array<{
        [key: string]: unknown;
    }>;
    /**
     * Those are fields provided by the producer (through producers platform),
     * and the value he provided.
     *
     */
    owner_fields?: {
        /**
         * you can retrieve all kind of properties, the same as on the parent object (the product).
         * It's not processed entries (like tags for example) but raw ones.
         *
         */
        additionalProperties?: (number | string | {
    [key: string]: unknown;
});
    };
    /**
     * Detail of ingredients or processing that makes the products having Nova 3 or 4
     *
     */
    nova_groups_markers?: {
        [key: string]: Array<Array<(string)>>;
    };
    nucleotides_tags?: Array<{
        [key: string]: unknown;
    }>;
    origin?: string;
    /**
     * Country, state, or city where the product can be purchased.
     *
     */
    purchase_places?: string;
    purchase_places_tags?: Array<(string)>;
    /**
     * Distributor name.
     *
     */
    stores?: string;
    stores_tags?: Array<(string)>;
    traces_from_ingredients?: string;
    traces_from_user?: string;
};

/**
 * Information about Images of a product.
 *
 * Images ensure the reliability of Open Food Facts data.
 * It provides a primary source and proof of all the structured data.
 * You may therefore want to display it along the structured information.
 *
 * See also tutorials about images:
 * * [Getting images](https://openfoodfacts.github.io/openfoodfacts-server/api/how-to-download-images/)
 * * [Uploading images](https://openfoodfacts.github.io/openfoodfacts-server/api/tutorial-uploading-photo-to-a-product/)
 *
 */
export type Product_Images = {
    image_front_small_url?: string;
    image_front_thumb_url?: string;
    image_front_url?: string;
    image_nutrition_small_url?: string;
    image_nutrition_thumb_url?: string;
    image_nutrition_url?: string;
    image_small_url?: string;
    image_thumb_url?: string;
    image_url?: string;
    /**
     * This contains properties for all images contained on the product.
     *
     */
    images?: {
        /**
         * property of an image (or part thereof) selected for a particular role and a particular language.
         *
         */
        front?: {
            /**
             * The angle of the image rotation (if it was rotated).
             */
            angle?: number;
            coordinates_image_size?: string;
            geometry?: string;
            /**
             * The id of the original/source image that was selected to edit(rotate, normalize etc) to produce this new image.
             */
            imgid?: string;
            /**
             * Normalize colors.
             */
            normalize?: (string | boolean) | null;
            rev?: string;
            /**
             * The available image sizes for the product (both reduced and full).
             * The reduced images are the ones with numbers as the key( 100, 200 etc)
             * while the full images have `full` as the key.
             *
             */
            sizes?: {
                /**
                 * properties of fullsize image
                 * **TODO** explain how to compute name
                 *
                 */
                '100'?: {
                    /**
                     * The height of the reduced/full image in pixels.
                     *
                     */
                    h?: number;
                    /**
                     * The width of the reduced/full image in pixels.
                     *
                     */
                    w?: number;
                };
                '200'?: Product_Images_properties_images_properties_front_properties_sizes_properties_100;
                '400'?: Product_Images_properties_images_properties_front_properties_sizes_properties_100;
                full?: Product_Images_properties_images_properties_front_properties_sizes_properties_100;
            };
            /**
             * Photo on white background : Try to remove the background.
             *
             */
            white_magic?: (string | boolean) | null;
            x1?: string;
            x2?: string;
            y1?: string;
            y2?: string;
        };
        /**
         * This object represent an image that was uploaded to a product.
         * "imgid" is an integer which is a sequential number unique to each picture.
         *
         */
        [key: string]: (unknown) | undefined;
    };
    last_image_dates_tags?: Array<(string)>;
    /**
     * timestamp of last image upload (or update?)
     */
    last_image_t?: number;
    /**
     * URL for selected (important) images of the product.
     *
     * This is very handy if you display the product to users.
     *
     */
    selected_images?: {
        ingredients?: Product_Images_properties_selected_images_properties_front;
        nutrition?: Product_Images_properties_selected_images_properties_front;
        packaging?: Product_Images_properties_selected_images_properties_front;
        /**
         * URLs of thumbnails image of image of type `image_type`
         */
        front?: {
            /**
             * Thumbnail urls of product image (front) adapted to display on product page
             *
             */
            display?: Product_Images_properties_selected_images_properties_front_properties_small;
            /**
             * Thumbnail urls of product image (front) adapted to display on product list page
             *
             */
            small?: {
                [key: string]: unknown;
            };
            /**
             * Thumbnail urls of product image (front) in smallest format
             *
             */
            thumb?: Product_Images_properties_selected_images_properties_front_properties_small;
        };
    };
};

/**
 * Fields about ingredients of a product
 */
export type Product_Ingredients = {
    additives_tags?: Array<(string)>;
    /**
     * comma separated list of allergens
     */
    allergens?: string;
    /**
     * language in which `allergens` where input
     */
    allergens_lc?: string;
    allergens_hierarchy?: Array<(string)>;
    allergens_tags?: Array<(string)>;
    ingredients?: Ingredient_properties_ingredients;
    ingredients_analysis?: {
        'en:palm-oil'?: Array<(string)>;
        'en:vegan-status-unknown'?: Array<(string)>;
        'en:vegetarian-status-unknown'?: Array<(string)>;
        'en:maybe-vegan'?: Array<(string)>;
        'en:maybe-vegetarian'?: Array<(string)>;
    };
    ingredients_analysis_tags?: Array<(string)>;
    ingredients_from_or_that_may_be_from_palm_oil_n?: number;
    ingredients_from_palm_oil_n?: number;
    ingredients_from_palm_oil_tags?: Array<{
        [key: string]: unknown;
    }>;
    ingredients_hierarchy?: Array<(string)>;
    ingredients_n?: number;
    ingredients_n_tags?: Array<(string)>;
    ingredients_original_tags?: Array<(string)>;
    ingredients_percent_analysis?: number;
    /**
     * Number of sweeteners additives in the ingredients. Undefined if ingredients are not specified.
     *
     */
    ingredients_sweeteners_n?: number;
    /**
     * Number of non-nutritive sweeteners additives (as specified in the Nutri-Score formula) in the ingredients. Undefined if ingredients are not specified.
     *
     */
    ingredients_non_nutritive_sweeteners_n?: number;
    ingredients_tags?: Array<(string)>;
    /**
     * Language that was used to parse the ingredient list. If `ingredients_text` is available
     * for the product main language (`lang`), `ingredients_lc=lang`, otherwise we look at
     * `ingredients_text` fields for other languages and set `ingredients_lc` to the first
     * non-empty `ingredient_text`.
     *
     */
    ingredients_lc?: string;
    /**
     * Ingredients text in Italian
     */
    ingredients_text_it?: string;
    /**
     * Ingredients text in English
     */
    ingredients_text_en?: string;
    /**
     * Raw list of ingredients. This will get automatically
     * parsed and get used to compute the Eco-Score or find allergens, etc..
     *
     * It's a copy of ingredients_text in the main language of the product (see `lang` proprety).
     *
     */
    ingredients_text?: string;
    ingredients_text_with_allergens?: string;
    /**
     * Same text as `ingredients_text` but where allergens have HTML elements around them to identify them
     *
     */
    ingredients_text_with_allergens_it?: string;
    ingredients_that_may_be_from_palm_oil_n?: number;
    ingredients_that_may_be_from_palm_oil_tags?: Array<{
        [key: string]: unknown;
    }>;
    ingredients_with_specified_percent_n?: number;
    ingredients_with_specified_percent_sum?: number;
    ingredients_with_unspecified_percent_n?: number;
    ingredients_with_unspecified_percent_sum?: number;
    known_ingredients_n?: number;
    /**
     * Origins of ingredients
     *
     */
    origins?: string;
    origins_hierarchy?: Array<{
        [key: string]: unknown;
    }>;
    origins_lc?: string;
    origins_tags?: Array<{
        [key: string]: unknown;
    }>;
    /**
     * List of substances that might cause allergies
     * that are present in trace amounts in the product
     * (this does not include the ingredients, as they
     * are not only present in trace amounts).
     * It is taxonomized with the allergens taxonomy.
     *
     */
    traces?: string;
    traces_hierarchy?: Array<({
    [key: string]: unknown;
} | string)>;
    traces_lc?: string;
    traces_tags?: Array<({
    [key: string]: unknown;
} | string)>;
    unknown_ingredients_n?: number;
};

/**
 * Knowledge panels for a product
 *
 */
export type Product_Knowledge_Panels = {
    /**
     * The panels object is a dictionary of individual panel objects.
     * Each key of the dictionary is the id of the panel, and the value is the panel object.
     *
     * Apps typically display a number of root panels with known panel ids (e.g. health_card and environment_card). Panels can reference other panels and display them as sub-panels.
     */
    readonly knowledge_panels?: {
        /**
         * Each panel contains an optional title and an optional array of elements.
         */
        additionalProperties?: {
            /**
             * Type of the panel. If set to "card", the panel and its sub-panels should be displayed in a card. If set to "inline", the panel should have its content always displayed.
             */
            type?: string;
            /**
             * If true, the panel is to be displayed already expanded. If false, only the title should be displayed, and the user should be able to click or tap it to open the panel and display the elements.
             */
            expanded?: boolean;
            /**
             * If set to "large", the content of the panel should be expanded on large screens, but it should still be possible to unexpand it.
             */
            expand_for?: string;
            /**
             * A simple assessment of the panel value, typically used to format fonts, et.c e.g. bad = red
             */
            evaluation?: 'good' | 'average' | 'neutral' | 'bad' | 'unknown';
            /**
             * The title of a panel.
             */
            title_element?: {
                /**
                 * A short name of this panel, not including any actual values
                 */
                name?: string;
                title?: string;
                /**
                 * Used to indicate how the value of this item is measured, such as "grade" for Nutri-Score and Eco-Score or "percentage" for Salt
                 */
                type?: 'grade' | 'percentage';
                /**
                 * The value for this panel where it corresponds to a A to E grade such as the Nutri-Score of the Eco-Score.
                 */
                grade?: 'a' | 'b' | 'c' | 'd' | 'e' | 'unknown';
                /**
                 * The numeric value of the panel, where the type is "percentage"
                 */
                value?: number;
                icon_url?: string;
                icon_color_from_evaluation?: string;
                /**
                 * If set to "small", the icon should be displayed at a small size.
                 *
                 */
                icon_size?: string;
            };
            /**
             * An ordered list of elements to display in the content of the panel.
             */
            elements?: Array<{
                /**
                 * The type of the included element object.
                 * The type also indicates which field contains the included element object.
                 * e.g. if the type is "text", the included element object will be in the "text_element" field.
                 *
                 * Note that in the future, new type of element may be added,
                 * so your code should ignore unrecognized types, and unknown properties.
                 *
                 * TODO: add Map type
                 *
                 */
                type: 'text' | 'image' | 'action' | 'panel' | 'panel_group' | 'table';
                /**
                 * A text in simple HTML format to display.
                 *
                 * For some specific texts that correspond to a product field (e.g. a product name, the ingredients list of a product),the edit_field_* fields are used to indicate how to edit the field value.
                 */
                text_element?: {
                    /**
                     * the type of text, might influence the way you display it.
                     *
                     */
                    type?: 'summary' | 'warning' | 'notes';
                    /**
                     * Text to display in HTML format.
                     */
                    html?: string;
                    /**
                     * Language of the text. The name of the language is returned in the language requested when making the API call. e.g. if the text is in Polish, and the requested language is French, the language field will contain "Polonais" (French for "Polish"). Only set for specific fields such as the list of ingredients of a product.
                     */
                    language?: string;
                    /**
                     * 2 letter language code for the text. Only set for specific fields such as the list of ingredients of a product.
                     */
                    lc?: string;
                    /**
                     * id of the field used to edit this text in the product edit API.
                     */
                    edit_field_id?: string;
                    /**
                     * Type of the product field.
                     */
                    edit_field_type?: string;
                    /**
                     * Current value of the product field. This may differ from the html field which can contain extra formating.
                     */
                    edit_field_value?: string;
                    /**
                     * Link to the source
                     */
                    source_url?: string;
                    /**
                     * name of the source
                     */
                    source_text?: string;
                    /**
                     * Source locale name
                     */
                    source_lc?: string;
                    /**
                     * Human readable source locale name
                     */
                    source_language?: string;
                };
                image_element?: {
                    /**
                     * full URL of the image
                     */
                    url?: string;
                    /**
                     * Width of the image.
                     *
                     * This is just a suggestion coming from the server,
                     * the client may choose to use its own dimensions for the image.
                     *
                     */
                    width?: number;
                    /**
                     * Height of the image.
                     *
                     * This is just a suggestion coming from the server,
                     * the client may choose to use its own dimensions for the image.
                     *
                     */
                    height?: number;
                    /**
                     * Alt Text of the image.
                     */
                    alt_text?: string;
                };
                action_element?: string;
                /**
                 * Panels can include other panels as sub-panels using the panel_element.
                 */
                panel_element?: {
                    /**
                     * The id of the panel to include. The id is the key of the panel in the panels object returned in the knowledge_panels field.
                     */
                    panel_id?: string;
                };
                /**
                 * The panel group element is used to display an optional title followed by a number of sub-panels.
                 */
                panel_group_element?: {
                    title?: string;
                    /**
                     * The ids of the panels to include. The ids are the keys of the panels in the panels object returned in the knowledge_panels field.
                     */
                    panel_ids?: Array<(string)>;
                };
                /**
                 * Element to display a table.
                 */
                table_element?: {
                    /**
                     * An id for the table.
                     */
                    id?: string;
                    /**
                     * Title of the column.
                     *
                     */
                    title?: string;
                    rows?: string;
                    columns?: Array<{
                        type?: string;
                        text?: string;
                        text_for_small_screens?: string;
                        style?: string;
                        column_group_id?: string;
                        shown_by_default?: boolean;
                    }>;
                };
            }>;
            /**
             * a message level, as levels we use in log.
             * It might help theming the panel visualy
             *
             */
            level?: string;
            /**
             * size is either empty (normal display)
             * or small to indicate a panel that should have a smaller font size
             *
             */
            size?: 'small';
            topics?: Array<(string)>;
        };
    };
};

/**
 * A simple assessment of the panel value, typically used to format fonts, et.c e.g. bad = red
 */
export type evaluation = 'good' | 'average' | 'neutral' | 'bad' | 'unknown';

/**
 * Used to indicate how the value of this item is measured, such as "grade" for Nutri-Score and Eco-Score or "percentage" for Salt
 */
export type type = 'grade' | 'percentage';

/**
 * The value for this panel where it corresponds to a A to E grade such as the Nutri-Score of the Eco-Score.
 */
export type grade = 'a' | 'b' | 'c' | 'd' | 'e' | 'unknown';

/**
 * size is either empty (normal display)
 * or small to indicate a panel that should have a smaller font size
 *
 */
export type size = 'small';

/**
 * Metadata of a product (author, editors, creation date, etc.)
 *
 */
export type Product_Metadata = {
    /**
     * Date when the product was added (UNIX timestamp format).
     * See also `entry_dates_tags`
     *
     */
    created_t?: number;
    /**
     * The contributor who added the product first.
     *
     */
    creator?: string;
    /**
     * List of editors who edited the product.
     *
     */
    editors_tags?: Array<(string)>;
    informers_tags?: Array<(string)>;
    interface_version_created?: string;
    interface_version_modified?: string;
    languages?: {
        [key: string]: unknown;
    };
    /**
     * Same as `languages` but by language code, instead of language tags
     *
     */
    languages_codes?: {
        [key: string]: unknown;
    };
    languages_hierarchy?: Array<(string)>;
    languages_tags?: Array<(string)>;
    last_edit_dates_tags?: Array<(string)>;
    last_editor?: string;
    /**
     * The username of the user who last modified the product.
     *
     */
    last_modified_by?: string;
    /**
     * Date when the product page was last modified.
     *
     */
    last_modified_t?: number;
    /**
     * Id of the producer in case he provides his own data about a product (producer platform).
     *
     */
    owner?: string;
    /**
     * Tagyfied version of owner
     *
     */
    owners_tags?: string;
    photographers_tags?: Array<(string)>;
    /**
     * revision number of this product version (each edit adds a revision)
     */
    rev?: number;
    sources?: Array<{
        fields?: Array<(string)>;
        id?: string;
        images?: Array<{
            [key: string]: unknown;
        }>;
        import_t?: number;
        manufacturer?: number | string;
        name?: string;
        source_licence?: string;
        source_licence_url?: string;
        url?: (string) | null;
    }>;
    sources_fields?: {
        'org-gs1'?: {
            gln?: string;
            gpcCategoryCode?: string;
            gpcCategoryName?: string;
            isAllergenRelevantDataProvided?: string;
            lastChangeDateTime?: string;
            partyName?: string;
            productionVariantDescription?: string;
            publicationDateTime?: string;
        };
    };
    teams?: string;
    teams_tags?: Array<(string)>;
    update_key?: string;
};

/**
 * Miscellaneous but important fields of a product
 *
 */
export type Product_Misc = {
    /**
     * Number of food additives.
     *
     */
    additives_n?: number;
    checked?: string;
    complete?: number;
    completeness?: number;
    /**
     * See also: `ecoscore_tags`
     *
     */
    ecoscore_grade?: string;
    /**
     * See also: `ecoscore_tags`
     *
     */
    ecoscore_score?: number;
    food_groups?: string;
    food_groups_tags?: Array<(string)>;
    /**
     * Traffic light indicators on main nutrients levels
     *
     */
    nutrient_levels?: {
        fat?: 'low' | 'moderate' | 'high';
        salt?: 'low' | 'moderate' | 'high';
        'saturated-fat'?: 'low' | 'moderate' | 'high';
        sugars?: 'low' | 'moderate' | 'high';
    };
    /**
     * Recycling instructions as raw text, e.g. Plastic
     * bottle to recycle, Plastic cap to recycle.
     * This will get automatically parsed and
     * will be used to compute the Eco-Score.
     * You can either request it (if it exists) or
     * send it in a specific language.
     *
     */
    packaging_text?: string;
    /**
     * The packagings object is an array of individual packaging component objects.
     *
     * The Packaging data document explains how packaging data is structured in Open Food Facts: https://openfoodfacts.github.io/openfoodfacts-server/dev/explain-packaging-data/
     *
     * The shape, material and recycling properties of each packaging component are linked to entries in the packaging_shapes, packaging_materials and packaging_recycling taxonomies:
     *
     * https://world.openfoodfacts.org/data/taxonomies/packaging_shapes.json
     * https://world.openfoodfacts.org/data/taxonomies/packaging_materials.json
     * https://world.openfoodfacts.org/data/taxonomies/packaging_recycling.json
     *
     * If the tags_lc field is set, the properties will include a lc_name field with the translation in the requested language.
     */
    readonly packagings?: Array<{
        /**
         * umber of units of this packaging component contained in the product (e.g. 6 for a pack of 6 bottles)
         */
        number_of_units?: number;
        shape?: string;
        material?: string;
        recycling?: string;
        /**
         * Quantity (weight or volume) of food product contained in the packaging component. (e.g. 75cl for a wine bottle)
         */
        quantity_per_unit?: string;
        /**
         * Value parsed from the quantity field.
         */
        quantity_per_unit_value?: number;
        /**
         * Unit parsed and normalized from the quantity field.
         */
        quantity_per_unit_unit?: string;
        /**
         * Weight (as specified by the manufacturer) of one unit of the empty packaging component (in grams). (e.g. for a 6 pack of 1.5l water bottles, it might be 30, the weight in grams of 1 empty water bottle without its cap which is a different packaging component).
         */
        weight_specified?: number;
        /**
         * Weight (as measured by one or more users) of one unit of the empty packaging component (in grams). (e.g. for a 6 pack of 1.5l water bottles, it might be 30, the weight in grams of 1 empty water bottle without its cap which is a different packaging component).
         */
        weight_measured?: number;
        /**
         * Weight (as estimated from similar products) of one unit of the empty packaging component (in grams). (e.g. for a 6 pack of 1.5l water bottles, it might be 30, the weight in grams of 1 empty water bottle without its cap which is a different packaging component).
         */
        weight_estimated?: number;
        /**
         * Weight of one unit of the empty packaging component.
         */
        weight?: number;
        /**
         * Indicates which field was used to populate the "weight" field. Either "specified", "measured", or "estimated"
         */
        weight_source_id?: string;
    }>;
    /**
     * Indicate if the packagings array contains all the packaging parts of the product. This field can be set by users when they enter or verify packaging data. Possible values are 0 or 1.
     */
    packagings_complete?: number;
    /**
     * Category of food according to [French Nutrition and Health Program](https://fr.wikipedia.org/wiki/Programme_national_nutrition_sant%C3%A9)
     *
     */
    pnns_groups_1?: string;
    pnns_groups_1_tags?: Array<(string)>;
    /**
     * Sub Category of food according to [French Nutrition and Health Program](https://fr.wikipedia.org/wiki/Programme_national_nutrition_sant%C3%A9)
     *
     */
    pnns_groups_2?: string;
    pnns_groups_2_tags?: Array<(string)>;
    /**
     * An imprecise measurement of popularity based on Scan statistics. A higher value means higher popularity.
     *
     */
    popularity_key?: number;
    /**
     * Indicators for the popularity of a product, like the amount of scans in a specific year.
     *
     */
    popularity_tags?: Array<(string)>;
    scans_n?: number;
    unique_scans_n?: number;
    /**
     * Normalized version of serving_size.
     * Note that this is NOT the number of servings by product.
     * <small>(in perl, see `normalize_serving_size`)</small>
     *
     */
    serving_quantity?: string;
    /**
     * The unit (either g or ml) for the correponding serving_quantity.
     *
     */
    serving_quantity_unit?: string;
    /**
     * Serving size text (generally in g or ml).
     * We expect a quantity + unit but the user is free to input any string.
     *
     */
    serving_size?: string;
};

export type fat = 'low' | 'moderate' | 'high';

export type salt = 'low' | 'moderate' | 'high';

export type saturated_fat = 'low' | 'moderate' | 'high';

export type sugars = 'low' | 'moderate' | 'high';

export type Product_Nutriscore = {
    nutriscore?: {
        '2021'?: ({
    category_available?: 0 | 1;
    grade?: Product_Nutriscore_properties_nutriscore_tags_items;
    nutrients_available?: 0 | 1;
    nutriscore_applicable?: 0 | 1;
    nutriscore_computed?: 0 | 1;
    score?: number;
} & {
    data?: Product_Nutriscore_properties_nutriscore_data;
});
        '2023'?: (Product_Nutriscore_properties_nutriscore_properties_2021_allOf_0 & {
    data?: (Product_Nutriscore_properties_nutriscore_data_allOf_0_allOf_0 & {
    is_fat_oil_nuts_seeds?: 0 | 1;
    is_red_meat_product?: 0 | 1;
    components?: {
        negative?: Array<{
            id?: string;
            points?: number;
            points_max?: number;
            unit?: string;
            value?: (number) | null;
        }>;
        positive?: Array<Product_Nutriscore_properties_nutriscore_properties_2023_allOf_1_properties_data_allOf_1_properties_components_properties_negative_items>;
    };
    count_proteins?: number;
    count_proteins_reason?: string;
    negative_points?: number;
    positive_points?: number;
    negative_points_max?: number;
    positive_points_max?: number;
    positive_nutrients?: Array<(string)>;
});
});
    };
    nutriscore_2021_tags?: Product_Nutriscore_properties_nutriscore_tags;
    nutriscore_2023_tags?: Product_Nutriscore_properties_nutriscore_tags;
    nutriscore_data?: (({
    is_beverage?: 0 | 1;
    is_cheese?: 0 | 1;
    is_water?: 0 | 1;
} & {
    is_fat?: 0 | 1;
    energy?: number;
    energy_points?: number;
    energy_value?: number;
    fiber?: number;
    fiber_points?: number;
    fiber_value?: number;
    fruits_vegetables_nuts_colza_walnut_olive_oils?: number;
    fruits_vegetables_nuts_colza_walnut_olive_oils_points?: number;
    fruits_vegetables_nuts_colza_walnut_olive_oils_value?: number;
    proteins?: number;
    proteins_points?: number;
    proteins_value?: number;
    saturated_fat?: number;
    saturated_fat_points?: number;
    saturated_fat_value?: number;
    sodium?: number;
    sodium_points?: number;
    sodium_value?: number;
    sugars?: number;
    sugars_points?: number;
    sugars_value?: number;
    negative_points?: number;
    positive_points?: number;
}) & {
    grade?: Product_Nutriscore_properties_nutriscore_tags_items;
    score?: number;
});
    nutriscore_grade?: Product_Nutriscore_properties_nutriscore_tags_items;
    /**
     * Nutri-Score for the product as an integer (see also `nutriscore_grade`).
     *
     */
    nutriscore_score?: number;
    nutriscore_score_opposite?: number;
    nutriscore_tags?: Array<('a' | 'b' | 'c' | 'd' | 'e')>;
    nutriscore_version?: string;
};

export type category_available = 0 | 1;

export type nutrients_available = 0 | 1;

export type nutriscore_applicable = 0 | 1;

export type nutriscore_computed = 0 | 1;

export type is_fat_oil_nuts_seeds = 0 | 1;

export type is_red_meat_product = 0 | 1;

export type is_beverage = 0 | 1;

export type is_cheese = 0 | 1;

export type is_water = 0 | 1;

export type is_fat = 0 | 1;

/**
 * Nutrition fields of a product
 *
 * Most of these properties are read-only.
 *
 * See [how to add nutrition data](https://openfoodfacts.github.io/openfoodfacts-server/api/ref-cheatsheet/#add-nutrition-facts-values-units-and-base)
 *
 */
export type Product_Nutrition = {
    /**
     * When a product does not have nutrition data displayed on the
     * packaging, the user can check the field "Nutrition facts are
     * not specified on the product".
     * By doing so, the no_nutrition_data field takes the value "on".
     * This case is frequent (thousands of products).
     *
     */
    no_nutrition_data?: string;
    /**
     * The nutrition data on the package can be per serving or per 100g.
     *
     * This is essential to understand if `<nutrient>_value` and `<nutrient>`
     * values in `nutriments` applies for a serving or for 100g.
     *
     * **IMPORTANT:**
     * When writing products,
     * this setting applies to all existing nutrients values for the product,
     * not only the nutrient values sent in the write request.
     * So it should not be changed unless all nutrients values are provided
     * with values that match the nutrition_data_per field.
     *
     */
    nutrition_data_per?: 'serving' | '100g';
    /**
     * The nutrition data for prepared product on the package (if any) can be per serving or per 100g.
     *
     * This is essential to understand if `<nutrient>_prepared_value` and `<nutrient>_prepared`
     * values in `nutriments` applies for a serving or for 100g.
     *
     * See also important note on `nutrition_data_per`.
     *
     */
    nutrition_data_prepared_per?: 'serving' | '100g';
    /**
     * All known nutrients for the product.
     *
     * Note that each nutrients are declined with a variety of suffixes like `_100g`, `_serving`,
     * see patternProperties below.
     *
     * A specific `_unit` is the unit used to measure the nutrient.
     *
     * Beware that some properties are to be interpreted based upon `nutrition_data_per` value.
     *
     * Also for products that have a nutrition table for prepared product
     * (eg. the nutrition facts for a bowl of milk with cocoa powder),
     * a `_prepared` suffix is added (before other suffixes).
     *
     * You can get all possible nutrients from the
     * [nutrients taxonomy](https://static.openfoodfacts.org/data/taxonomies/nutrients.json)
     *
     * **FIXME** add more nutrients with description.
     *
     */
    nutriments?: {
        /**
         * Quantity of alcohol
         *
         * (per 100g or per serving) in a standard unit (g or ml)
         *
         */
        alcohol?: number;
        carbohydrates?: number;
        carbohydrates_100g?: number;
        carbohydrates_serving?: number;
        carbohydrates_unit?: 'g' | 'mg' | 'μg';
        carbohydrates_value?: number;
        cocoa?: number;
        cocoa_100g?: number;
        cocoa_label?: string;
        cocoa_serving?: number;
        cocoa_unit?: 'g' | 'mg' | 'μg';
        cocoa_value?: number;
        /**
         * It is the same as `energy-kj` if we have it, or computed from `energy-kcal` otherwise
         *
         * (per 100g or per serving) in kj
         *
         */
        energy?: number;
        energy_100g?: number;
        /**
         * energy_value will be equal to energy-kj_value if we have it or to energy-kcal_value otherwise
         *
         */
        energy_value?: number;
        energy_serving?: number;
        /**
         * Equal to energy-kj_unit if we have it or to energy-kcal_unit otherwise
         *
         */
        energy_unit?: 'kcal' | 'kJ';
        /**
         * energy in kj, if it is specified
         *
         * (per 100g or per serving) in a standard unit (g or ml)
         *
         */
        energy_kj?: number;
        energy_kj_100g?: number;
        energy_kj_serving?: number;
        energy_kj_unit?: 'kJ';
        energy_kj_value?: number;
        energy_kj_value_computed?: number;
        fat?: number;
        fat_value?: number;
        fat_100g?: number;
        fat_serving?: number;
        fat_unit?: string;
        'nova-group_100g'?: number;
        'nova-group_serving'?: number;
        'nutrition-score-fr_100g'?: number;
        proteins_100g?: number;
        proteins_serving?: number;
        proteins_unit?: string;
        proteins_value?: number;
        salt_100g?: number;
        salt_serving?: number;
        salt_unit?: string;
        salt_value?: number;
        'saturated-fat'?: number;
        'saturated-fat_100g'?: number;
        'saturated-fat_serving'?: number;
        'saturated-fat_unit'?: string;
        'saturated-fat_value'?: number;
        sodium_100g?: number;
        sodium_serving?: number;
        sodium_unit?: string;
        sodium_value?: number;
        sugars_100g?: number;
        sugars_serving?: number;
        sugars_unit?: string;
        sugars_value?: number;
        fiber_100g?: number;
        fiber_serving?: number;
        fiber_unit?: string;
        fiber_value?: number;
        'energy-kcal_100g'?: number;
        'energy-kcal_serving'?: number;
        'energy-kcal_unit'?: string;
        'energy-kcal_value'?: number;
        'energy-kcal_value_computed'?: number;
        /**
         * energy in kcal, if it is specified
         *
         * (per 100g or per serving) in a standard unit (g or ml)
         *
         */
        'energy-kcal'?: number;
        'fruits-vegetables-legumes-estimate-from-ingredients_serving'?: number;
        'fruits-vegetables-legumes-estimate-from-ingredients_100g'?: number;
        /**
         * An estimate, from the ingredients list of the percentage of fruits, vegetable and legumes.
         * This is an important information for Nutri-Score (2023 version) computation.
         *
         */
        'fruits-vegetables-legumes-estimate-from-ingredients'?: number;
        'fruits-vegetables-nuts-estimate-from-ingredients_serving'?: number;
        'fruits-vegetables-nuts-estimate-from-ingredients_100g'?: number;
        /**
         * An estimate, from the ingredients list of the percentage of fruits, vegetable and nuts.
         * This is an important information for Nutri-Score (2021 version) computation.
         *
         */
        'fruits-vegetables-nuts-estimate-from-ingredients'?: number;
        'nova-group'?: number;
        /**
         * Experimental nutrition score derived from
         * the UK FSA score and adapted for the French market
         * (formula defined by the team of Professor Hercberg).
         *
         */
        'nutrition-score-fr'?: unknown;
        proteins?: number;
        salt?: number;
        sodium?: number;
        sugars?: number;
        fiber?: number;
        'carbon-footprint-from-known-ingredients_product'?: number;
        'carbon-footprint-from-known-ingredients_serving'?: number;
        /**
         * erythritol is a polyol which is not providing any energy.
         * As such, it needs not be taken into account when computing
         * the energy of a product. Eryhtritol is now displayed on
         * nutrition facts sheet of some products, mainly in the USA.
         * This value is entered either by contributors, either by
         * imports.
         *
         */
        erythritol?: number;
    };
    /**
     * Detail of data the Nutri-Score was computed upon.
     *
     * **Note**: this might not be stable, don't rely too much on this, or, at least, tell us !
     *
     * **TODO** document each property
     *
     */
    nutriscore_data?: {
        saturated_fat_ratio?: number;
        saturated_fat_ratio_points?: number;
        saturated_fat_ratio_value?: number;
    };
    /**
     * Nutrition grade (‘a’ to ‘e’),
     * https://world.openfoodfacts.org/nutriscore.
     *
     */
    nutrition_grade_fr?: string;
    /**
     * Nutrition grades as a comma separated list.
     *
     * Some products with multiple components might have multiple Nutri-Score
     *
     */
    nutrition_grades?: string;
    nutrition_grades_tags?: Array<(string)>;
    nutrition_score_beverage?: number;
    nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients?: number;
    nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients_value?: number;
    nutrition_score_warning_no_fiber?: number;
    other_nutritional_substances_tags?: Array<{
        [key: string]: unknown;
    }>;
    unknown_nutrients_tags?: Array<{
        [key: string]: unknown;
    }>;
    vitamins_tags?: Array<{
        [key: string]: unknown;
    }>;
};

/**
 * The nutrition data on the package can be per serving or per 100g.
 *
 * This is essential to understand if `<nutrient>_value` and `<nutrient>`
 * values in `nutriments` applies for a serving or for 100g.
 *
 * **IMPORTANT:**
 * When writing products,
 * this setting applies to all existing nutrients values for the product,
 * not only the nutrient values sent in the write request.
 * So it should not be changed unless all nutrients values are provided
 * with values that match the nutrition_data_per field.
 *
 */
export type nutrition_data_per = 'serving' | '100g';

/**
 * The nutrition data for prepared product on the package (if any) can be per serving or per 100g.
 *
 * This is essential to understand if `<nutrient>_prepared_value` and `<nutrient>_prepared`
 * values in `nutriments` applies for a serving or for 100g.
 *
 * See also important note on `nutrition_data_per`.
 *
 */
export type nutrition_data_prepared_per = 'serving' | '100g';

export type carbohydrates_unit = 'g' | 'mg' | 'μg';

export type cocoa_unit = 'g' | 'mg' | 'μg';

/**
 * Equal to energy-kj_unit if we have it or to energy-kcal_unit otherwise
 *
 */
export type energy_unit = 'kcal' | 'kJ';

export type energy_kj_unit = 'kJ';

/**
 * This is data that is linked to products data quality
 *
 */
export type Product_Quality = {
    data_quality_bugs_tags?: Array<{
        [key: string]: unknown;
    }>;
    data_quality_errors_tags?: Array<{
        [key: string]: unknown;
    }>;
    data_quality_info_tags?: Array<(string)>;
    data_quality_tags?: Array<(string)>;
    data_quality_warnings_tags?: Array<(string)>;
    /**
     * Source of data imported from producers.
     *
     */
    data_sources?: string;
    data_sources_tags?: Array<(string)>;
    debug_param_sorted_langs?: Array<(string)>;
    last_check_dates_tags?: Array<(string)>;
    last_checked_t?: number;
    last_checker?: string;
    /**
     * comma separated list of values indicating some states of the product,
     * like things to be done, or to be completed.
     * See [states taxonomy](https://static.openfoodfacts.net/data/taxonomies/states.json)
     *
     */
    states?: string;
    states_hierarchy?: Array<(string)>;
    states_tags?: Array<(string)>;
    /**
     * Information about different aspect of the product
     *
     */
    misc_tags?: Array<(string)>;
};

/**
 * Data about a product which is represented as tags
 *
 */
export type Product_Tags = {
    /**
     * List of brands (not taxonomized)
     */
    brands?: string;
    brands_tags?: Array<(string)>;
    categories?: string;
    categories_hierarchy?: Array<(string)>;
    /**
     * Categories language code
     */
    categories_lc?: string;
    categories_old?: string;
    categories_tags?: Array<(string)>;
    checkers_tags?: Array<(string)>;
    cities?: string;
    cities_tags?: Array<{
        [key: string]: unknown;
    }>;
    correctors_tags?: Array<(string)>;
    /**
     * List of countries where the product is sold.
     *
     */
    countries?: string;
    countries_beforescanbot?: string;
    countries_hierarchy?: Array<(string)>;
    /**
     * Countries language code
     */
    countries_lc?: string;
    countries_tags?: Array<(string)>;
    /**
     * All ecoscore of a product.
     * Most of the time it's only one value,
     * but it might eventually be more for products composed of sub-products.
     * See also: `ecoscore_score`, `ecoscore_grade`.
     *
     */
    ecoscore_tags?: Array<(string)>;
    /**
     * Packager code. EMB is the French system of traceability codes for packager.
     *
     */
    emb_codes?: string;
    emb_codes_orig?: string;
    emb_codes_tags?: Array<(string)>;
    labels?: string;
    labels_hierarchy?: Array<(string)>;
    labels_lc?: string;
    labels_tags?: Array<(string)>;
    /**
     * The data as a series of tag: `yyyy-mm-dd`, `yyyy-mm`, `yyyy`
     *
     */
    entry_dates_tags?: Array<(string)>;
    /**
     * Places where the product was manufactured or transformed.
     *
     */
    manufacturing_places?: string;
    manufacturing_places_tags?: Array<(string)>;
    nova_groups_tags?: Array<(string)>;
    nutrient_levels_tags?: Array<(string)>;
};

export type GetProductByBarcodeData = {
    path: {
        /**
         * The barcode of the product to be fetched
         */
        barcode: string;
    };
    query?: {
        /**
         * Specific fields to return. Use 'knowledge_panels' for Knowledge Panels only.
         */
        fields?: string;
    };
};

export type GetProductByBarcodeResponse = (((__paths__1api_1v2_1product_1_barcode__get_responses_200_content_application_1json_schema_oneOf_1_allOf_0 & {
    product?: Product;
}) | ({
    /**
     * Barcode of the product
     * (can be EAN-13 or internal codes for some food stores).
     * For products without a barcode, Open Food Facts assigns a
     * number starting with the 200 reserved prefix.
     *
     */
    code?: string;
    /**
     * Return values based on ProductOpener/Display.pm analysis
     */
    status?: 0 | 1;
    status_verbose?: string;
} & {
    product?: Product_Knowledge_Panels;
})));

export type GetProductByBarcodeError = unknown;

export type GetCgiProductImageUploadPlData = {
    body?: {
        /**
         * Barcode of the product
         *
         */
        code: string;
        /**
         * Indicates the type of the image and the corresponding language. It should
         * be in the format `{IMAGE_TYPE}_{LANG}` format, where `IMAGE_TYPE` is one
         * of `front|ingredients|nutrition|packaging|other` and `LANG` is the 2
         * letter language code. Use `other` if you don't want the image to be
         * selected. Note that the first image of a product is always selected as front
         * picture.
         *
         */
        imagefield: string;
        /**
         * This field must contain image binary content.
         * The format and extension must be one of gif|jpeg|jpg|png|heic.
         * This field is dynamic and dependent on the value of imagefield in the
         * request body. It wil be imgupload_the value of the imagefield stated
         * earlier. For example, if `imagefield=front_en`, the name of this field
         * should be `imageupload_front_en`.
         *
         */
        imgupload_front_en: (Blob | File);
    };
};

export type GetCgiProductImageUploadPlResponse = ({
    files?: Array<{
        url?: string;
        filename?: string;
        name?: string;
        thumbnailUrl?: string;
        code?: string;
    }>;
    image?: {
        thumb_url?: string;
        imgid?: number;
        crop_url?: string;
    };
    imgid?: number;
    status?: string;
    imagefield?: string;
    code?: string;
});

export type GetCgiProductImageUploadPlError = unknown;

export type GetCgiIngredientsPlData = {
    query: {
        /**
         * Barcode of the product
         */
        code: string;
        id: string;
        ocr_engine: string;
        process_image: string;
    };
};

export type GetCgiIngredientsPlResponse = ({
    status?: number;
});

export type GetCgiIngredientsPlError = unknown;

export type PostCgiProductImageCropPlData = {
    body: {
        /**
         * Barcode of the product.
         */
        code: string;
        /**
         * identifier of the image to select, it should be a number
         */
        imgid: number;
        /**
         * identifier of the selected image field, should be in the format
         * `{IMAGE_TYPE}_{LANG}` format, where `IMAGE_TYPE` is one of
         * `front|ingredients|nutrition|packaging|other` and `LANG` is the 2 letter
         * language code.
         * Note that if you select an image for the main language of the product (ex:
         * `ingredients_it` if `it` is the main language), this image will be
         * displayed on Product Opener for all languages (ex: on
         * `https://fr.openfoodfacts.org`, unless `ingredients_fr` exists).
         *
         */
        id: string;
        /**
         * X origin coordinate of the crop, it must be lower than x2
         */
        x1?: number;
        /**
         * Y origin coordinate of the crop, it must be lower than y2
         */
        y1?: number;
        /**
         * X end coordinate of the crop, it must be higher than x1
         */
        x2?: number;
        /**
         * Y end coordinate of the crop, it must be higher than y1
         */
        y2?: number;
        /**
         * angle of the rotation to apply on the selected image.
         * passing `90` as value rotate the image 90 degrees counter-clockwise.
         *
         */
        angle?: number;
        /**
         * whether the selected image should be normalized using ImageMagick
         */
        normalize?: 'true' | 'false';
        /**
         * whether the source image should be white magiced (background removal) using
         * ImageMagick.
         *
         */
        white_magic?: 'true' | 'false';
    };
};

export type PostCgiProductImageCropPlResponse = ({
    [key: string]: unknown;
});

export type PostCgiProductImageCropPlError = unknown;

export type GetCgiProductImageCropPlData = {
    query: {
        angle: string;
        /**
         * Barcode of the product
         */
        code: string;
        id: string;
        imgid: string;
    };
};

export type GetCgiProductImageCropPlResponse = ({
    status?: string;
    imagefield?: string;
    image?: {
        display_url?: string;
    };
});

export type GetCgiProductImageCropPlError = unknown;

export type PostCgiProductImageUnselectPlData = {
    body?: {
        /**
         * code of the product
         */
        code?: string;
        /**
         * image field (image id) of the photo to unselect
         */
        id?: string;
    };
};

export type PostCgiProductImageUnselectPlResponse = ({
    /**
     * status of the unselect operation
     */
    status?: string;
    /**
     * status code of the operation
     */
    status_code?: number;
    /**
     * image field that was unselected
     */
    imagefield?: string;
});

export type PostCgiProductImageUnselectPlError = unknown;

export type PostCgiProductJqm2PlData = {
    body?: ({
    /**
     * The barcode of the product to be added or edited
     */
    code: string;
    /**
     * A valid username.
     */
    user_id: string;
    /**
     * A valid corresponding password (related to specific environment).
     */
    password: string;
    /**
     * A comment for the change. It will be shown in product changes history.
     */
    comment?: string;
    /**
     * The brands of the product (comma separated list of values).
     */
    brands?: Array<(string)>;
    /**
     * The labels of the product (comma separated list of values).
     */
    labels?: Array<(string)>;
    /**
     * The categories of the product (comma separated list of values).
     */
    categories?: Array<(string)>;
    /**
     * Packaging type, format, material.
     * The [v3 API documentation](https://openfoodfacts.github.io/openfoodfacts-server/api/ref-v3/#operation/post-api-v3-product-barcode)
     * has a more structured data for `packaging`.
     *
     */
    packaging?: string;
} & {
    /**
     * A comment on the contribution.
     * Adding meaningful comments help moderators and users understand a single product history.
     *
     */
    comment?: string;
    /**
     * Name of the app providing the information
     *
     */
    app_name?: string;
    /**
     * Version of the app providing the information
     *
     */
    app_version?: string;
    /**
     * When an app uses a single user to log its contributions,
     * it might be interesting to know which user of the app is providing the information.
     * You can use this field to provide an identifier (eg: an sha1 of the username) that's privacy preserving. Make sure that your salt is strong, perfectly random and secret
     *
     * In case we have trouble with one of your user, it helps our moderators revert edits.
     *
     */
    app_uuid?: string;
    /**
     * It is required that you pass a specific User-Agent header when you do an API request.
     * But some times it's not possible to modify such a header
     * (eg. request using JavaScript in a browser).
     * In such cases, you can override it with this parameter.
     *
     */
    'User-Agent'?: string;
});
};

export type PostCgiProductJqm2PlResponse = ({
    status_verbose?: string;
    status?: number;
});

export type PostCgiProductJqm2PlError = unknown;

export type GetSearchData = {
    query?: {
        /**
         * Search on nutrient for an exact quantity
         *
         */
        '<nutrient>_eq_<value>'?: {
            [key: string]: unknown;
        };
        /**
         * Search on nutrient greater than a value
         *
         */
        '<nutrient>_gt_<value>'?: {
            [key: string]: unknown;
        };
        /**
         * Search on nutrient lower than a value
         *
         */
        '<nutrient>_lt_<value>'?: {
            [key: string]: unknown;
        };
        /**
         * You can add a language code to a specific tag to query it in a specific language
         *
         */
        '<tag_name>_tags_<language_code>'?: {
            [key: string]: unknown;
        };
        /**
         * The additives_tags in english of product(s) you are searching for.
         * The [OFF App](https://world.openfoodfacts.org/additives) has a list of possible values for `additives`.
         *
         * You can use multiple values by using a comma separated list.
         * You can add a "-" before values to avoid matching a tag.
         *
         */
        additives_tags?: string;
        /**
         * The allergens_tags in english of product(s) you are searching for.
         * The [OFF App](https://world.openfoodfacts.org/allergens) has a list of possible values for `allergens`.
         *
         * You can use multiple values by using a comma separated list.
         * You can add a "-" before values to avoid matching a tag.
         *
         */
        allergens_tags?: string;
        /**
         * The brands_tags of product(s) you are searching for.
         * The [OFF App](https://world.openfoodfacts.org/brands) has a list of possible values for `brands`.
         *
         * You can use multiple values by using a comma separated list.
         * You can add a "-" before values to avoid matching a tag.
         *
         */
        brands_tags?: string;
        /**
         * The category of product(s) you are searching for.
         * The [OFF App](https://world.openfoodfacts.org/categories) has a list of possible values for `categories`.
         *
         * You can use multiple values by using a comma separated list.
         * You can add a "-" before values to avoid matching a tag.
         *
         */
        categories_tags?: string;
        /**
         * The countries_tags_en of product(s) you are searching for.
         * The [OFF App](https://world.openfoodfacts.org/countries) shows a list of possible values for `countries`.
         *
         * You can use multiple values by using a comma separated list.
         * You can add a "-" before values to avoid matching a tag.
         *
         */
        countries_tags_en?: string;
        /**
         * The emb_codes_tags of product(s) you are searching for.
         *
         * You can use multiple values by using a comma separated list.
         * You can add a "-" before values to avoid matching a tag.
         *
         */
        emb_codes_tags?: string;
        /**
         * Specific fields to return. Use 'knowledge_panels' for Knowledge Panels only.
         */
        fields?: string;
        /**
         * The labels_tags in english of product(s) you are searching for.
         * The [OFF App](https://world.openfoodfacts.org/labels) has a list of possible values for `labels`.
         *
         * You can use multiple values by using a comma separated list.
         * You can add a "-" before values to avoid matching a tag.
         *
         */
        labels_tags?: string;
        /**
         * The manufacturing_places_tags of product(s) you are searching for.
         * The [OFF App](https://world.openfoodfacts.org/manufacturing-places) has a list of possible values for `manufacturing-places`.
         *
         * You can use multiple values by using a comma separated list.
         * You can add a "-" before values to avoid matching a tag.
         *
         */
        manufacturing_places_tags?: string;
        /**
         * The nutrition_grades_tags of product(s) you are searching for.
         * The [OFF App](https://world.openfoodfacts.org/nutrition-grades) has a list of possible values for `nutrition-grades`.
         *
         * You can use multiple values by using a comma separated list.
         * You can add a "-" before values to avoid matching a tag.
         *
         */
        nutrition_grades_tags?: string;
        /**
         * The origins_tags of product(s) you are searching for.
         *
         * You can use multiple values by using a comma separated list.
         * You can add a "-" before values to avoid matching a tag.
         *
         */
        origins_tags?: string;
        /**
         * The packaging_tag in german of product(s) you are searching for.
         * The [OFF App](https://world.openfoodfacts.org/packaging) has a list of possible values for `packaging`.
         *
         * You can use multiple values by using a comma separated list.
         * You can add a "-" before values to avoid matching a tag.
         *
         */
        packaging_tags_de?: string;
        /**
         * The page number you request to view (eg. in search results spanning multiple pages)
         *
         */
        page?: number;
        /**
         * The number of elements should be sent per page
         *
         */
        page_size?: number;
        /**
         * The purchase_places_tags of product(s) you are searching for.
         *
         * You can use multiple values by using a comma separated list.
         * You can add a "-" before values to avoid matching a tag.
         *
         */
        purchase_places_tags?: string;
        /**
         * The allowed values  used to sort/order the search results.
         *
         * * `product_name` sorts on name
         * * `ecoscore_score`, `nova_score`, `nutriscore_score` rank on the [Eco-Score](https://world.openfoodfacts.org/eco-score-the-environmental-impact-of-food-products), [Nova](https://world.openfoodfacts.org/nova), or [Nutri-Score](https://world.openfoodfacts.org/nutriscore)
         * * `scans_n`, `unique_scans_n` and `popularity_key` are about product popularity: number of scans on unique scans, rank of product
         * * `created_t`, `last_modified_t`, are about creation and modification dates
         * * `nothing`, tells not to sort at all (because if you do not provide the sort_by argument we default to sorting on popularity (for food) or last modification date)
         *
         */
        sort_by?: 'product_name' | 'last_modified_t' | 'scans_n' | 'unique_scans_n' | 'created_t' | 'completeness' | 'popularity_key' | 'nutriscore_score' | 'nova_score' | 'nothing' | 'ecoscore_score';
        /**
         * The states_tags in english of product(s) you are searching for.
         * The [OFF App](https://world.openfoodfacts.org/states) has a list of possible values for `states`.
         *
         * You can use multiple values by using a comma separated list.
         * You can add a "-" before values to avoid matching a tag.
         *
         */
        states_tags?: string;
        /**
         * The stores_tags of product(s) you are searching for.
         *
         * You can use multiple values by using a comma separated list.
         * You can add a "-" before values to avoid matching a tag.
         *
         */
        stores_tags?: string;
        /**
         * The traces_tags of product(s) you are searching for.
         * The [OFF App](https://world.openfoodfacts.org/traces) shows a list of possible values for `traces`.
         *
         * You can use multiple values by using a comma separated list.
         * You can add a "-" before values to avoid matching a tag.
         *
         */
        traces_tags?: string;
    };
};

export type GetSearchResponse = ({
    /**
     * Total number of products found
     *
     */
    count?: number;
    /**
     * Page number of returned results.
     *
     * You can get a different page, by using the `page` query parameter.
     *
     */
    page?: number;
    /**
     * Number of products in this page.
     *
     * This will differ from page_size only on the last page.
     *
     */
    page_count?: number;
    /**
     * Requested number of products per pages
     *
     * To get the number of pages, divide count by page_size
     * (eg. `Math.floor( count / page_size) + 1 `)
     *
     */
    page_size?: number;
    /**
     * The products matching the query corresponding to current page
     *
     */
    products?: Array<Product>;
    skip?: number;
});

export type GetSearchError = unknown;

export type GetCgiSuggestPlData = {
    query?: {
        tagtype?: string;
        term?: string;
    };
};

export type GetCgiSuggestPlResponse = (unknown[]);

export type GetCgiSuggestPlError = unknown;

export type GetCgiNutrientsPlData = {
    query?: {
        /**
         * 2 letter code of the country of the user. Used for localizing some fields in returned values (e.g. knowledge panels). If not passed, the country may be inferred by the IP address of the request.
         */
        cc?: string;
        /**
         * 2 letter code of the language of the user.
         * Used for localizing some fields in returned values (e.g. knowledge panels).
         * If not passed, the language may be inferred by the Accept-Language header of the request,
         * or from the domain name prefix.
         *
         */
        lc?: string;
    };
};

export type GetCgiNutrientsPlResponse = (Nutrient_properties_nutrients);

export type GetCgiNutrientsPlError = unknown;

export type GetAttributeGroupsData = {
    query?: {
        /**
         * 2 letter code of the language of the user.
         * Used for localizing some fields in returned values (e.g. knowledge panels).
         * If not passed, the language may be inferred by the Accept-Language header of the request,
         * or from the domain name prefix.
         *
         */
        lc?: string;
    };
};

export type GetAttributeGroupsResponse = (Array<{
    /**
     * unique id of the group
     */
    id?: string;
    /**
     * Name of the group
     */
    name?: string;
    /**
     * Attributes that are part of this group
     *
     */
    attributes?: Array<{
        /**
         * unique id of the attribute
         */
        id?: string;
        /**
         * Name of the attribute
         */
        name?: string;
        /**
         * url of icon to display next to the settings for this attribute
         */
        icon_url?: string;
        /**
         * a description of the attribute to display to users
         */
        setting_name?: string;
        /**
         * a complementary note on the attribute
         */
        setting_note?: string;
        /**
         * Indicates the default setting for this attribute
         */
        default?: 'mandatory' | 'very_important' | 'important' | 'not_important';
        /**
         * Linked knowledge panel (optional)
         */
        panel_id?: string;
    }>;
}>);

export type GetAttributeGroupsError = unknown;

export type GetPreferencesData = {
    query?: {
        /**
         * 2 letter code of the language of the user.
         * Used for localizing some fields in returned values (e.g. knowledge panels).
         * If not passed, the language may be inferred by the Accept-Language header of the request,
         * or from the domain name prefix.
         *
         */
        lc?: string;
    };
};

export type GetPreferencesResponse = (Array<{
    /**
     * id for the setting value
     */
    id?: 'not_important' | 'important' | 'very_important' | 'mandatory';
    /**
     * name for the setting value, translated according to `lc` parameter
     */
    name?: string;
    /**
     * factor to apply to the property of the product corresponding to attributes
     * having this setting value
     *
     */
    factor?: number;
    /**
     * FIXME
     *
     */
    minimum_match?: number;
}>);

export type GetPreferencesError = unknown;

export type GetCgiSessionPlData = {
    body: {
        /**
         * Username for login
         */
        user_id: string;
        /**
         * Password for login
         */
        password: string;
    };
};

export type GetCgiSessionPlResponse = (string);

export type GetCgiSessionPlError = (unknown);