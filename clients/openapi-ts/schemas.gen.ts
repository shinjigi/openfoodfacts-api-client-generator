// This file is auto-generated by @hey-api/openapi-ts

export const AppCredentialsSchema = {
    description: 'Schema for application credentials',
    type: 'object',
    properties: {
        app_name: {
            type: 'string',
            description: 'Name of the application'
        },
        app_version: {
            type: 'string',
            description: 'Version of the application'
        },
        app_uuid: {
            type: 'string',
            description: `A salted random uuid (Unique identifier) for the user so that Open Food Facts moderators 
can selectively ban any problematic user without banning your whole app account.
`
        }
    },
    required: ['app_name', 'app_version', 'app_uuid']
} as const;

export const Product_BaseSchema = {
    type: 'object',
    description: `Base product data
`,
    properties: {
        abbreviated_product_name: {
            type: 'string',
            description: 'Abbreviated name in requested language'
        },
        code: {
            type: 'string',
            description: `barcode of the product (can be EAN-13 or internal codes for some food stores),
for products without a barcode,
Open Food Facts assigns a number starting with the 200 reserved prefix
`
        },
        codes_tags: {
            type: 'array',
            items: {
                type: 'string',
                description: `A value which is the type of barcode "code-13" or "code-8"
and
A series of mask for the barcode
It helps retrieve barcodes starting by
`,
                examples: ['code-13', '3017620422xxx', '301762042xxxx', '30176204xxxxx', '3017620xxxxxx', '301762xxxxxxx', '30176xxxxxxxx', '3017xxxxxxxxx', '301xxxxxxxxxx', '30xxxxxxxxxxx', '3xxxxxxxxxxxx']
            }
        },
        generic_name_it: {
            type: 'string'
        },
        generic_name: {
            type: 'string',
            description: `Legal name of the product as regulated
by the European authorities.
`
        },
        _id: {
            type: 'string',
            description: 'id in database of the product, this normally is the barcode'
        },
        _keywords: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        id: {
            description: `internal identifier for the product, usually set to the value of \`code\`,
except on the producers platform where it is prefixed by the owner
`,
            type: 'string'
        },
        lc: {
            type: 'string',
            description: `Main language of the product.
This is a duplicate of \`lang\` property (for historical reasons).
`
        },
        lang: {
            type: 'string',
            description: `Main language of the product.

This should be the main language of product packaging (if one is predominant).

Main language is also used to decide which ingredients list to parse.
`
        },
        nova_group: {
            type: 'integer',
            description: `Nova group as an integer from 1 to 4. See https://world.openfoodfacts.org/nova
`
        },
        nova_groups: {
            type: 'string'
        },
        obsolete: {
            type: 'string'
        },
        obsolete_since_date: {
            description: `A date at which the product was declared obsolete.
This means it's not produced any more.
`,
            type: 'string'
        },
        product_name: {
            type: 'string',
            description: `The name of the product
`
        },
        product_name_it: {
            type: 'string',
            description: `Italian name of the product
`
        },
        product_name_en: {
            type: 'string',
            description: `The name of the product can also
be in many other languages like
product_name_fr (for French).
`
        },
        product_quantity: {
            type: 'string',
            description: `The size in g or ml for the whole product.
It's a normalized version of the quantity field.
`,
            example: '500'
        },
        product_quantity_unit: {
            type: 'string',
            description: `The unit (either g or ml) for the correponding product_quantity.
`,
            example: 'g'
        },
        quantity: {
            type: 'string',
            description: `Quantity and Unit.
`
        }
    },
    patternProperties: {
        'abbreviated_product_name_(?<language_code>\w\w)': {
            type: 'string',
            description: 'Abbreviated name in language `language_code`.'
        },
        'generic_name_(?<language_code>\w\w)': {
            type: 'string',
            description: `This can be returned in many other languages
like generic_name_fr (for French).
`
        }
    }
} as const;

export const Product_MiscSchema = {
    type: 'object',
    title: 'product_misc',
    description: `Miscellaneous but important fields of a product
`,
    properties: {
        additives_n: {
            type: 'integer',
            description: `Number of food additives.
`
        },
        checked: {
            type: 'string'
        },
        complete: {
            type: 'integer'
        },
        completeness: {
            type: 'number'
        },
        ecoscore_grade: {
            type: 'string',
            description: `See also: \`ecoscore_tags\`
`
        },
        ecoscore_score: {
            type: 'integer',
            description: `See also: \`ecoscore_tags\`
`
        },
        food_groups: {
            type: 'string'
        },
        food_groups_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        nutrient_levels: {
            description: `Traffic light indicators on main nutrients levels
`,
            type: 'object',
            properties: {
                fat: {
                    type: 'string',
                    enum: ['low', 'moderate', 'high']
                },
                salt: {
                    type: 'string',
                    enum: ['low', 'moderate', 'high']
                },
                'saturated-fat': {
                    type: 'string',
                    enum: ['low', 'moderate', 'high']
                },
                sugars: {
                    type: 'string',
                    enum: ['low', 'moderate', 'high']
                }
            }
        },
        packaging_text: {
            type: 'string',
            description: `Recycling instructions as raw text, e.g. Plastic
bottle to recycle, Plastic cap to recycle.
This will get automatically parsed and
will be used to compute the Eco-Score.
You can either request it (if it exists) or
send it in a specific language.
`,
            examples: ['packaging_text_en']
        },
        packagings: {
            type: 'array',
            title: 'Packagings (READ)',
            description: `The packagings object is an array of individual packaging component objects.

The Packaging data document explains how packaging data is structured in Open Food Facts: https://openfoodfacts.github.io/openfoodfacts-server/dev/explain-packaging-data/

The shape, material and recycling properties of each packaging component are linked to entries in the packaging_shapes, packaging_materials and packaging_recycling taxonomies:

https://world.openfoodfacts.org/data/taxonomies/packaging_shapes.json
https://world.openfoodfacts.org/data/taxonomies/packaging_materials.json
https://world.openfoodfacts.org/data/taxonomies/packaging_recycling.json

If the tags_lc field is set, the properties will include a lc_name field with the translation in the requested language.`,
            examples: [[
                    {
                        number_of_units: 6,
                        shape: {
                            id: 'en:bottle',
                            lc_name: 'bouteille'
                        },
                        material: {
                            id: 'en:bottle',
                            lc_name: 'bouteille'
                        },
                        recycling: {
                            id: 'en:bottle',
                            lc_name: 'bouteille'
                        },
                        quantity_per_unit: '25 cl',
                        quantity_per_unit_value: 25,
                        quantity_per_unit_unit: 'cl',
                        weight_specified: 30,
                        weight_measured: 32,
                        weight_estimated: 26,
                        weight: 30,
                        weight_source_id: 'specified'
                    }
                ]],
            items: {
                description: `Each packaging component has different properties to specify how many there are, its shape, material etc.

The shape, material and recycling properties are mapped to one entry in the packaging_shapes, packaging_materials and packaging_recycling taxonomies, and the value of the property is the canonical name of the taxonomy entry (e.g. en:bottle).

They may contain values that could not yet get matched to their respective taxonomy, in which case they will contain a free text value prefixed with the language code of this text value (e.g. "fr:Bouteille sph√©rique" might have been entered by a French user to indicate it is a spherical bottle).`,
                title: 'Packaging component (READ)',
                type: 'object',
                examples: [
                    {
                        number_of_units: 6,
                        shape: {
                            id: 'en:bottle',
                            lc_name: 'bouteille'
                        },
                        material: {
                            id: 'en:bottle',
                            lc_name: 'bouteille'
                        },
                        recycling: {
                            id: 'en:bottle',
                            lc_name: 'bouteille'
                        },
                        quantity_per_unit: '25 cl',
                        quantity_per_unit_value: 25,
                        quantity_per_unit_unit: 'cl',
                        weight_specified: 30,
                        weight_measured: 32,
                        weight_estimated: 26,
                        weight: 30,
                        weight_source_id: 'specified'
                    }
                ],
                properties: {
                    number_of_units: {
                        type: 'integer',
                        description: 'umber of units of this packaging component contained in the product (e.g. 6 for a pack of 6 bottles)'
                    },
                    shape: {
                        type: 'string'
                    },
                    material: {
                        type: 'string'
                    },
                    recycling: {
                        type: 'string'
                    },
                    quantity_per_unit: {
                        type: 'string',
                        description: 'Quantity (weight or volume) of food product contained in the packaging component. (e.g. 75cl for a wine bottle)'
                    },
                    quantity_per_unit_value: {
                        type: 'number',
                        description: 'Value parsed from the quantity field.'
                    },
                    quantity_per_unit_unit: {
                        type: 'string',
                        description: 'Unit parsed and normalized from the quantity field.'
                    },
                    weight_specified: {
                        type: 'number',
                        description: 'Weight (as specified by the manufacturer) of one unit of the empty packaging component (in grams). (e.g. for a 6 pack of 1.5l water bottles, it might be 30, the weight in grams of 1 empty water bottle without its cap which is a different packaging component).'
                    },
                    weight_measured: {
                        type: 'number',
                        description: 'Weight (as measured by one or more users) of one unit of the empty packaging component (in grams). (e.g. for a 6 pack of 1.5l water bottles, it might be 30, the weight in grams of 1 empty water bottle without its cap which is a different packaging component).'
                    },
                    weight_estimated: {
                        type: 'number',
                        description: 'Weight (as estimated from similar products) of one unit of the empty packaging component (in grams). (e.g. for a 6 pack of 1.5l water bottles, it might be 30, the weight in grams of 1 empty water bottle without its cap which is a different packaging component).'
                    },
                    weight: {
                        type: 'number',
                        description: 'Weight of one unit of the empty packaging component.'
                    },
                    weight_source_id: {
                        type: 'string',
                        description: 'Indicates which field was used to populate the "weight" field. Either "specified", "measured", or "estimated"'
                    }
                }
            },
            readOnly: true
        },
        packagings_complete: {
            title: 'packagings_complete',
            type: 'integer',
            minimum: 0,
            maximum: 1,
            description: 'Indicate if the packagings array contains all the packaging parts of the product. This field can be set by users when they enter or verify packaging data. Possible values are 0 or 1.'
        },
        pnns_groups_1: {
            description: `Category of food according to [French Nutrition and Health Program](https://fr.wikipedia.org/wiki/Programme_national_nutrition_sant%C3%A9)
`,
            type: 'string'
        },
        pnns_groups_1_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        pnns_groups_2: {
            description: `Sub Category of food according to [French Nutrition and Health Program](https://fr.wikipedia.org/wiki/Programme_national_nutrition_sant%C3%A9)
`,
            type: 'string'
        },
        pnns_groups_2_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        popularity_key: {
            description: `An imprecise measurement of popularity based on Scan statistics. A higher value means higher popularity.
`,
            type: 'integer'
        },
        popularity_tags: {
            description: `Indicators for the popularity of a product, like the amount of scans in a specific year.
`,
            type: 'array',
            items: {
                type: 'string'
            }
        },
        scans_n: {
            type: 'integer'
        },
        unique_scans_n: {
            type: 'integer'
        },
        serving_quantity: {
            type: 'string',
            description: `Normalized version of serving_size.
Note that this is NOT the number of servings by product.
<small>(in perl, see \`normalize_serving_size\`)</small>
`
        },
        serving_quantity_unit: {
            type: 'string',
            description: `The unit (either g or ml) for the correponding serving_quantity.
`,
            examples: ['g']
        },
        serving_size: {
            type: 'string',
            description: `Serving size text (generally in g or ml).
We expect a quantity + unit but the user is free to input any string.
`
        }
    },
    patternProperties: {
        'food_groups_(?<language_code>\w\w)': {
            type: 'string',
            description: 'see `food_groups`'
        },
        'packaging_text_(?<language_code>\w\w)': {
            type: 'string',
            description: `Packaging text in language designated by \`language_code\`
`
        }
    }
} as const;

export const Product_TagsSchema = {
    type: 'object',
    description: `Data about a product which is represented as tags
`,
    properties: {
        brands: {
            type: 'string',
            description: 'List of brands (not taxonomized)'
        },
        brands_tags: {
            type: 'array',
            items: {
                type: 'string',
                description: 'List of brands (tags, not taxonomized)'
            }
        },
        categories: {
            type: 'string'
        },
        categories_hierarchy: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        categories_lc: {
            type: 'string',
            description: 'Categories language code'
        },
        categories_old: {
            type: 'string'
        },
        categories_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        checkers_tags: {
            type: 'array',
            items: {
                type: 'string',
                description: 'List of checkers (users who checked the product) tags'
            }
        },
        cities: {
            type: 'string'
        },
        cities_tags: {
            type: 'array',
            items: {
                type: 'object'
            }
        },
        correctors_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        countries: {
            type: 'string',
            description: `List of countries where the product is sold.
`
        },
        countries_beforescanbot: {
            type: 'string'
        },
        countries_hierarchy: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        countries_lc: {
            type: 'string',
            description: 'Countries language code'
        },
        countries_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        ecoscore_tags: {
            description: `All ecoscore of a product.
Most of the time it's only one value,
but it might eventually be more for products composed of sub-products.
See also: \`ecoscore_score\`, \`ecoscore_grade\`.
`,
            type: 'array',
            items: {
                type: 'string'
            }
        },
        emb_codes: {
            type: 'string',
            description: `Packager code. EMB is the French system of traceability codes for packager.
`,
            examples: ['EMB 2013330']
        },
        emb_codes_orig: {
            type: 'string'
        },
        emb_codes_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        labels: {
            type: 'string'
        },
        labels_hierarchy: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        labels_lc: {
            type: 'string'
        },
        labels_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        entry_dates_tags: {
            description: `The data as a series of tag: \`yyyy-mm-dd\`, \`yyyy-mm\`, \`yyyy\`
`,
            type: 'array',
            items: {
                type: 'string'
            },
            examples: [['2016-03-11', '2016-03', '2016']]
        },
        manufacturing_places: {
            type: 'string',
            description: `Places where the product was manufactured or transformed.
`
        },
        manufacturing_places_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        nova_groups_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        nutrient_levels_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const Product_ImagesSchema = {
    type: 'object',
    title: 'product_images',
    description: `Information about Images of a product.

Images ensure the reliability of Open Food Facts data.
It provides a primary source and proof of all the structured data.
You may therefore want to display it along the structured information.

See also tutorials about images:
* [Getting images](https://openfoodfacts.github.io/openfoodfacts-server/api/how-to-download-images/)
* [Uploading images](https://openfoodfacts.github.io/openfoodfacts-server/api/tutorial-uploading-photo-to-a-product/)
`,
    properties: {
        image_front_small_url: {
            type: 'string'
        },
        image_front_thumb_url: {
            type: 'string'
        },
        image_front_url: {
            type: 'string'
        },
        image_nutrition_small_url: {
            type: 'string'
        },
        image_nutrition_thumb_url: {
            type: 'string'
        },
        image_nutrition_url: {
            type: 'string'
        },
        image_small_url: {
            type: 'string'
        },
        image_thumb_url: {
            type: 'string'
        },
        image_url: {
            type: 'string'
        },
        images: {
            description: `This contains properties for all images contained on the product.
`,
            type: 'object',
            title: 'product_images_properties',
            properties: {
                front: {
                    title: 'image_role',
                    type: 'object',
                    description: `property of an image (or part thereof) selected for a particular role and a particular language.
`,
                    properties: {
                        angle: {
                            type: 'integer',
                            examples: [0],
                            description: 'The angle of the image rotation (if it was rotated).'
                        },
                        coordinates_image_size: {
                            type: 'string',
                            examples: ['full']
                        },
                        geometry: {
                            type: 'string',
                            examples: ['0x0--1--1']
                        },
                        imgid: {
                            type: 'string',
                            examples: ['121'],
                            description: 'The id of the original/source image that was selected to edit(rotate, normalize etc) to produce this new image.'
                        },
                        normalize: {
                            type: ['string', 'boolean', 'null'],
                            examples: [
                                null,
                                'false',
                                'true'
                            ],
                            description: 'Normalize colors.'
                        },
                        rev: {
                            type: 'string',
                            examples: ['420']
                        },
                        sizes: {
                            type: 'object',
                            description: `The available image sizes for the product (both reduced and full). 
The reduced images are the ones with numbers as the key( 100, 200 etc)
while the full images have \`full\` as the key.
`,
                            properties: {
                                100: {
                                    type: 'object',
                                    title: 'image_size',
                                    description: `properties of fullsize image
**TODO** explain how to compute name
`,
                                    properties: {
                                        h: {
                                            type: 'integer',
                                            examples: [400],
                                            description: `The height of the reduced/full image in pixels.
`
                                        },
                                        w: {
                                            type: 'integer',
                                            examples: [255],
                                            description: `The width of the reduced/full image in pixels.
`
                                        }
                                    }
                                },
                                200: {
                                    '$ref': '#/components/schemas/Product-Images/properties/images/properties/front/properties/sizes/properties/100'
                                },
                                400: {
                                    '$ref': '#/components/schemas/Product-Images/properties/images/properties/front/properties/sizes/properties/100'
                                },
                                full: {
                                    '$ref': '#/components/schemas/Product-Images/properties/images/properties/front/properties/sizes/properties/100'
                                }
                            }
                        },
                        white_magic: {
                            type: ['string', 'boolean', 'null'],
                            examples: [
                                null,
                                'false',
                                'true'
                            ],
                            description: `Photo on white background : Try to remove the background.
`
                        },
                        x1: {
                            type: 'string',
                            examples: ['-1']
                        },
                        x2: {
                            type: 'string',
                            examples: ['-1']
                        },
                        y1: {
                            type: 'string',
                            examples: ['-1']
                        },
                        y2: {
                            type: 'string',
                            examples: ['-1']
                        }
                    }
                }
            },
            additionalProperties: {
                type: 'object',
                title: 'image',
                description: `This object represent an image that was uploaded to a product.
"imgid" is an integer which is a sequential number unique to each picture.
`,
                properties: {
                    sizes: {
                        type: 'object',
                        description: `The available image sizes for the product (both reduced and full). 
The reduced images are the ones with numbers as the key( 100, 200 etc) 
while the full images have \`full\` as the key.
`,
                        properties: {
                            full: {
                                '$ref': '#/components/schemas/Product-Images/properties/images/properties/front/properties/sizes/properties/100'
                            }
                        },
                        patternProperties: {
                            '(?<image_size>100|400)': {
                                description: `properties of thumbnail of size \`image_size\`.
**TODO** explain how to compute name

For real type: see description of property \`full\`.
(Put this way because of a [bug in rapidoc](https://github.com/rapi-doc/RapiDoc/issues/880))
`,
                                type: 'string'
                            }
                        }
                    },
                    uploaded_t: {
                        type: 'string',
                        examples: ['1457680652'],
                        description: `The time the image was uploaded (as unix timestamp).
`
                    },
                    uploader: {
                        type: 'string',
                        examples: ['openfoodfacts-contributors'],
                        description: `The contributor that uploaded the image.
`
                    }
                }
            },
            propertyNames: {
                type: 'integer'
            },
            patternProperties: {
                '(?<imgid>\d+)': {
                    description: `See property \`1\` to get the real type of those objects
(Put this way because of a [bug in rapidoc](https://github.com/rapi-doc/RapiDoc/issues/880))
`,
                    type: 'string'
                },
                '(?<image_type>front|nutrition|ingredients|packaging|other)_(?<language_code>\w\w)': {
                    description: `See property \`front\` to get the real type of those objects
(Put this way because of a [bug in rapidoc](https://github.com/rapi-doc/RapiDoc/issues/880))
`,
                    type: 'string'
                }
            }
        },
        last_image_dates_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        last_image_t: {
            description: 'timestamp of last image upload (or update?)',
            type: 'integer'
        },
        selected_images: {
            type: 'object',
            title: 'product_selected_images',
            description: `URL for selected (important) images of the product.

This is very handy if you display the product to users.
`,
            properties: {
                ingredients: {
                    '$ref': '#/components/schemas/Product-Images/properties/selected_images/properties/front'
                },
                nutrition: {
                    '$ref': '#/components/schemas/Product-Images/properties/selected_images/properties/front'
                },
                packaging: {
                    '$ref': '#/components/schemas/Product-Images/properties/selected_images/properties/front'
                },
                front: {
                    type: 'object',
                    description: 'URLs of thumbnails image of image of type `image_type`',
                    properties: {
                        display: {
                            description: `Thumbnail urls of product image (front) adapted to display on product page
`,
                            '$ref': '#/components/schemas/Product-Images/properties/selected_images/properties/front/properties/small'
                        },
                        small: {
                            description: `Thumbnail urls of product image (front) adapted to display on product list page
`,
                            type: 'object',
                            patternProperties: {
                                '(?<language_code>\w\w)': {
                                    type: 'string',
                                    description: 'url of the image for language `language_code`'
                                }
                            }
                        },
                        thumb: {
                            description: `Thumbnail urls of product image (front) in smallest format
`,
                            '$ref': '#/components/schemas/Product-Images/properties/selected_images/properties/front/properties/small'
                        }
                    }
                }
            },
            patternProperties: {
                '(?<image_type>front|packaging|ingredients|nutrition|other)': {
                    description: `See property \`front\` to get the real type of those objects
(Put this way because of a [bug in rapidoc](https://github.com/rapi-doc/RapiDoc/issues/880))
`
                }
            }
        }
    },
    patternProperties: {
        'image(_(?<image_type>front|packaging|ingredients|nutrition|other))?(_(?<image_size>small|thumb))?_url': {
            description: `the URL of image of type \`image_type\` in size \`image_size\` (or full size if not given).

The \`image_type\` tells which image the url correspond to. \`image_type\` is \`front\` if not provided.

The image is the one for current language (affected by \`lc\` parameter) if an image exists for this language, the image in main product language otherwise.

**IMPORTANT:** you should use \`selected_images\` field instead of this one.
`,
            type: 'string'
        }
    }
} as const;

export const Product_Eco_ScoreSchema = {
    type: 'object',
    description: `Fields related to Eco-Score for a product.

See also: \`ecoscore_score\`, \`ecoscore_grade\` and \`ecoscore_tags\`.
`,
    properties: {
        ecoscore_data: {
            type: 'object',
            title: 'product_ecoscore_data',
            description: `An object about a lot of details about data needed for Eco-Score computation
and complementary data of interest.
`,
            properties: {
                adjustments: {
                    title: 'product_ecoscore_adjustments',
                    type: 'object',
                    properties: {
                        origins_of_ingredients: {
                            type: 'object',
                            properties: {
                                aggregated_origins: {
                                    type: 'array',
                                    items: {
                                        title: 'adjustments_origin_of_ingredient_aggregated',
                                        type: 'object',
                                        properties: {
                                            epi_score: {
                                                type: 'string'
                                            },
                                            origin: {
                                                type: 'string'
                                            },
                                            percent: {
                                                type: 'integer'
                                            },
                                            transportation_score: {
                                                type: ['null', 'integer']
                                            }
                                        }
                                    }
                                },
                                epi_score: {
                                    type: 'integer'
                                },
                                epi_value: {
                                    type: 'integer'
                                },
                                origins_from_categories: {
                                    type: 'array',
                                    items: {
                                        type: 'string'
                                    }
                                },
                                origins_from_origins_field: {
                                    type: 'array',
                                    items: {
                                        type: 'string'
                                    }
                                },
                                transportation_score: {
                                    type: 'integer'
                                },
                                transportation_scores: {
                                    '$ref': '#/components/schemas/Product-Eco-Score/properties/ecoscore_data/properties/adjustments/properties/origins_of_ingredients/properties/values'
                                },
                                transportation_value: {
                                    type: 'integer'
                                },
                                transportation_values: {
                                    '$ref': '#/components/schemas/Product-Eco-Score/properties/ecoscore_data/properties/adjustments/properties/origins_of_ingredients/properties/values'
                                },
                                value: {
                                    type: 'integer'
                                },
                                values: {
                                    type: 'string',
                                    enum: ['ad', 'al', 'at', 'ax', 'ba', 'be', 'bg', 'ch', 'cy', 'cz', 'de', 'dk', 'dz', 'ee', 'eg', 'es', 'fi', 'fo', 'fr', 'gg', 'gi', 'gr', 'hr', 'hu', 'ie', 'il', 'im', 'is', 'it', 'je', 'lb', 'li', 'lt', 'lu', 'lv', 'ly', 'ma', 'mc', 'md', 'me', 'mk', 'mt', 'nl', 'no', 'pl', 'ps', 'pt', 'ro', 'rs', 'se', 'si', 'sj', 'sk', 'sm', 'sy', 'tn', 'tr', 'ua', 'uk', 'us', 'va', 'world', 'xk']
                                },
                                warning: {
                                    type: 'string'
                                }
                            }
                        },
                        packaging: {
                            type: 'object',
                            properties: {
                                non_recyclable_and_non_biodegradable_materials: {
                                    type: 'integer'
                                },
                                packagings: {
                                    type: 'array',
                                    items: {
                                        type: 'object',
                                        title: 'adjustments_packaging_item',
                                        properties: {
                                            ecoscore_material_score: {
                                                type: 'integer'
                                            },
                                            ecoscore_shape_ratio: {
                                                type: 'integer'
                                            },
                                            material: {
                                                type: 'string'
                                            },
                                            shape: {
                                                type: 'string'
                                            },
                                            number_of_units: {
                                                type: 'integer',
                                                examples: [1]
                                            },
                                            quantity_per_unit: {
                                                type: 'string',
                                                examples: ['33 cL']
                                            },
                                            quantity_per_unit_unit: {
                                                type: 'string',
                                                examples: ['cl']
                                            },
                                            quantity_per_unit_value: {
                                                type: 'number',
                                                examples: [33]
                                            },
                                            recycling: {
                                                type: 'string',
                                                examples: ['en:recycle-in-sorting-bin']
                                            },
                                            weight_measured: {
                                                type: 'number',
                                                examples: [12.08]
                                            }
                                        }
                                    }
                                },
                                score: {
                                    type: 'integer'
                                },
                                value: {
                                    type: 'integer'
                                },
                                warning: {
                                    type: 'string'
                                }
                            }
                        },
                        production_system: {
                            type: 'object',
                            properties: {
                                labels: {
                                    type: 'array',
                                    examples: [['vegan', 'fat free', 'Kosher']],
                                    items: {
                                        type: 'string'
                                    }
                                },
                                value: {
                                    type: 'integer'
                                },
                                warning: {
                                    type: 'string'
                                }
                            }
                        },
                        threatened_species: {
                            type: 'object',
                            properties: {
                                ingredient: {
                                    type: 'string'
                                },
                                value: {
                                    type: 'integer'
                                }
                            }
                        }
                    }
                },
                agribalyse: {
                    type: 'object',
                    properties: {
                        agribalyse_proxy_food_code: {
                            type: 'string'
                        },
                        agribalyse_food_code: {
                            type: 'string'
                        },
                        co2_agriculture: {
                            type: 'number'
                        },
                        co2_consumption: {
                            type: 'integer'
                        },
                        co2_distribution: {
                            type: 'number'
                        },
                        co2_packaging: {
                            type: 'number'
                        },
                        co2_processing: {
                            type: 'number'
                        },
                        co2_total: {
                            type: 'number'
                        },
                        co2_transportation: {
                            type: 'number'
                        },
                        code: {
                            type: 'string'
                        },
                        dqr: {
                            type: 'string'
                        },
                        ef_agriculture: {
                            type: 'number'
                        },
                        ef_consumption: {
                            type: 'integer'
                        },
                        ef_distribution: {
                            type: 'number'
                        },
                        ef_packaging: {
                            type: 'number'
                        },
                        ef_processing: {
                            type: 'number'
                        },
                        ef_total: {
                            type: 'number'
                        },
                        ef_transportation: {
                            type: 'number'
                        },
                        is_beverage: {
                            type: 'integer'
                        },
                        name_en: {
                            type: 'string',
                            description: `This can be returned in many other languages
like name_fr (for french).
`
                        },
                        score: {
                            type: 'integer'
                        },
                        version: {
                            type: 'string'
                        },
                        warning: {
                            type: 'string'
                        }
                    }
                },
                grade: {
                    type: 'string'
                },
                grades: {
                    type: 'object',
                    patternProperties: {
                        '(?<country_code>\w\w)': {
                            type: 'string'
                        }
                    }
                },
                ecoscore_not_applicable_for_category: {
                    type: 'string'
                },
                missing: {
                    type: 'object',
                    properties: {
                        labels: {
                            type: 'integer'
                        },
                        origins: {
                            type: 'integer'
                        },
                        packagings: {
                            type: 'integer'
                        }
                    }
                },
                missing_data_warning: {
                    type: 'integer'
                },
                previous_data: {
                    type: 'object',
                    properties: {
                        grade: {
                            type: ['string', 'null']
                        },
                        score: {
                            type: ['integer', 'null']
                        },
                        agribalyse: {
                            '$ref': '#/components/schemas/Product-Eco-Score/properties/ecoscore_data/properties/agribalyse'
                        }
                    }
                },
                score: {
                    type: 'integer'
                },
                scores: {
                    type: 'object',
                    patternProperties: {
                        '(?<country_code>\w\w)': {
                            type: 'integer'
                        }
                    }
                },
                status: {
                    type: 'string'
                }
            }
        },
        ecoscore_extended_data_version: {
            type: 'string'
        },
        environment_impact_level: {
            type: 'string'
        },
        environment_impact_level_tags: {
            type: 'array',
            items: {
                type: 'object'
            }
        }
    }
} as const;

export const Product_IngredientsSchema = {
    type: 'object',
    title: 'product_ingredients',
    description: 'Fields about ingredients of a product',
    properties: {
        additives_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        allergens: {
            type: 'string',
            description: 'comma separated list of allergens'
        },
        allergens_lc: {
            type: 'string',
            description: 'language in which `allergens` where input'
        },
        allergens_hierarchy: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        allergens_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        ingredients: {
            '$ref': '#/components/schemas/Ingredient/properties/ingredients'
        },
        ingredients_analysis: {
            type: 'object',
            properties: {
                'en:palm-oil': {
                    type: 'array',
                    items: {
                        type: 'string'
                    }
                },
                'en:vegan-status-unknown': {
                    type: 'array',
                    items: {
                        type: 'string'
                    }
                },
                'en:vegetarian-status-unknown': {
                    type: 'array',
                    items: {
                        type: 'string'
                    }
                },
                'en:maybe-vegan': {
                    type: 'array',
                    items: {
                        type: 'string'
                    }
                },
                'en:maybe-vegetarian': {
                    type: 'array',
                    items: {
                        type: 'string'
                    }
                }
            }
        },
        ingredients_analysis_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        ingredients_from_or_that_may_be_from_palm_oil_n: {
            type: 'integer'
        },
        ingredients_from_palm_oil_n: {
            type: 'integer'
        },
        ingredients_from_palm_oil_tags: {
            type: 'array',
            items: {
                type: 'object'
            }
        },
        ingredients_hierarchy: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        ingredients_n: {
            type: 'integer'
        },
        ingredients_n_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        ingredients_original_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        ingredients_percent_analysis: {
            type: 'integer'
        },
        ingredients_sweeteners_n: {
            type: 'integer',
            description: `Number of sweeteners additives in the ingredients. Undefined if ingredients are not specified.
`
        },
        ingredients_non_nutritive_sweeteners_n: {
            type: 'integer',
            description: `Number of non-nutritive sweeteners additives (as specified in the Nutri-Score formula) in the ingredients. Undefined if ingredients are not specified.
`
        },
        ingredients_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        ingredients_lc: {
            type: 'string',
            description: `Language that was used to parse the ingredient list. If \`ingredients_text\` is available
for the product main language (\`lang\`), \`ingredients_lc=lang\`, otherwise we look at
\`ingredients_text\` fields for other languages and set \`ingredients_lc\` to the first
non-empty \`ingredient_text\`.
`
        },
        ingredients_text_it: {
            type: 'string',
            description: 'Ingredients text in Italian'
        },
        ingredients_text_en: {
            type: 'string',
            description: 'Ingredients text in English'
        },
        ingredients_text: {
            type: 'string',
            description: `Raw list of ingredients. This will get automatically
parsed and get used to compute the Eco-Score or find allergens, etc..

It's a copy of ingredients_text in the main language of the product (see \`lang\` proprety).
`,
            examples: ["Farine de bl√©* 67,4%, sucre de canne*, huile de tournesol ol√©ique*, graines de chia* 5,2%, son de bl√©*, oranges d√©shydrat√©es * 0,9%, farine de riz*, poudres √† lever (acide citrique, carbonates de sodium), ar√¥me naturel d'orange."]
        },
        ingredients_text_with_allergens: {
            type: 'string'
        },
        ingredients_text_with_allergens_it: {
            type: 'string',
            description: `Same text as \`ingredients_text\` but where allergens have HTML elements around them to identify them
`,
            examples: [`Farine de <span class="allergen">bl√©*</span> 67,4%, sucre de canne*, huile de tournesol ol√©ique*, graines de chia* 5,2%, <span class="allergen">son de bl√©*</span>, oranges d√©shydrat√©es * 0,9%, farine de riz*, poudres √† lever (acide citrique, carbonates de sodium), ar√¥me naturel d'orange.`]
        },
        ingredients_that_may_be_from_palm_oil_n: {
            type: 'integer'
        },
        ingredients_that_may_be_from_palm_oil_tags: {
            type: 'array',
            items: {
                type: 'object'
            }
        },
        ingredients_with_specified_percent_n: {
            type: 'integer'
        },
        ingredients_with_specified_percent_sum: {
            type: 'integer'
        },
        ingredients_with_unspecified_percent_n: {
            type: 'integer'
        },
        ingredients_with_unspecified_percent_sum: {
            type: 'integer'
        },
        known_ingredients_n: {
            type: 'integer'
        },
        origins: {
            type: 'string',
            description: `Origins of ingredients
`
        },
        origins_hierarchy: {
            type: 'array',
            items: {
                type: 'object'
            }
        },
        origins_lc: {
            type: 'string'
        },
        origins_tags: {
            type: 'array',
            items: {
                type: 'object'
            }
        },
        traces: {
            type: 'string',
            description: `List of substances that might cause allergies
that are present in trace amounts in the product
(this does not include the ingredients, as they
are not only present in trace amounts).
It is taxonomized with the allergens taxonomy.
`
        },
        traces_hierarchy: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        type: 'object'
                    },
                    {
                        type: 'string'
                    }
                ]
            }
        },
        traces_lc: {
            type: 'string'
        },
        traces_tags: {
            type: 'array',
            items: {
                oneOf: [
                    {
                        type: 'object'
                    },
                    {
                        type: 'string'
                    }
                ]
            }
        },
        unknown_ingredients_n: {
            type: 'integer'
        }
    },
    patternProperties: {
        'ingredients_text_(?<language_code>\w\w)': {
            type: 'string',
            description: `Raw list of ingredients in language given by 'language_code'.

See \`ingredients_text\`
`
        },
        'ingredients_text_with_allergens_(?<language_code>\w\w)': {
            description: `Like \`ingredients_text_with_allergens\` for a particular language
`,
            type: 'string'
        }
    }
} as const;

export const Product_NutritionSchema = {
    type: 'object',
    title: 'product_nutrition',
    description: `Nutrition fields of a product

Most of these properties are read-only.

See [how to add nutrition data](https://openfoodfacts.github.io/openfoodfacts-server/api/ref-cheatsheet/#add-nutrition-facts-values-units-and-base)
`,
    properties: {
        no_nutrition_data: {
            type: 'string',
            description: `When a product does not have nutrition data displayed on the
packaging, the user can check the field "Nutrition facts are
not specified on the product".
By doing so, the no_nutrition_data field takes the value "on".
This case is frequent (thousands of products).
`,
            examples: ['on']
        },
        nutrition_data_per: {
            type: 'string',
            enum: ['serving', '100g'],
            description: `The nutrition data on the package can be per serving or per 100g.

This is essential to understand if \`<nutrient>_value\` and \`<nutrient>\`
values in \`nutriments\` applies for a serving or for 100g.

**IMPORTANT:**
When writing products,
this setting applies to all existing nutrients values for the product,
not only the nutrient values sent in the write request.
So it should not be changed unless all nutrients values are provided
with values that match the nutrition_data_per field.
`
        },
        nutrition_data_prepared_per: {
            type: 'string',
            enum: ['serving', '100g'],
            description: `The nutrition data for prepared product on the package (if any) can be per serving or per 100g.

This is essential to understand if \`<nutrient>_prepared_value\` and \`<nutrient>_prepared\`
values in \`nutriments\` applies for a serving or for 100g.

See also important note on \`nutrition_data_per\`.
`
        },
        nutriments: {
            type: 'object',
            description: `All known nutrients for the product.

Note that each nutrients are declined with a variety of suffixes like \`_100g\`, \`_serving\`,
see patternProperties below.

A specific \`_unit\` is the unit used to measure the nutrient.

Beware that some properties are to be interpreted based upon \`nutrition_data_per\` value.

Also for products that have a nutrition table for prepared product
(eg. the nutrition facts for a bowl of milk with cocoa powder),
a \`_prepared\` suffix is added (before other suffixes).

You can get all possible nutrients from the
[nutrients taxonomy](https://static.openfoodfacts.org/data/taxonomies/nutrients.json)

**FIXME** add more nutrients with description.
`,
            properties: {
                alcohol: {
                    description: `Quantity of alcohol

(per 100g or per serving) in a standard unit (g or ml)
`,
                    type: 'number'
                },
                carbohydrates: {
                    type: 'number'
                },
                carbohydrates_100g: {
                    type: 'number',
                    format: 'float'
                },
                carbohydrates_serving: {
                    type: 'number',
                    format: 'float'
                },
                carbohydrates_unit: {
                    type: 'string',
                    enum: ['g', 'mg', 'Œºg']
                },
                carbohydrates_value: {
                    type: 'number',
                    format: 'float'
                },
                cocoa: {
                    type: 'number'
                },
                cocoa_100g: {
                    type: 'number'
                },
                cocoa_label: {
                    type: 'string'
                },
                cocoa_serving: {
                    type: 'number',
                    format: 'float'
                },
                cocoa_unit: {
                    type: 'string',
                    enum: ['g', 'mg', 'Œºg']
                },
                cocoa_value: {
                    type: 'number',
                    format: 'float'
                },
                energy: {
                    type: 'number',
                    description: `It is the same as \`energy-kj\` if we have it, or computed from \`energy-kcal\` otherwise

(per 100g or per serving) in kj
`
                },
                energy_100g: {
                    type: 'number',
                    format: 'float'
                },
                energy_value: {
                    type: 'number',
                    description: `energy_value will be equal to energy-kj_value if we have it or to energy-kcal_value otherwise
`
                },
                energy_serving: {
                    type: 'number',
                    format: 'float'
                },
                energy_unit: {
                    type: 'string',
                    enum: ['kcal', 'kJ'],
                    description: `Equal to energy-kj_unit if we have it or to energy-kcal_unit otherwise
`
                },
                energy_kj: {
                    type: 'number',
                    description: `energy in kj, if it is specified

(per 100g or per serving) in a standard unit (g or ml)
`
                },
                energy_kj_100g: {
                    type: 'number',
                    format: 'float'
                },
                energy_kj_serving: {
                    type: 'number',
                    format: 'float'
                },
                energy_kj_unit: {
                    type: 'string',
                    enum: ['kJ']
                },
                energy_kj_value: {
                    type: 'number',
                    format: 'float'
                },
                energy_kj_value_computed: {
                    type: 'number',
                    format: 'float'
                },
                fat: {
                    type: 'number'
                },
                fat_value: {
                    type: 'number'
                },
                fat_100g: {
                    type: 'number',
                    format: 'float'
                },
                fat_serving: {
                    type: 'number',
                    format: 'float'
                },
                fat_unit: {
                    type: 'string'
                },
                'nova-group_100g': {
                    type: 'integer',
                    minimum: 1,
                    maximum: 4
                },
                'nova-group_serving': {
                    type: 'integer',
                    minimum: 1,
                    maximum: 4
                },
                'nutrition-score-fr_100g': {
                    type: 'integer'
                },
                proteins_100g: {
                    type: 'number',
                    format: 'float'
                },
                proteins_serving: {
                    type: 'number',
                    format: 'float'
                },
                proteins_unit: {
                    type: 'string'
                },
                proteins_value: {
                    type: 'number',
                    format: 'float'
                },
                salt_100g: {
                    type: 'number',
                    format: 'float'
                },
                salt_serving: {
                    type: 'number',
                    format: 'float'
                },
                salt_unit: {
                    type: 'string'
                },
                salt_value: {
                    type: 'number',
                    format: 'float'
                },
                'saturated-fat': {
                    type: 'number'
                },
                'saturated-fat_100g': {
                    type: 'number',
                    format: 'float'
                },
                'saturated-fat_serving': {
                    type: 'number',
                    format: 'float'
                },
                'saturated-fat_unit': {
                    type: 'string'
                },
                'saturated-fat_value': {
                    type: 'number',
                    format: 'float'
                },
                sodium_100g: {
                    type: 'number',
                    format: 'float'
                },
                sodium_serving: {
                    type: 'number',
                    format: 'float'
                },
                sodium_unit: {
                    type: 'string'
                },
                sodium_value: {
                    type: 'number',
                    format: 'float'
                },
                sugars_100g: {
                    type: 'number',
                    format: 'float'
                },
                sugars_serving: {
                    type: 'number',
                    format: 'float'
                },
                sugars_unit: {
                    type: 'string'
                },
                sugars_value: {
                    type: 'number',
                    format: 'float'
                },
                fiber_100g: {
                    type: 'number',
                    format: 'float'
                },
                fiber_serving: {
                    type: 'number',
                    format: 'float'
                },
                fiber_unit: {
                    type: 'string'
                },
                fiber_value: {
                    type: 'number',
                    format: 'float'
                },
                'energy-kcal_100g': {
                    type: 'number'
                },
                'energy-kcal_serving': {
                    type: 'number'
                },
                'energy-kcal_unit': {
                    type: 'string'
                },
                'energy-kcal_value': {
                    type: 'number'
                },
                'energy-kcal_value_computed': {
                    type: 'number'
                },
                'energy-kcal': {
                    type: 'number',
                    description: `energy in kcal, if it is specified

(per 100g or per serving) in a standard unit (g or ml)
`
                },
                'fruits-vegetables-legumes-estimate-from-ingredients_serving': {
                    type: 'number'
                },
                'fruits-vegetables-legumes-estimate-from-ingredients_100g': {
                    type: 'number'
                },
                'fruits-vegetables-legumes-estimate-from-ingredients': {
                    type: 'number',
                    description: `An estimate, from the ingredients list of the percentage of fruits, vegetable and legumes.
This is an important information for Nutri-Score (2023 version) computation.
`
                },
                'fruits-vegetables-nuts-estimate-from-ingredients_serving': {
                    type: 'number'
                },
                'fruits-vegetables-nuts-estimate-from-ingredients_100g': {
                    type: 'number'
                },
                'fruits-vegetables-nuts-estimate-from-ingredients': {
                    type: 'number',
                    description: `An estimate, from the ingredients list of the percentage of fruits, vegetable and nuts.
This is an important information for Nutri-Score (2021 version) computation.
`
                },
                'nova-group': {
                    type: 'integer'
                },
                'nutrition-score-fr': {
                    description: `Experimental nutrition score derived from
the UK FSA score and adapted for the French market
(formula defined by the team of Professor Hercberg).
`
                },
                proteins: {
                    type: 'number'
                },
                salt: {
                    type: 'number'
                },
                sodium: {
                    type: 'number'
                },
                sugars: {
                    type: 'number'
                },
                fiber: {
                    type: 'integer'
                },
                'carbon-footprint-from-known-ingredients_product': {
                    type: 'integer'
                },
                'carbon-footprint-from-known-ingredients_serving': {
                    type: 'number'
                },
                erythritol: {
                    type: 'number',
                    description: `erythritol is a polyol which is not providing any energy.
As such, it needs not be taken into account when computing
the energy of a product. Eryhtritol is now displayed on
nutrition facts sheet of some products, mainly in the USA.
This value is entered either by contributors, either by
imports.
`,
                    examples: [12.5]
                }
            },
            patternProperties: {
                '(?<nutrient>[\w-]+)_unit': {
                    description: `The unit in which the nutrient for 100g or per serving is measured.

The possible values depends on the nutrient.

* \`g\` for grams
* \`mg\` for milligrams
* \`Œºg\` for micrograms
* \`cl\` for centiliters
* \`ml\` for mililiters
* \`dv\` for recommended daily intakes (aka [Dietary Reference Intake](https://en.wikipedia.org/wiki/Dietary_Reference_Intake))
* \`% vol\` for alcohol vol per 100 ml

ü§ì code: see the [Units module][units-module],
and [Food:default_unit_for_nid function][default-unit]

[units-module]: https://openfoodfacts.github.io/openfoodfacts-server/dev/ref-perl-pod/ProductOpener/Units.html
[default-unit]: https://openfoodfacts.github.io/openfoodfacts-server/dev/ref-perl-pod/ProductOpener/Food.html#default_unit_for_nid_(_%24nid)
`,
                    type: 'string',
                    enum: ['ÂÖ¨Êñ§', 'ÂÖ¨Âçá', 'kg', '–∫–≥', 'l', '–ª', 'ÊØ´ÂÖã', 'mg', '–º–≥', 'mcg', '¬µg', 'oz', 'fl oz', 'dl', '–¥–ª', 'cl', '–∫–ª', 'Êñ§', 'g', '', ' ', 'kJ', 'ÂÖã', 'ÂÖ¨ÂÖã', '–≥', '–º–ª', 'ml', 'mmol/l', 'ÊØ´Âçá', '% vol', 'ph', '%', '% dv', '% vol (alcohol)', 'iu', 'mol/l', 'mval/l', 'ppm', 'ÔøΩrh', 'ÔøΩfh', 'ÔøΩe', 'ÔøΩdh', 'gpg']
                },
                '(?<nutrient>[\w-]+)_100g': {
                    description: `The standardized value of a serving of 100g (or 100ml for liquids)
for the nutrient.

This is computed from the \`nutrient\` property,
the serving size (if needed), and the \`nutrient\`_unit field.

**Note**:
If you want to characterize products in a uniform way, this is the value you should use.
`,
                    type: 'number',
                    readOnly: true
                },
                '(?<nutrient>[\w-]+)_serving': {
                    description: `The standardized value of a serving for this product.
`,
                    type: 'number',
                    readOnly: true
                },
                '(?<nutrient>[\w-]+)_value': {
                    description: `The value input by the user / displayed on the product for the nutrient.

* per 100g or serving, depending on \`nutrition_data_per\`
* in the unit of corresponding <nutrient>_unit field.
`,
                    type: 'number',
                    readOnly: true
                },
                '(?<nutrient>[\w-]+)_prepared': {
                    description: `The value for nutrient for **prepared** product.
`,
                    type: 'number'
                },
                '(?<nutrient>[\w-]+)_prepared_unit': {
                    description: `The unit in which the nutrient of **prepared** product is measured.
`,
                    type: 'string'
                },
                '(?<nutrient>[\w-]+)_prepared_100g': {
                    description: `The standardized value of a serving of 100g (or 100ml for liquids)
for the nutrient, for **prepared** product.
`,
                    type: 'number',
                    readOnly: true
                },
                '(?<nutrient>[\w-]+)_prepared_serving': {
                    description: `The standardized value of a serving for the **prepared** product.
`,
                    type: 'number',
                    readOnly: true
                },
                '(?<nutrient>[\w-]+)_prepared_value': {
                    description: `The standardized value for a serving or 100g (or 100ml for liquids),
depending on \`nutrition_data_prepared_per\`
for the nutrient for **prepared** product.
`,
                    type: 'number',
                    readOnly: true
                }
            }
        },
        nutriscore_data: {
            description: `Detail of data the Nutri-Score was computed upon.

**Note**: this might not be stable, don't rely too much on this, or, at least, tell us !

**TODO** document each property
`,
            type: 'object',
            properties: {
                saturated_fat_ratio: {
                    type: 'number'
                },
                saturated_fat_ratio_points: {
                    type: 'integer'
                },
                saturated_fat_ratio_value: {
                    type: 'number'
                }
            }
        },
        nutrition_grade_fr: {
            type: 'string',
            description: `Nutrition grade (‚Äòa‚Äô to ‚Äòe‚Äô),
https://world.openfoodfacts.org/nutriscore.
`
        },
        nutrition_grades: {
            description: `Nutrition grades as a comma separated list.

Some products with multiple components might have multiple Nutri-Score
`,
            type: 'string'
        },
        nutrition_grades_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        nutrition_score_beverage: {
            type: 'integer'
        },
        nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients: {
            type: 'integer'
        },
        nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients_value: {
            type: 'integer'
        },
        nutrition_score_warning_no_fiber: {
            type: 'integer'
        },
        other_nutritional_substances_tags: {
            type: 'array',
            items: {
                type: 'object'
            }
        },
        unknown_nutrients_tags: {
            type: 'array',
            items: {
                type: 'object'
            }
        },
        vitamins_tags: {
            type: 'array',
            items: {
                type: 'object'
            }
        }
    }
} as const;

export const Product_NutriscoreSchema = {
    title: 'ProductNutriscore',
    type: 'object',
    properties: {
        nutriscore: {
            title: 'Nutriscores',
            type: 'object',
            properties: {
                2021: {
                    title: 'Nutriscore2021',
                    allOf: [
                        {
                            type: 'object',
                            properties: {
                                category_available: {
                                    type: 'integer',
                                    enum: [0, 1],
                                    examples: [1]
                                },
                                grade: {
                                    '$ref': '#/components/schemas/Product-Nutriscore/properties/nutriscore_tags/items',
                                    examples: ['d']
                                },
                                nutrients_available: {
                                    type: 'integer',
                                    enum: [0, 1],
                                    examples: [1]
                                },
                                nutriscore_applicable: {
                                    type: 'integer',
                                    enum: [0, 1],
                                    examples: [1]
                                },
                                nutriscore_computed: {
                                    type: 'integer',
                                    enum: [0, 1],
                                    examples: [1]
                                },
                                score: {
                                    type: 'integer',
                                    examples: [13, 18]
                                }
                            }
                        },
                        {
                            type: 'object',
                            properties: {
                                data: {
                                    '$ref': '#/components/schemas/Product-Nutriscore/properties/nutriscore_data'
                                }
                            }
                        }
                    ]
                },
                2023: {
                    title: 'Nutriscore2023',
                    allOf: [
                        {
                            '$ref': '#/components/schemas/Product-Nutriscore/properties/nutriscore/properties/2021/allOf/0'
                        },
                        {
                            type: 'object',
                            properties: {
                                data: {
                                    title: 'Nutriscore2023Data',
                                    allOf: [
                                        {
                                            '$ref': '#/components/schemas/Product-Nutriscore/properties/nutriscore_data/allOf/0/allOf/0'
                                        },
                                        {
                                            properties: {
                                                is_fat_oil_nuts_seeds: {
                                                    type: 'integer',
                                                    enum: [0, 1],
                                                    examples: [0]
                                                },
                                                is_red_meat_product: {
                                                    type: 'integer',
                                                    enum: [0, 1],
                                                    examples: [0]
                                                },
                                                components: {
                                                    title: 'Nutriscore2023DataComponents',
                                                    type: 'object',
                                                    properties: {
                                                        negative: {
                                                            type: 'array',
                                                            items: {
                                                                title: 'NutriscoreComponent',
                                                                type: 'object',
                                                                properties: {
                                                                    id: {
                                                                        type: 'string',
                                                                        examples: ['energy', 'sugars', 'saturated_fat', 'salt', 'fiber', 'fruits_vegetables_legumes']
                                                                    },
                                                                    points: {
                                                                        type: 'integer',
                                                                        examples: [5, 6, 7, 2, 1, 0]
                                                                    },
                                                                    points_max: {
                                                                        type: 'integer',
                                                                        examples: [10, 15, 20, 25, 5, 5]
                                                                    },
                                                                    unit: {
                                                                        type: 'string',
                                                                        examples: ['kJ', 'g', '%']
                                                                    },
                                                                    value: {
                                                                        type: ['null', 'number'],
                                                                        format: 'float',
                                                                        examples: [21.5, 6.2, 0.53, 3.8, 0]
                                                                    }
                                                                }
                                                            }
                                                        },
                                                        positive: {
                                                            type: 'array',
                                                            items: {
                                                                '$ref': '#/components/schemas/Product-Nutriscore/properties/nutriscore/properties/2023/allOf/1/properties/data/allOf/1/properties/components/properties/negative/items'
                                                            }
                                                        }
                                                    }
                                                },
                                                count_proteins: {
                                                    type: 'number',
                                                    format: 'float',
                                                    examples: [0]
                                                },
                                                count_proteins_reason: {
                                                    type: 'string',
                                                    examples: ['negative_points_greater_than_or_equal_to_11']
                                                },
                                                negative_points: {
                                                    type: 'integer',
                                                    examples: [19]
                                                },
                                                positive_points: {
                                                    type: 'integer',
                                                    examples: [1]
                                                },
                                                negative_points_max: {
                                                    type: 'integer',
                                                    examples: [55]
                                                },
                                                positive_points_max: {
                                                    type: 'integer',
                                                    examples: [10]
                                                },
                                                positive_nutrients: {
                                                    type: 'array',
                                                    items: {
                                                        type: 'string'
                                                    },
                                                    examples: [['fiber', 'fruits_vegetables_legumes']]
                                                }
                                            }
                                        }
                                    ]
                                }
                            }
                        }
                    ]
                }
            }
        },
        nutriscore_2021_tags: {
            '$ref': '#/components/schemas/Product-Nutriscore/properties/nutriscore_tags'
        },
        nutriscore_2023_tags: {
            '$ref': '#/components/schemas/Product-Nutriscore/properties/nutriscore_tags'
        },
        nutriscore_data: {
            title: 'Nutriscore2021Data',
            allOf: [
                {
                    title: 'Nutriscore2021InnerData',
                    allOf: [
                        {
                            type: 'object',
                            properties: {
                                is_beverage: {
                                    type: 'integer',
                                    enum: [0, 1],
                                    examples: [0]
                                },
                                is_cheese: {
                                    type: 'integer',
                                    enum: [0, 1],
                                    examples: [0]
                                },
                                is_water: {
                                    type: 'integer',
                                    enum: [0, 1],
                                    examples: [0]
                                }
                            }
                        },
                        {
                            properties: {
                                is_fat: {
                                    type: 'integer',
                                    enum: [0, 1],
                                    examples: [0]
                                },
                                energy: {
                                    type: 'integer',
                                    examples: [1996]
                                },
                                energy_points: {
                                    type: 'integer',
                                    examples: [5]
                                },
                                energy_value: {
                                    type: 'integer',
                                    examples: [1996]
                                },
                                fiber: {
                                    type: 'number',
                                    format: 'float',
                                    examples: [3.8]
                                },
                                fiber_points: {
                                    type: 'integer',
                                    examples: [4]
                                },
                                fiber_value: {
                                    type: 'number',
                                    format: 'float',
                                    examples: [3.8]
                                },
                                fruits_vegetables_nuts_colza_walnut_olive_oils: {
                                    type: 'number',
                                    format: 'float',
                                    examples: [0]
                                },
                                fruits_vegetables_nuts_colza_walnut_olive_oils_points: {
                                    type: 'integer',
                                    examples: [0]
                                },
                                fruits_vegetables_nuts_colza_walnut_olive_oils_value: {
                                    type: 'number',
                                    format: 'float',
                                    examples: [0]
                                },
                                proteins: {
                                    type: 'number',
                                    format: 'float',
                                    examples: [6.6]
                                },
                                proteins_points: {
                                    type: 'integer',
                                    examples: [4]
                                },
                                proteins_value: {
                                    type: 'number',
                                    format: 'float',
                                    examples: [6.6]
                                },
                                saturated_fat: {
                                    type: 'number',
                                    format: 'float',
                                    examples: [6.2]
                                },
                                saturated_fat_points: {
                                    type: 'integer',
                                    examples: [6]
                                },
                                saturated_fat_value: {
                                    type: 'number',
                                    format: 'float',
                                    examples: [6.2]
                                },
                                sodium: {
                                    type: 'number',
                                    format: 'float',
                                    examples: [210]
                                },
                                sodium_points: {
                                    type: 'integer',
                                    examples: [2]
                                },
                                sodium_value: {
                                    type: 'number',
                                    format: 'float',
                                    examples: [210]
                                },
                                sugars: {
                                    type: 'number',
                                    format: 'float',
                                    examples: [21.5]
                                },
                                sugars_points: {
                                    type: 'integer',
                                    examples: [4]
                                },
                                sugars_value: {
                                    type: 'number',
                                    format: 'float',
                                    examples: [21.5]
                                },
                                negative_points: {
                                    type: 'integer',
                                    examples: [17]
                                },
                                positive_points: {
                                    type: 'integer',
                                    examples: [4]
                                }
                            }
                        }
                    ]
                },
                {
                    type: 'object',
                    properties: {
                        grade: {
                            '$ref': '#/components/schemas/Product-Nutriscore/properties/nutriscore_tags/items',
                            examples: ['d']
                        },
                        score: {
                            type: 'integer',
                            examples: [13]
                        }
                    }
                }
            ]
        },
        nutriscore_grade: {
            '$ref': '#/components/schemas/Product-Nutriscore/properties/nutriscore_tags/items',
            examples: ['d']
        },
        nutriscore_score: {
            description: `Nutri-Score for the product as an integer (see also \`nutriscore_grade\`).
`,
            type: 'integer',
            examples: [13]
        },
        nutriscore_score_opposite: {
            type: 'integer',
            examples: [-13]
        },
        nutriscore_tags: {
            type: 'array',
            items: {
                description: `Nutri-Score for the product as a letter.

See https://world.openfoodfacts.org/nutriscore.
`,
                type: 'string',
                enum: ['a', 'b', 'c', 'd', 'e']
            },
            examples: [['d']]
        },
        nutriscore_version: {
            type: 'string'
        }
    }
} as const;

export const Product_QualitySchema = {
    type: 'object',
    description: `This is data that is linked to products data quality
`,
    properties: {
        data_quality_bugs_tags: {
            type: 'array',
            items: {
                type: 'object'
            }
        },
        data_quality_errors_tags: {
            type: 'array',
            items: {
                type: 'object'
            }
        },
        data_quality_info_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        data_quality_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        data_quality_warnings_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        data_sources: {
            type: 'string',
            description: `Source of data imported from producers.
`
        },
        data_sources_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        debug_param_sorted_langs: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        last_check_dates_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        last_checked_t: {
            type: 'integer'
        },
        last_checker: {
            type: 'string'
        },
        states: {
            description: `comma separated list of values indicating some states of the product,
like things to be done, or to be completed.
See [states taxonomy](https://static.openfoodfacts.net/data/taxonomies/states.json)
`,
            type: 'string',
            examples: ['en:to-be-completed, en:nutrition-facts-completed, en:ingredients-to-be-completed, en:expiration-date-to-be-completed, en:packaging-code-to-be-completed, en:characteristics-to-be-completed, en:origins-to-be-completed, en:categories-completed, en:brands-completed, en:packaging-to-be-completed, en:quantity-completed, en:product-name-completed, en:photos-to-be-validated, en:packaging-photo-to-be-selected, en:nutrition-photo-selected, en:ingredients-photo-selected, en:front-photo-selected, en:photos-uploaded']
        },
        states_hierarchy: {
            type: 'array',
            items: {
                type: 'string'
            },
            examples: [['en:to-be-completed', 'en:nutrition-facts-completed', 'en:ingredients-to-be-completed', 'en:expiration-date-to-be-completed', 'en:packaging-code-to-be-completed', 'en:characteristics-to-be-completed', 'en:origins-to-be-completed', 'en:categories-completed', 'en:brands-completed', 'en:packaging-to-be-completed', 'en:quantity-completed', 'en:product-name-completed', 'en:photos-to-be-validated', 'en:packaging-photo-to-be-selected', 'en:nutrition-photo-selected', 'en:ingredients-photo-selected', 'en:front-photo-selected', 'en:photos-uploaded']]
        },
        states_tags: {
            type: 'array',
            items: {
                description: `Each state describe something that is completed or is to be done or improved on the product.

Refer to [states taxonomy](https://static.openfoodfacts.net/data/taxonomies/states.json)
`,
                type: 'string'
            }
        },
        misc_tags: {
            description: `Information about different aspect of the product
`,
            type: 'array',
            items: {
                type: 'string'
            }
        }
    }
} as const;

export const Product_ExtendedSchema = {
    title: 'product_extended',
    type: 'object',
    properties: {
        additives_original_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        additives_prev_original_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        added_countries_tags: {
            type: 'array',
            items: {
                type: 'object'
            }
        },
        allergens_from_ingredients: {
            type: 'string'
        },
        allergens_from_user: {
            type: 'string'
        },
        amino_acids_prev_tags: {
            type: 'array',
            items: {
                type: 'object'
            }
        },
        amino_acids_tags: {
            type: 'array',
            items: {
                type: 'object'
            }
        },
        carbon_footprint_percent_of_known_ingredients: {
            type: 'integer'
        },
        categories_properties: {
            type: 'object',
            properties: {
                'agribalyse_food_code:en': {
                    type: 'string'
                },
                'agribalyse_proxy_food_code:en': {
                    type: 'string'
                },
                'ciqual_food_code:en': {
                    type: 'string'
                }
            }
        },
        categories_properties_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        category_properties: {
            type: 'object',
            additionalProperties: {
                description: 'those are properties taken from the category taxonomy',
                type: 'string'
            }
        },
        ciqual_food_name_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        compared_to_category: {
            type: 'string',
            description: `the category to use for comparison.

**TODO** explain how it is chosen.
`
        },
        conservation_conditions: {
            type: 'string'
        },
        customer_service: {
            type: 'string',
            description: `Contact info of customer service.
`
        },
        expiration_date: {
            type: 'string'
        },
        link: {
            type: 'string',
            description: `link to the product on the website of the producer
`
        },
        main_countries_tags: {
            type: 'array',
            items: {
                type: 'object'
            }
        },
        minerals_prev_tags: {
            type: 'array',
            items: {
                type: 'object'
            }
        },
        minerals_tags: {
            type: 'array',
            items: {
                type: 'object'
            }
        },
        owner_fields: {
            type: 'object',
            description: `Those are fields provided by the producer (through producers platform),
and the value he provided.
`,
            properties: {
                additionalProperties: {
                    description: `you can retrieve all kind of properties, the same as on the parent object (the product).
It's not processed entries (like tags for example) but raw ones.
`,
                    oneOf: [
                        {
                            type: 'integer'
                        },
                        {
                            type: 'string'
                        },
                        {
                            type: 'object'
                        }
                    ]
                }
            }
        },
        nova_groups_markers: {
            type: 'object',
            description: `Detail of ingredients or processing that makes the products having Nova 3 or 4
`,
            propertyNames: {
                description: 'Markers of level 3, 4, ...',
                type: 'integer',
                enum: [3, 4]
            },
            additionalProperties: {
                type: 'array',
                items: {
                    type: 'array',
                    items: {
                        description: 'This array has two elements for each marker. The first element is the tag type of the marker (e.g. "ingredients", "additives", "categories"), and the second is the tag id in the taxonomy (e.g. "en:e471")',
                        type: 'string'
                    }
                }
            }
        },
        nucleotides_tags: {
            type: 'array',
            items: {
                type: 'object'
            }
        },
        origin: {
            type: 'string'
        },
        purchase_places: {
            type: 'string',
            description: `Country, state, or city where the product can be purchased.
`,
            examples: ['Paris']
        },
        purchase_places_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        stores: {
            type: 'string',
            description: `Distributor name.
`,
            examples: ['Walmart']
        },
        stores_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        traces_from_ingredients: {
            type: 'string'
        },
        traces_from_user: {
            type: 'string'
        }
    },
    patternProperties: {
        'conservation_conditions_(?<language_code>\w\w)': {
            type: 'string'
        },
        'customer_service_(?<language_code>\w\w)': {
            type: 'string'
        },
        'origin_(?<language_code>\w\w)': {
            type: 'string',
            description: `\`origin\` in language indicated by \`language_code\`
`
        }
    }
} as const;

export const Product_MetadataSchema = {
    type: 'object',
    description: `Metadata of a product (author, editors, creation date, etc.)
`,
    properties: {
        created_t: {
            type: 'integer',
            description: `Date when the product was added (UNIX timestamp format).
See also \`entry_dates_tags\`
`,
            examples: [1457680652]
        },
        creator: {
            type: 'string',
            description: `The contributor who added the product first.
`
        },
        editors_tags: {
            description: `List of editors who edited the product.
`,
            type: 'array',
            items: {
                type: 'string'
            }
        },
        informers_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        interface_version_created: {
            type: 'string'
        },
        interface_version_modified: {
            type: 'string'
        },
        languages: {
            type: 'object',
            patternProperties: {
                'en:(?<language_name>\w\w)': {
                    type: 'integer',
                    description: `**TODO** explain !
`
                }
            }
        },
        languages_codes: {
            type: 'object',
            patternProperties: {
                '(?<language_code>\w\w)': {
                    type: 'integer'
                }
            },
            description: `Same as \`languages\` but by language code, instead of language tags
`
        },
        languages_hierarchy: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        languages_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        last_edit_dates_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        last_editor: {
            type: 'string'
        },
        last_modified_by: {
            type: 'string',
            description: `The username of the user who last modified the product.
`,
            examples: ['sebleouf']
        },
        last_modified_t: {
            type: 'integer',
            description: `Date when the product page was last modified.
`
        },
        owner: {
            description: `Id of the producer in case he provides his own data about a product (producer platform).
`,
            type: 'string'
        },
        owners_tags: {
            description: `Tagyfied version of owner
`,
            type: 'string'
        },
        photographers_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        rev: {
            description: 'revision number of this product version (each edit adds a revision)',
            type: 'integer'
        },
        sources: {
            type: 'array',
            items: {
                type: 'object',
                title: 'product_meta_source',
                properties: {
                    fields: {
                        type: 'array',
                        items: {
                            type: 'string'
                        }
                    },
                    id: {
                        type: 'string'
                    },
                    images: {
                        type: 'array',
                        items: {
                            type: 'object'
                        }
                    },
                    import_t: {
                        type: 'integer'
                    },
                    manufacturer: {
                        type: ['integer', 'string']
                    },
                    name: {
                        type: 'string'
                    },
                    source_licence: {
                        type: 'string'
                    },
                    source_licence_url: {
                        type: 'string'
                    },
                    url: {
                        type: ['null', 'string']
                    }
                }
            }
        },
        sources_fields: {
            type: 'object',
            title: 'product_meta_source_fields',
            properties: {
                'org-gs1': {
                    type: 'object',
                    properties: {
                        gln: {
                            type: 'string'
                        },
                        gpcCategoryCode: {
                            type: 'string'
                        },
                        gpcCategoryName: {
                            type: 'string'
                        },
                        isAllergenRelevantDataProvided: {
                            type: 'string'
                        },
                        lastChangeDateTime: {
                            type: 'string'
                        },
                        partyName: {
                            type: 'string'
                        },
                        productionVariantDescription: {
                            type: 'string'
                        },
                        publicationDateTime: {
                            type: 'string'
                        }
                    }
                }
            }
        },
        teams: {
            type: 'string'
        },
        teams_tags: {
            type: 'array',
            items: {
                type: 'string'
            }
        },
        update_key: {
            type: 'string'
        }
    }
} as const;

export const Product_Knowledge_PanelsSchema = {
    type: 'object',
    description: `Knowledge panels for a product
`,
    properties: {
        knowledge_panels: {
            type: 'object',
            title: 'panels',
            description: `The panels object is a dictionary of individual panel objects.
Each key of the dictionary is the id of the panel, and the value is the panel object.

Apps typically display a number of root panels with known panel ids (e.g. health_card and environment_card). Panels can reference other panels and display them as sub-panels.`,
            examples: [
                {
                    additionalProperties: 'string'
                }
            ],
            properties: {
                additionalProperties: {
                    title: 'panel',
                    type: 'object',
                    description: 'Each panel contains an optional title and an optional array of elements.',
                    properties: {
                        type: {
                            type: 'string',
                            description: 'Type of the panel. If set to "card", the panel and its sub-panels should be displayed in a card. If set to "inline", the panel should have its content always displayed.'
                        },
                        expanded: {
                            type: 'boolean',
                            description: 'If true, the panel is to be displayed already expanded. If false, only the title should be displayed, and the user should be able to click or tap it to open the panel and display the elements.'
                        },
                        expand_for: {
                            type: 'string',
                            description: 'If set to "large", the content of the panel should be expanded on large screens, but it should still be possible to unexpand it.'
                        },
                        evaluation: {
                            type: 'string',
                            description: 'A simple assessment of the panel value, typically used to format fonts, et.c e.g. bad = red',
                            enum: ['good', 'average', 'neutral', 'bad', 'unknown']
                        },
                        title_element: {
                            title: 'title_element',
                            'x-stoplight': {
                                id: 'lox0wvl9bdgy2'
                            },
                            type: 'object',
                            description: 'The title of a panel.',
                            properties: {
                                name: {
                                    type: 'string',
                                    description: 'A short name of this panel, not including any actual values'
                                },
                                title: {
                                    type: 'string'
                                },
                                type: {
                                    type: 'string',
                                    enum: ['grade', 'percentage'],
                                    description: 'Used to indicate how the value of this item is measured, such as "grade" for Nutri-Score and Eco-Score or "percentage" for Salt'
                                },
                                grade: {
                                    type: 'string',
                                    description: 'The value for this panel where it corresponds to a A to E grade such as the Nutri-Score of the Eco-Score.',
                                    enum: ['a', 'b', 'c', 'd', 'e', 'unknown']
                                },
                                value: {
                                    type: 'number',
                                    description: 'The numeric value of the panel, where the type is "percentage"'
                                },
                                icon_url: {
                                    type: 'string'
                                },
                                icon_color_from_evaluation: {
                                    type: 'string'
                                },
                                icon_size: {
                                    type: 'string',
                                    description: `If set to "small", the icon should be displayed at a small size.
`
                                }
                            }
                        },
                        elements: {
                            type: 'array',
                            description: 'An ordered list of elements to display in the content of the panel.',
                            items: {
                                title: 'element',
                                'x-stoplight': {
                                    id: 'e2ybdrtmx0tme'
                                },
                                type: 'object',
                                description: `Each element object contains one specific element object such as a text element or an image element.
`,
                                properties: {
                                    type: {
                                        type: 'string',
                                        enum: ['text', 'image', 'action', 'panel', 'panel_group', 'table'],
                                        description: `The type of the included element object.
The type also indicates which field contains the included element object.
e.g. if the type is "text", the included element object will be in the "text_element" field.

Note that in the future, new type of element may be added,
so your code should ignore unrecognized types, and unknown properties.

TODO: add Map type
`
                                    },
                                    text_element: {
                                        title: 'text_element',
                                        'x-stoplight': {
                                            id: 'vdwxlt73qnqfa'
                                        },
                                        type: 'object',
                                        description: `A text in simple HTML format to display.

For some specific texts that correspond to a product field (e.g. a product name, the ingredients list of a product),the edit_field_* fields are used to indicate how to edit the field value.`,
                                        properties: {
                                            type: {
                                                type: 'string',
                                                description: `the type of text, might influence the way you display it.
`,
                                                enum: ['summary', 'warning', 'notes']
                                            },
                                            html: {
                                                type: 'string',
                                                description: 'Text to display in HTML format.'
                                            },
                                            language: {
                                                type: 'string',
                                                description: 'Language of the text. The name of the language is returned in the language requested when making the API call. e.g. if the text is in Polish, and the requested language is French, the language field will contain "Polonais" (French for "Polish"). Only set for specific fields such as the list of ingredients of a product.'
                                            },
                                            lc: {
                                                type: 'string',
                                                description: '2 letter language code for the text. Only set for specific fields such as the list of ingredients of a product.'
                                            },
                                            edit_field_id: {
                                                type: 'string',
                                                description: 'id of the field used to edit this text in the product edit API.'
                                            },
                                            edit_field_type: {
                                                type: 'string',
                                                description: 'Type of the product field.'
                                            },
                                            edit_field_value: {
                                                type: 'string',
                                                description: 'Current value of the product field. This may differ from the html field which can contain extra formating.'
                                            },
                                            source_url: {
                                                type: 'string',
                                                description: 'Link to the source',
                                                examples: ['https://en.wikipedia.org/wiki/Sodium acetate']
                                            },
                                            source_text: {
                                                type: 'string',
                                                description: 'name of the source',
                                                examples: ['Wikipedia']
                                            },
                                            source_lc: {
                                                type: 'string',
                                                description: 'Source locale name',
                                                examples: ['en']
                                            },
                                            source_language: {
                                                type: 'string',
                                                description: 'Human readable source locale name',
                                                examples: ['English']
                                            }
                                        }
                                    },
                                    image_element: {
                                        title: 'image_element',
                                        'x-stoplight': {
                                            id: 'k4v4kwt489q3j'
                                        },
                                        type: 'object',
                                        properties: {
                                            url: {
                                                type: 'string',
                                                description: 'full URL of the image'
                                            },
                                            width: {
                                                type: 'integer',
                                                description: `Width of the image.

This is just a suggestion coming from the server, 
the client may choose to use its own dimensions for the image.
`
                                            },
                                            height: {
                                                type: 'integer',
                                                description: `Height of the image.

This is just a suggestion coming from the server,
the client may choose to use its own dimensions for the image.
`
                                            },
                                            alt_text: {
                                                type: 'string',
                                                description: 'Alt Text of the image.'
                                            }
                                        }
                                    },
                                    action_element: {
                                        type: 'string'
                                    },
                                    panel_element: {
                                        title: 'panel_element',
                                        'x-stoplight': {
                                            id: 'ymx41elz4yrnj'
                                        },
                                        type: 'object',
                                        description: 'Panels can include other panels as sub-panels using the panel_element.',
                                        properties: {
                                            panel_id: {
                                                type: 'string',
                                                description: 'The id of the panel to include. The id is the key of the panel in the panels object returned in the knowledge_panels field.'
                                            }
                                        }
                                    },
                                    panel_group_element: {
                                        title: 'panel_group_element',
                                        'x-stoplight': {
                                            id: 'b7emlfrgiuue2'
                                        },
                                        type: 'object',
                                        properties: {
                                            title: {
                                                type: 'string'
                                            },
                                            panel_ids: {
                                                type: 'array',
                                                description: 'The ids of the panels to include. The ids are the keys of the panels in the panels object returned in the knowledge_panels field.',
                                                items: {
                                                    type: 'string'
                                                }
                                            }
                                        },
                                        description: 'The panel group element is used to display an optional title followed by a number of sub-panels.'
                                    },
                                    table_element: {
                                        title: 'table_element',
                                        type: 'object',
                                        description: 'Element to display a table.',
                                        properties: {
                                            id: {
                                                type: 'string',
                                                description: 'An id for the table.'
                                            },
                                            title: {
                                                type: 'string',
                                                description: `Title of the column.
`
                                            },
                                            rows: {
                                                type: 'string'
                                            },
                                            columns: {
                                                type: 'array',
                                                items: {
                                                    type: 'object',
                                                    title: 'table_column',
                                                    properties: {
                                                        type: {
                                                            type: 'string'
                                                        },
                                                        text: {
                                                            type: 'string'
                                                        },
                                                        text_for_small_screens: {
                                                            type: 'string'
                                                        },
                                                        style: {
                                                            type: 'string'
                                                        },
                                                        column_group_id: {
                                                            type: 'string'
                                                        },
                                                        shown_by_default: {
                                                            type: 'boolean'
                                                        }
                                                    }
                                                }
                                            }
                                        }
                                    }
                                },
                                required: ['type']
                            }
                        },
                        level: {
                            type: 'string',
                            description: `a message level, as levels we use in log.
It might help theming the panel visualy
`,
                            examples: ['info']
                        },
                        size: {
                            type: 'string',
                            enum: ['small'],
                            description: `size is either empty (normal display) 
or small to indicate a panel that should have a smaller font size
`,
                            examples: ['small']
                        },
                        topics: {
                            type: 'array',
                            items: {
                                type: 'string',
                                examples: ['health']
                            }
                        }
                    }
                }
            },
            readOnly: true
        }
    }
} as const;

export const Product_Attribute_GroupsSchema = {
    type: 'object',
    description: `Specific data about a product to enable personal ranking
`,
    properties: {
        attribute_groups: {
            type: 'array',
            description: 'Each element is an attribute that can help compute a personal ranking for the product',
            items: {
                title: 'product_attribute_group',
                type: 'object',
                properties: {
                    id: {
                        type: 'string',
                        description: `Unique id of the attribute.

It will be use to match against preferences parameters.
`
                    },
                    status: {
                        type: 'string',
                        enum: ['known', 'unknown'],
                        description: 'wether we have the information to really compute this criteria or not.'
                    },
                    title: {
                        type: 'string',
                        description: `A descriptive sentence about the situation of the product concerning attribute
`,
                        examples: ['Does not contain: Molluscs']
                    },
                    match: {
                        type: 'number',
                        format: 'float',
                        minimum: 0,
                        maximum: 100,
                        description: `a numeric value for the match,
telling how much the products ranks well for this particular attribute.
The higher the value, the better the match.
`
                    },
                    grade: {
                        description: 'every attribute as a grade for a to e',
                        type: 'string',
                        enum: ['unknown', 'a', 'b', 'c', 'd', 'e']
                    },
                    name: {
                        type: 'string',
                        description: 'The name of attribute, for eventual display'
                    },
                    icon_url: {
                        type: 'string',
                        description: 'an icon representing the attribute match (often using a color)'
                    },
                    description: {
                        type: 'string',
                        description: 'An eventual description of the value of the property upon which this attribute is based'
                    },
                    description_short: {
                        type: 'string',
                        description: 'An eventual short description of the value of the property upon which this attribute is based'
                    }
                }
            }
        }
    }
} as const;

export const ProductSchema = {
    type: 'object',
    title: 'product',
    description: `This is all the fields describing a product and how to display it on a page.

Refer to the different sub schema for more readable entries:

* [Product Base](#cmp--schemas-product-base): Base fields of a product
* [Product Misc](#cmp--schemas-product-misc): Miscellaneous but important fields of a product
* [Product Tags](#cmp--schemas-product-tags): Tags fields on a product
* [Product Images](#cmp--schemas-product-images): Information about Images of a product
* [Product Eco-Score](#cmp--schemas-product-ecoscore): Fields related to Eco-Score for a product
* [Product Ingredients](#cmp--schemas-product-ingredients): Fields about ingredients of a product
* [Product Nutrition](#cmp--schemas-product-nutrition): Nutrition fields of a product
* [Product Data Quality](#cmp--schemas-product-quality): fields related to data quality for a product
* [Product Extended](#cmp--schemas-product-extended): TODO
* [Product Metadata](#cmp--schemas-product-meta): Metadata of a product (author, editors, etc.)
* [Product Knowledge Panels](#cmp--schemas-product-knowledge-panels): Knowledge panels for a product
* [Product Attribute Groups](#cmp--schemas-product-attribute-groups): Attribute groups for personal product matching
`,
    allOf: [
        {
            '$ref': '#/components/schemas/Product-Base'
        },
        {
            '$ref': '#/components/schemas/Product-Misc'
        },
        {
            '$ref': '#/components/schemas/Product-Tags'
        },
        {
            '$ref': '#/components/schemas/Product-Images'
        },
        {
            '$ref': '#/components/schemas/Product-Eco-Score'
        },
        {
            '$ref': '#/components/schemas/Product-Ingredients'
        },
        {
            '$ref': '#/components/schemas/Product-Nutrition'
        },
        {
            '$ref': '#/components/schemas/Product-Nutriscore'
        },
        {
            '$ref': '#/components/schemas/Product-Quality'
        },
        {
            '$ref': '#/components/schemas/Product-Extended'
        },
        {
            '$ref': '#/components/schemas/Product-Metadata'
        },
        {
            '$ref': '#/components/schemas/Product-Knowledge-Panels'
        },
        {
            '$ref': '#/components/schemas/Product-Attribute-Groups'
        }
    ]
} as const;

export const IngredientSchema = {
    title: 'ingredient',
    type: 'object',
    properties: {
        ciqual_food_code: {
            type: 'string'
        },
        ciqual_proxy_food_code: {
            type: 'string'
        },
        ecobalyse_code: {
            type: 'string'
        },
        from_palm_oil: {
            type: 'string'
        },
        id: {
            type: 'string'
        },
        ingredients: {
            title: 'ingredients',
            type: 'array',
            description: `This structure gives the different ingredients and some information about them,
like estimate on their quantity.
`,
            items: {
                '$ref': '#/components/schemas/Ingredient'
            }
        },
        percent: {
            type: 'integer',
            description: 'The percentage of the ingredient.'
        },
        is_in_taxonomy: {
            type: 'integer'
        },
        percent_estimate: {
            type: 'number',
            description: 'Estimated percentage of the ingredient.'
        },
        percent_max: {
            type: ['string', 'number'],
            description: 'Maximum percentage of the ingredient.'
        },
        percent_min: {
            type: 'integer',
            description: 'Minimum percentage of the ingredient.'
        },
        text: {
            type: 'string',
            description: 'Text description of the ingredient.'
        },
        vegan: {
            type: 'string',
            description: 'Indicates if the ingredient is vegan.'
        },
        vegetarian: {
            type: 'string',
            description: 'Indicates if the ingredient is vegetarian.'
        }
    }
} as const;

export const NutrientSchema = {
    type: 'object',
    title: 'nutrient',
    properties: {
        id: {
            type: 'string',
            description: 'id of the nutrient'
        },
        name: {
            type: 'string',
            description: 'Name of the nutrient in the requested language'
        },
        important: {
            type: 'boolean',
            description: 'Indicates if the nutrient is always shown on the nutrition facts table'
        },
        display_in_edit_form: {
            type: 'boolean',
            description: 'Indicates if the nutrient should be shown in the nutrition facts edit form'
        },
        unit: {
            description: 'Default unit of the nutrient',
            type: 'string',
            enum: ['g', 'mg', 'Œºg', 'cl', 'ml', 'dv', '% vol', '%']
        },
        nutrients: {
            type: 'array',
            description: `Nutrients and sub-nutrients of a product, with their name and default unit.
(e.g. saturated-fat is a sub-nutrient of fat).
`,
            items: {
                '$ref': '#/components/schemas/Nutrient'
            }
        }
    }
} as const;