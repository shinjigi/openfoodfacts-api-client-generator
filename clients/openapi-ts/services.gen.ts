// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options, formDataBodySerializer, urlSearchParamsBodySerializer } from '@hey-api/client-fetch';
import type { GetProductByBarcodeData, GetProductByBarcodeError, GetProductByBarcodeResponse, GetCgiProductImageUploadPlData, GetCgiProductImageUploadPlError, GetCgiProductImageUploadPlResponse, GetCgiIngredientsPlData, GetCgiIngredientsPlError, GetCgiIngredientsPlResponse, PostCgiProductImageCropPlData, PostCgiProductImageCropPlError, PostCgiProductImageCropPlResponse, GetCgiProductImageCropPlData, GetCgiProductImageCropPlError, GetCgiProductImageCropPlResponse, PostCgiProductImageUnselectPlData, PostCgiProductImageUnselectPlError, PostCgiProductImageUnselectPlResponse, PostCgiProductJqm2PlData, PostCgiProductJqm2PlError, PostCgiProductJqm2PlResponse, GetSearchData, GetSearchError, GetSearchResponse, GetCgiSuggestPlData, GetCgiSuggestPlError, GetCgiSuggestPlResponse, GetCgiNutrientsPlData, GetCgiNutrientsPlError, GetCgiNutrientsPlResponse, GetAttributeGroupsData, GetAttributeGroupsError, GetAttributeGroupsResponse, GetPreferencesData, GetPreferencesError, GetPreferencesResponse, GetCgiSessionPlData, GetCgiSessionPlError, GetCgiSessionPlResponse } from './types.gen';

export const client = createClient(createConfig());

/**
 * Get information for a specific product by barcode
 * Fetches product details by its unique barcode.
 * Can return all product details or specific fields like knowledge panels.
 *
 */
export const getProductByBarcode = <ThrowOnError extends boolean = false>(options: Options<GetProductByBarcodeData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetProductByBarcodeResponse, GetProductByBarcodeError, ThrowOnError>({
        ...options,
        url: '/api/v2/product/{barcode}'
    });
};

/**
 * Add a Photo to an Existing Product
 * Photos are source and proof of data.
 * The first photo uploaded for a product is
 * auto-selected as the product’s “front” photo.'
 *
 */
export const getCgiProductImageUploadPl = <ThrowOnError extends boolean = false>(options?: Options<GetCgiProductImageUploadPlData, ThrowOnError>) => {
    return (options?.client ?? client).post<GetCgiProductImageUploadPlResponse, GetCgiProductImageUploadPlError, ThrowOnError>({
        ...options,
        ...formDataBodySerializer,
        headers: {
            'Content-Type': null,
            ...options?.headers
        },
        url: '/cgi/product_image_upload.pl'
    });
};

/**
 * Performing OCR on a Product
 * Open Food Facts uses optical character recognition (OCR) to retrieve nutritional data and other information from the product labels.
 *
 */
export const getCgiIngredientsPl = <ThrowOnError extends boolean = false>(options: Options<GetCgiIngredientsPlData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCgiIngredientsPlResponse, GetCgiIngredientsPlError, ThrowOnError>({
        ...options,
        url: '/cgi/ingredients.pl'
    });
};

/**
 * Crop A Photo
 * Cropping is only relevant for editing existing products.
 * You cannot crop an image the first time you upload it to the system.
 *
 */
export const postCgiProductImageCropPl = <ThrowOnError extends boolean = false>(options: Options<PostCgiProductImageCropPlData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostCgiProductImageCropPlResponse, PostCgiProductImageCropPlError, ThrowOnError>({
        ...options,
        ...formDataBodySerializer,
        headers: {
            'Content-Type': null,
            ...options?.headers
        },
        url: '/cgi/product_image_crop.pl'
    });
};

/**
 * Rotate A Photo
 * Although we recommend rotating photos manually and uploading a new version of the image,
 * the OFF API allows you to make api calls to automate this process.
 * You can rotate existing photos by setting the angle to 90º, 180º, or 270º clockwise.
 *
 */
export const getCgiProductImageCropPl = <ThrowOnError extends boolean = false>(options: Options<GetCgiProductImageCropPlData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCgiProductImageCropPlResponse, GetCgiProductImageCropPlError, ThrowOnError>({
        ...options,
        url: '/cgi/product_image_crop.pl'
    });
};

/**
 * Unselect A Photo
 * This endpoint allows the user to unselect a photo for a product.
 * The user must provide the product code and the image ID to unselect.
 *
 */
export const postCgiProductImageUnselectPl = <ThrowOnError extends boolean = false>(options?: Options<PostCgiProductImageUnselectPlData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostCgiProductImageUnselectPlResponse, PostCgiProductImageUnselectPlError, ThrowOnError>({
        ...options,
        ...formDataBodySerializer,
        headers: {
            'Content-Type': null,
            ...options?.headers
        },
        url: '/cgi/product_image_unselect.pl'
    });
};

/**
 * Add or Edit A Product
 * This updates a product.
 *
 * Note: If the barcode exists then you will be editing the existing product,
 * However if it doesn''t you will be creating a new product with that unique barcode,
 * and adding properties to the product.
 *
 */
export const postCgiProductJqm2Pl = <ThrowOnError extends boolean = false>(options?: Options<PostCgiProductJqm2PlData, ThrowOnError>) => {
    return (options?.client ?? client).post<PostCgiProductJqm2PlResponse, PostCgiProductJqm2PlError, ThrowOnError>({
        ...options,
        ...formDataBodySerializer,
        headers: {
            'Content-Type': null,
            ...options?.headers
        },
        url: '/cgi/product_jqm2.pl'
    });
};

/**
 * Search for Products
 * Search request allows you to get products that match your search criteria.
 *
 * It allows you create many custom APIs for your use case.
 *
 * If the search query parameter has 2 possible values, they are seperated by a comma(,).
 * When filtering via a parameter that has different language codes like `fr`, `de` or `en`, specify the language code in the parameter name e.g `categories_tags_en`
 *
 * **Important:** search API v2 does not support full text request (search_term),
 * you have to use [search API v1](https://wiki.openfoodfacts.org/API/Read/Search) for that.
 * Upcoming [search-a-licious project](https://github.com/openfoodfacts/search-a-licious) will fix that.
 *
 * ### Limiting results
 *
 * You can limit the size of returned objects thanks to the `fields` object (see below).
 *
 * eg: `fields=code,product_name,brands,attribute_groups``
 *
 * Please use it as much as possible to avoid overloading the servers.
 *
 * The search use pagination, see `page` and `page_size` parameters.
 *
 * **Beware:** the `page_count` data in item is a bit counter intuitive…, read the description.
 *
 * ### Conditions on tags
 *
 * All `_tags`` parameters accepts either:
 *
 * * a single value
 * * or a comma-separated list of values (doing a AND)
 * * or a pipe separated list of values (doing a OR)
 *
 * You can exclude terms by using a "-" prefix.
 *
 * For taxonomized entries, you might either use the tag id (recommended),
 * or a known synonym (without language prefix)
 *
 * * `labels_tags=en:organic,en:fair-trade` find items that are fair-trade AND organic
 * * `labels_tags=en:organic|en:fair-trade` find items that are fair-trade OR organic
 * * `labels_tags=en:organic,en:-fair-trade` find items that are organic BUT NOT fair-trade
 *
 *
 * ### Conditions on nutriments
 *
 * To get a list of nutrients
 *
 * You can either query on nutrient per 100g (`_100g` suffix)
 * or per serving (`serving` suffix).
 *
 * You can also add `_prepared_`
 * to get the nutrients in the prepared product instead of as sold.
 *
 * You can add a comparison operator and value to the parameter name
 * to get products with nutrient above or bellow a value.
 * If you use a parameter value it exactly match it.
 *
 * * `energy-kj_100g<200` products where energy in kj for 100g is less than 200kj
 * * `sugars_serving>10` products where sugar per serving is greater than 10g
 * * `saturated-fat_100g=1` products where saturated fat per 100g is exactly 10g
 * * `salt_prepared_serving<0.1` products where salt per serving for prepared product is less than 0.1g
 *
 * ### More references
 *
 * See also [wiki page](https://wiki.openfoodfacts.org/Open_Food_Facts_Search_API_Version_2)
 *
 */
export const getSearch = <ThrowOnError extends boolean = false>(options?: Options<GetSearchData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetSearchResponse, GetSearchError, ThrowOnError>({
        ...options,
        url: '/api/v2/search'
    });
};

/**
 * Get Suggestions to Aid Adding/Editing Products
 * For example , Dave is looking for packaging_shapes that contain the term "fe",
 * all packaging_shapes containing "fe" will be returned.
 * This is useful if you have a search in your application,
 * for a specific product field.
 *
 */
export const getCgiSuggestPl = <ThrowOnError extends boolean = false>(options?: Options<GetCgiSuggestPlData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCgiSuggestPlResponse, GetCgiSuggestPlError, ThrowOnError>({
        ...options,
        url: '/cgi/suggest.pl'
    });
};

/**
 * Get a nested list of nutrients that can be displayed in the nutrition facts table for a specific country and language
 * Used to display the nutrition facts table of a product, or to display a form to input those nutrition facts.
 *
 */
export const getCgiNutrientsPl = <ThrowOnError extends boolean = false>(options?: Options<GetCgiNutrientsPlData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetCgiNutrientsPlResponse, GetCgiNutrientsPlError, ThrowOnError>({
        ...options,
        url: '/cgi/nutrients.pl'
    });
};

/**
 * Get the list of attributes available for personal search.
 * Attributes are at the heart of personal search.
 * They score the products according to different criterias,
 * which could then be matched to a user's preferences.
 *
 * This API helps you list attributes and display them in your application,
 * for the user to choose the importance of each criteria.
 *
 * note: /api/v2/attribute_groups_{lc} is also a valid route, but consider it deprecated
 *
 */
export const getAttributeGroups = <ThrowOnError extends boolean = false>(options?: Options<GetAttributeGroupsData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetAttributeGroupsResponse, GetAttributeGroupsError, ThrowOnError>({
        ...options,
        url: '/api/v2/attribute_groups'
    });
};

/**
 * Get the weights corresponding to attributes preferences
 * to compute personal product
 *
 * This endpoint retrieves the weights corresponding to attribute preferences
 * for computing personal product recommendations. The weights are used to
 * personalize the product recommendations based on user preferences.
 *
 */
export const getPreferences = <ThrowOnError extends boolean = false>(options?: Options<GetPreferencesData, ThrowOnError>) => {
    return (options?.client ?? client).get<GetPreferencesResponse, GetPreferencesError, ThrowOnError>({
        ...options,
        url: '/api/v2/preferences'
    });
};

/**
 * Login and obtain a session cookie
 * Retrieve session cookie for writing operations.
 */
export const getCgiSessionPl = <ThrowOnError extends boolean = false>(options: Options<GetCgiSessionPlData, ThrowOnError>) => {
    return (options?.client ?? client).post<GetCgiSessionPlResponse, GetCgiSessionPlError, ThrowOnError>({
        ...options,
        ...urlSearchParamsBodySerializer,
        headers: {
            'Content-Type': 'application/x-www-form-urlencoded',
            ...options?.headers
        },
        url: '/cgi/session.pl'
    });
};