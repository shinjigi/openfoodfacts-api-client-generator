/* tslint:disable */
/* eslint-disable */
/**
 * Open Food Facts Open API
 * As a developer, the Open Food Facts API allows you to get information and contribute to the products database. You can create great apps to help people make better food choices and also provide data to enhance the database. 
 *
 * The version of the OpenAPI document: 2
 * Contact: contact@openfoodfacts.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { EcoscoreDataPreviousData } from './EcoscoreDataPreviousData';
import {
    EcoscoreDataPreviousDataFromJSON,
    EcoscoreDataPreviousDataFromJSONTyped,
    EcoscoreDataPreviousDataToJSON,
} from './EcoscoreDataPreviousData';
import type { EcoscoreData1Adjustments } from './EcoscoreData1Adjustments';
import {
    EcoscoreData1AdjustmentsFromJSON,
    EcoscoreData1AdjustmentsFromJSONTyped,
    EcoscoreData1AdjustmentsToJSON,
} from './EcoscoreData1Adjustments';
import type { EcoscoreDataAgribalyse } from './EcoscoreDataAgribalyse';
import {
    EcoscoreDataAgribalyseFromJSON,
    EcoscoreDataAgribalyseFromJSONTyped,
    EcoscoreDataAgribalyseToJSON,
} from './EcoscoreDataAgribalyse';
import type { EcoscoreDataMissing } from './EcoscoreDataMissing';
import {
    EcoscoreDataMissingFromJSON,
    EcoscoreDataMissingFromJSONTyped,
    EcoscoreDataMissingToJSON,
} from './EcoscoreDataMissing';

/**
 * An object about a lot of details about data needed for Eco-Score computation 
 * and complementary data of interest.
 * 
 * @export
 * @interface EcoscoreData1
 */
export interface EcoscoreData1 {
    /**
     * 
     * @type {EcoscoreData1Adjustments}
     * @memberof EcoscoreData1
     */
    adjustments?: EcoscoreData1Adjustments;
    /**
     * 
     * @type {EcoscoreDataAgribalyse}
     * @memberof EcoscoreData1
     */
    agribalyse?: EcoscoreDataAgribalyse;
    /**
     * 
     * @type {string}
     * @memberof EcoscoreData1
     */
    grade?: string;
    /**
     * 
     * @type {object}
     * @memberof EcoscoreData1
     */
    grades?: object;
    /**
     * 
     * @type {EcoscoreDataMissing}
     * @memberof EcoscoreData1
     */
    missing?: EcoscoreDataMissing;
    /**
     * 
     * @type {number}
     * @memberof EcoscoreData1
     */
    missingDataWarning?: number;
    /**
     * 
     * @type {EcoscoreDataPreviousData}
     * @memberof EcoscoreData1
     */
    previousData?: EcoscoreDataPreviousData;
    /**
     * 
     * @type {number}
     * @memberof EcoscoreData1
     */
    score?: number;
    /**
     * 
     * @type {object}
     * @memberof EcoscoreData1
     */
    scores?: object;
    /**
     * 
     * @type {string}
     * @memberof EcoscoreData1
     */
    status?: string;
}

/**
 * Check if a given object implements the EcoscoreData1 interface.
 */
export function instanceOfEcoscoreData1(value: object): value is EcoscoreData1 {
    return true;
}

export function EcoscoreData1FromJSON(json: any): EcoscoreData1 {
    return EcoscoreData1FromJSONTyped(json, false);
}

export function EcoscoreData1FromJSONTyped(json: any, ignoreDiscriminator: boolean): EcoscoreData1 {
    if (json == null) {
        return json;
    }
    return {
        
        'adjustments': json['adjustments'] == null ? undefined : EcoscoreData1AdjustmentsFromJSON(json['adjustments']),
        'agribalyse': json['agribalyse'] == null ? undefined : EcoscoreDataAgribalyseFromJSON(json['agribalyse']),
        'grade': json['grade'] == null ? undefined : json['grade'],
        'grades': json['grades'] == null ? undefined : json['grades'],
        'missing': json['missing'] == null ? undefined : EcoscoreDataMissingFromJSON(json['missing']),
        'missingDataWarning': json['missing_data_warning'] == null ? undefined : json['missing_data_warning'],
        'previousData': json['previous_data'] == null ? undefined : EcoscoreDataPreviousDataFromJSON(json['previous_data']),
        'score': json['score'] == null ? undefined : json['score'],
        'scores': json['scores'] == null ? undefined : json['scores'],
        'status': json['status'] == null ? undefined : json['status'],
    };
}

export function EcoscoreData1ToJSON(value?: EcoscoreData1 | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'adjustments': EcoscoreData1AdjustmentsToJSON(value['adjustments']),
        'agribalyse': EcoscoreDataAgribalyseToJSON(value['agribalyse']),
        'grade': value['grade'],
        'grades': value['grades'],
        'missing': EcoscoreDataMissingToJSON(value['missing']),
        'missing_data_warning': value['missingDataWarning'],
        'previous_data': EcoscoreDataPreviousDataToJSON(value['previousData']),
        'score': value['score'],
        'scores': value['scores'],
        'status': value['status'],
    };
}

