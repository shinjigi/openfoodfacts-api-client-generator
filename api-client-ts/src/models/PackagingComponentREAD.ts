/* tslint:disable */
/* eslint-disable */
/**
 * Open Food Facts Open API
 * As a developer, the Open Food Facts API allows you to get information and contribute to the products database. You can create great apps to help people make better food choices and also provide data to enhance the database. 
 *
 * The version of the OpenAPI document: 2
 * Contact: contact@openfoodfacts.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PackagingComponentMaterial } from './PackagingComponentMaterial';
import {
    PackagingComponentMaterialFromJSON,
    PackagingComponentMaterialFromJSONTyped,
    PackagingComponentMaterialToJSON,
} from './PackagingComponentMaterial';
import type { PackagingComponentShape } from './PackagingComponentShape';
import {
    PackagingComponentShapeFromJSON,
    PackagingComponentShapeFromJSONTyped,
    PackagingComponentShapeToJSON,
} from './PackagingComponentShape';
import type { PackagingComponentRecyclingInstruction } from './PackagingComponentRecyclingInstruction';
import {
    PackagingComponentRecyclingInstructionFromJSON,
    PackagingComponentRecyclingInstructionFromJSONTyped,
    PackagingComponentRecyclingInstructionToJSON,
} from './PackagingComponentRecyclingInstruction';

/**
 * Each packaging component has different properties to specify how many there are, its shape, material etc.
 * 
 * The shape, material and recycling properties are mapped to one entry in the packaging_shapes, packaging_materials and packaging_recycling taxonomies, and the value of the property is the canonical name of the taxonomy entry (e.g. en:bottle).
 * 
 * They may contain values that could not yet get matched to their respective taxonomy, in which case they will contain a free text value prefixed with the language code of this text value (e.g. "fr:Bouteille sph√©rique" might have been entered by a French user to indicate it is a spherical bottle).
 * @export
 * @interface PackagingComponentREAD
 */
export interface PackagingComponentREAD {
    /**
     * umber of units of this packaging component contained in the product (e.g. 6 for a pack of 6 bottles)
     * @type {number}
     * @memberof PackagingComponentREAD
     */
    numberOfUnits?: number;
    /**
     * 
     * @type {PackagingComponentShape}
     * @memberof PackagingComponentREAD
     */
    shape?: PackagingComponentShape;
    /**
     * 
     * @type {PackagingComponentMaterial}
     * @memberof PackagingComponentREAD
     */
    material?: PackagingComponentMaterial;
    /**
     * 
     * @type {PackagingComponentRecyclingInstruction}
     * @memberof PackagingComponentREAD
     */
    recycling?: PackagingComponentRecyclingInstruction;
    /**
     * Quantity (weight or volume) of food product contained in the packaging component. (e.g. 75cl for a wine bottle)
     * @type {string}
     * @memberof PackagingComponentREAD
     */
    quantityPerUnit?: string;
    /**
     * Value parsed from the quantity field.
     * @type {number}
     * @memberof PackagingComponentREAD
     */
    quantityPerUnitValue?: number;
    /**
     * Unit parsed and normalized from the quantity field.
     * @type {string}
     * @memberof PackagingComponentREAD
     */
    quantityPerUnitUnit?: string;
    /**
     * Weight (as specified by the manufacturer) of one unit of the empty packaging component (in grams). (e.g. for a 6 pack of 1.5l water bottles, it might be 30, the weight in grams of 1 empty water bottle without its cap which is a different packaging component).
     * @type {number}
     * @memberof PackagingComponentREAD
     */
    weightSpecified?: number;
    /**
     * Weight (as measured by one or more users) of one unit of the empty packaging component (in grams). (e.g. for a 6 pack of 1.5l water bottles, it might be 30, the weight in grams of 1 empty water bottle without its cap which is a different packaging component).
     * @type {number}
     * @memberof PackagingComponentREAD
     */
    weightMeasured?: number;
    /**
     * Weight (as estimated from similar products) of one unit of the empty packaging component (in grams). (e.g. for a 6 pack of 1.5l water bottles, it might be 30, the weight in grams of 1 empty water bottle without its cap which is a different packaging component).
     * @type {number}
     * @memberof PackagingComponentREAD
     */
    weightEstimated?: number;
    /**
     * Weight of one unit of the empty packaging component.
     * @type {number}
     * @memberof PackagingComponentREAD
     */
    weight?: number;
    /**
     * Indicates which field was used to populate the "weight" field. Either "specified", "measured", or "estimated"
     * @type {string}
     * @memberof PackagingComponentREAD
     */
    weightSourceId?: string;
}

/**
 * Check if a given object implements the PackagingComponentREAD interface.
 */
export function instanceOfPackagingComponentREAD(value: object): value is PackagingComponentREAD {
    return true;
}

export function PackagingComponentREADFromJSON(json: any): PackagingComponentREAD {
    return PackagingComponentREADFromJSONTyped(json, false);
}

export function PackagingComponentREADFromJSONTyped(json: any, ignoreDiscriminator: boolean): PackagingComponentREAD {
    if (json == null) {
        return json;
    }
    return {
        
        'numberOfUnits': json['number_of_units'] == null ? undefined : json['number_of_units'],
        'shape': json['shape'] == null ? undefined : PackagingComponentShapeFromJSON(json['shape']),
        'material': json['material'] == null ? undefined : PackagingComponentMaterialFromJSON(json['material']),
        'recycling': json['recycling'] == null ? undefined : PackagingComponentRecyclingInstructionFromJSON(json['recycling']),
        'quantityPerUnit': json['quantity_per_unit'] == null ? undefined : json['quantity_per_unit'],
        'quantityPerUnitValue': json['quantity_per_unit_value'] == null ? undefined : json['quantity_per_unit_value'],
        'quantityPerUnitUnit': json['quantity_per_unit_unit'] == null ? undefined : json['quantity_per_unit_unit'],
        'weightSpecified': json['weight_specified'] == null ? undefined : json['weight_specified'],
        'weightMeasured': json['weight_measured'] == null ? undefined : json['weight_measured'],
        'weightEstimated': json['weight_estimated'] == null ? undefined : json['weight_estimated'],
        'weight': json['weight'] == null ? undefined : json['weight'],
        'weightSourceId': json['weight_source_id'] == null ? undefined : json['weight_source_id'],
    };
}

export function PackagingComponentREADToJSON(value?: PackagingComponentREAD | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'number_of_units': value['numberOfUnits'],
        'shape': PackagingComponentShapeToJSON(value['shape']),
        'material': PackagingComponentMaterialToJSON(value['material']),
        'recycling': PackagingComponentRecyclingInstructionToJSON(value['recycling']),
        'quantity_per_unit': value['quantityPerUnit'],
        'quantity_per_unit_value': value['quantityPerUnitValue'],
        'quantity_per_unit_unit': value['quantityPerUnitUnit'],
        'weight_specified': value['weightSpecified'],
        'weight_measured': value['weightMeasured'],
        'weight_estimated': value['weightEstimated'],
        'weight': value['weight'],
        'weight_source_id': value['weightSourceId'],
    };
}

