/* tslint:disable */
/* eslint-disable */
/**
 * Open Food Facts Open API
 * As a developer, the Open Food Facts API allows you to get information and contribute to the products database. You can create great apps to help people make better food choices and also provide data to enhance the database. 
 *
 * The version of the OpenAPI document: 2
 * Contact: contact@openfoodfacts.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { PackagingComponentREAD } from './PackagingComponentREAD';
import {
    PackagingComponentREADFromJSON,
    PackagingComponentREADFromJSONTyped,
    PackagingComponentREADToJSON,
} from './PackagingComponentREAD';
import type { ProductMiscNutrientLevels } from './ProductMiscNutrientLevels';
import {
    ProductMiscNutrientLevelsFromJSON,
    ProductMiscNutrientLevelsFromJSONTyped,
    ProductMiscNutrientLevelsToJSON,
} from './ProductMiscNutrientLevels';

/**
 * Miscellaneous but important fields of a product
 * 
 * @export
 * @interface ProductMisc
 */
export interface ProductMisc {
    /**
     * Number of food additives.
     * 
     * @type {number}
     * @memberof ProductMisc
     */
    additivesN?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductMisc
     */
    checked?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductMisc
     */
    complete?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductMisc
     */
    completeness?: number;
    /**
     * See also: `ecoscore_tags`
     * 
     * @type {string}
     * @memberof ProductMisc
     */
    ecoscoreGrade?: string;
    /**
     * See also: `ecoscore_tags`
     * 
     * @type {number}
     * @memberof ProductMisc
     */
    ecoscoreScore?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductMisc
     */
    foodGroups?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductMisc
     */
    foodGroupsTags?: Array<string>;
    /**
     * 
     * @type {ProductMiscNutrientLevels}
     * @memberof ProductMisc
     */
    nutrientLevels?: ProductMiscNutrientLevels;
    /**
     * Recycling instructions as raw text, e.g. Plastic
     * bottle to recycle, Plastic cap to recycle.
     * This will get automatically parsed and
     * will be used to compute the Eco-Score.
     * You can either request it (if it exists) or
     * send it in a specific language.
     * 
     * @type {string}
     * @memberof ProductMisc
     */
    packagingText?: string;
    /**
     * The packagings object is an array of individual packaging component objects.
     * 
     * The Packaging data document explains how packaging data is structured in Open Food Facts: https://openfoodfacts.github.io/openfoodfacts-server/dev/explain-packaging-data/
     * 
     * The shape, material and recycling properties of each packaging component are linked to entries in the packaging_shapes, packaging_materials and packaging_recycling taxonomies:
     * 
     * https://world.openfoodfacts.org/data/taxonomies/packaging_shapes.json
     * https://world.openfoodfacts.org/data/taxonomies/packaging_materials.json
     * https://world.openfoodfacts.org/data/taxonomies/packaging_recycling.json
     * 
     * If the tags_lc field is set, the properties will include a lc_name field with the translation in the requested language.
     * @type {Array<PackagingComponentREAD>}
     * @memberof ProductMisc
     */
    packagings?: Array<PackagingComponentREAD>;
    /**
     * Indicate if the packagings array contains all the packaging parts of the product. This field can be set by users when they enter or verify packaging data. Possible values are 0 or 1.
     * @type {number}
     * @memberof ProductMisc
     */
    packagingsComplete?: number;
    /**
     * Category of food according to [French Nutrition and Health Program](https://fr.wikipedia.org/wiki/Programme_national_nutrition_sant%C3%A9)
     * 
     * @type {string}
     * @memberof ProductMisc
     */
    pnnsGroups1?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductMisc
     */
    pnnsGroups1Tags?: Array<string>;
    /**
     * Sub Category of food according to [French Nutrition and Health Program](https://fr.wikipedia.org/wiki/Programme_national_nutrition_sant%C3%A9)
     * 
     * @type {string}
     * @memberof ProductMisc
     */
    pnnsGroups2?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductMisc
     */
    pnnsGroups2Tags?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ProductMisc
     */
    popularityKey?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductMisc
     */
    popularityTags?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ProductMisc
     */
    scansN?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductMisc
     */
    uniqueScansN?: number;
    /**
     * Normalized version of serving_size.
     * Note that this is NOT the number of servings by product.
     * <small>(in perl, see `normalize_serving_size`)</small>
     * 
     * @type {string}
     * @memberof ProductMisc
     */
    servingQuantity?: string;
    /**
     * The unit (either g or ml) for the correponding serving_quantity.
     * 
     * @type {string}
     * @memberof ProductMisc
     */
    servingQuantityUnit?: string;
    /**
     * Serving size text (generally in g or ml).
     * We expect a quantity + unit but the user is free to input any string.
     * 
     * @type {string}
     * @memberof ProductMisc
     */
    servingSize?: string;
}

/**
 * Check if a given object implements the ProductMisc interface.
 */
export function instanceOfProductMisc(value: object): value is ProductMisc {
    return true;
}

export function ProductMiscFromJSON(json: any): ProductMisc {
    return ProductMiscFromJSONTyped(json, false);
}

export function ProductMiscFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductMisc {
    if (json == null) {
        return json;
    }
    return {
        
        'additivesN': json['additives_n'] == null ? undefined : json['additives_n'],
        'checked': json['checked'] == null ? undefined : json['checked'],
        'complete': json['complete'] == null ? undefined : json['complete'],
        'completeness': json['completeness'] == null ? undefined : json['completeness'],
        'ecoscoreGrade': json['ecoscore_grade'] == null ? undefined : json['ecoscore_grade'],
        'ecoscoreScore': json['ecoscore_score'] == null ? undefined : json['ecoscore_score'],
        'foodGroups': json['food_groups'] == null ? undefined : json['food_groups'],
        'foodGroupsTags': json['food_groups_tags'] == null ? undefined : json['food_groups_tags'],
        'nutrientLevels': json['nutrient_levels'] == null ? undefined : ProductMiscNutrientLevelsFromJSON(json['nutrient_levels']),
        'packagingText': json['packaging_text'] == null ? undefined : json['packaging_text'],
        'packagings': json['packagings'] == null ? undefined : ((json['packagings'] as Array<any>).map(PackagingComponentREADFromJSON)),
        'packagingsComplete': json['packagings_complete'] == null ? undefined : json['packagings_complete'],
        'pnnsGroups1': json['pnns_groups_1'] == null ? undefined : json['pnns_groups_1'],
        'pnnsGroups1Tags': json['pnns_groups_1_tags'] == null ? undefined : json['pnns_groups_1_tags'],
        'pnnsGroups2': json['pnns_groups_2'] == null ? undefined : json['pnns_groups_2'],
        'pnnsGroups2Tags': json['pnns_groups_2_tags'] == null ? undefined : json['pnns_groups_2_tags'],
        'popularityKey': json['popularity_key'] == null ? undefined : json['popularity_key'],
        'popularityTags': json['popularity_tags'] == null ? undefined : json['popularity_tags'],
        'scansN': json['scans_n'] == null ? undefined : json['scans_n'],
        'uniqueScansN': json['unique_scans_n'] == null ? undefined : json['unique_scans_n'],
        'servingQuantity': json['serving_quantity'] == null ? undefined : json['serving_quantity'],
        'servingQuantityUnit': json['serving_quantity_unit'] == null ? undefined : json['serving_quantity_unit'],
        'servingSize': json['serving_size'] == null ? undefined : json['serving_size'],
    };
}

export function ProductMiscToJSON(value?: ProductMisc | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'additives_n': value['additivesN'],
        'checked': value['checked'],
        'complete': value['complete'],
        'completeness': value['completeness'],
        'ecoscore_grade': value['ecoscoreGrade'],
        'ecoscore_score': value['ecoscoreScore'],
        'food_groups': value['foodGroups'],
        'food_groups_tags': value['foodGroupsTags'],
        'nutrient_levels': ProductMiscNutrientLevelsToJSON(value['nutrientLevels']),
        'packaging_text': value['packagingText'],
        'packagings': value['packagings'] == null ? undefined : ((value['packagings'] as Array<any>).map(PackagingComponentREADToJSON)),
        'packagings_complete': value['packagingsComplete'],
        'pnns_groups_1': value['pnnsGroups1'],
        'pnns_groups_1_tags': value['pnnsGroups1Tags'],
        'pnns_groups_2': value['pnnsGroups2'],
        'pnns_groups_2_tags': value['pnnsGroups2Tags'],
        'popularity_key': value['popularityKey'],
        'popularity_tags': value['popularityTags'],
        'scans_n': value['scansN'],
        'unique_scans_n': value['uniqueScansN'],
        'serving_quantity': value['servingQuantity'],
        'serving_quantity_unit': value['servingQuantityUnit'],
        'serving_size': value['servingSize'],
    };
}

