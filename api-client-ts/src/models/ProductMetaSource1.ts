/* tslint:disable */
/* eslint-disable */
/**
 * Open Food Facts Open API
 * As a developer, the Open Food Facts API allows you to get information and contribute to the products database. You can create great apps to help people make better food choices and also provide data to enhance the database. 
 *
 * The version of the OpenAPI document: 2
 * Contact: contact@openfoodfacts.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ProductAllOfManufacturer } from './ProductAllOfManufacturer';
import {
    ProductAllOfManufacturerFromJSON,
    ProductAllOfManufacturerFromJSONTyped,
    ProductAllOfManufacturerToJSON,
} from './ProductAllOfManufacturer';

/**
 * 
 * @export
 * @interface ProductMetaSource1
 */
export interface ProductMetaSource1 {
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductMetaSource1
     */
    fields?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProductMetaSource1
     */
    id?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof ProductMetaSource1
     */
    images?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof ProductMetaSource1
     */
    importT?: number;
    /**
     * 
     * @type {ProductAllOfManufacturer}
     * @memberof ProductMetaSource1
     */
    manufacturer?: ProductAllOfManufacturer;
    /**
     * 
     * @type {string}
     * @memberof ProductMetaSource1
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductMetaSource1
     */
    sourceLicence?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductMetaSource1
     */
    sourceLicenceUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductMetaSource1
     */
    url?: string | null;
}

/**
 * Check if a given object implements the ProductMetaSource1 interface.
 */
export function instanceOfProductMetaSource1(value: object): value is ProductMetaSource1 {
    return true;
}

export function ProductMetaSource1FromJSON(json: any): ProductMetaSource1 {
    return ProductMetaSource1FromJSONTyped(json, false);
}

export function ProductMetaSource1FromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductMetaSource1 {
    if (json == null) {
        return json;
    }
    return {
        
        'fields': json['fields'] == null ? undefined : json['fields'],
        'id': json['id'] == null ? undefined : json['id'],
        'images': json['images'] == null ? undefined : json['images'],
        'importT': json['import_t'] == null ? undefined : json['import_t'],
        'manufacturer': json['manufacturer'] == null ? undefined : ProductAllOfManufacturerFromJSON(json['manufacturer']),
        'name': json['name'] == null ? undefined : json['name'],
        'sourceLicence': json['source_licence'] == null ? undefined : json['source_licence'],
        'sourceLicenceUrl': json['source_licence_url'] == null ? undefined : json['source_licence_url'],
        'url': json['url'] == null ? undefined : json['url'],
    };
}

export function ProductMetaSource1ToJSON(value?: ProductMetaSource1 | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'fields': value['fields'],
        'id': value['id'],
        'images': value['images'],
        'import_t': value['importT'],
        'manufacturer': ProductAllOfManufacturerToJSON(value['manufacturer']),
        'name': value['name'],
        'source_licence': value['sourceLicence'],
        'source_licence_url': value['sourceLicenceUrl'],
        'url': value['url'],
    };
}

