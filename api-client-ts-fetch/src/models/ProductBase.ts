/* tslint:disable */
/* eslint-disable */
/**
 * Open Food Facts Open API
 * As a developer, the Open Food Facts API allows you to get information and contribute to the products database. You can create great apps to help people make better food choices and also provide data to enhance the database. 
 *
 * The version of the OpenAPI document: 2
 * Contact: contact@openfoodfacts.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Panels } from './Panels';
import {
    PanelsFromJSON,
    PanelsFromJSONTyped,
    PanelsToJSON,
} from './Panels';
import type { ProductNutritionNutriscoreData } from './ProductNutritionNutriscoreData';
import {
    ProductNutritionNutriscoreDataFromJSON,
    ProductNutritionNutriscoreDataFromJSONTyped,
    ProductNutritionNutriscoreDataToJSON,
} from './ProductNutritionNutriscoreData';
import type { EcoscoreData } from './EcoscoreData';
import {
    EcoscoreDataFromJSON,
    EcoscoreDataFromJSONTyped,
    EcoscoreDataToJSON,
} from './EcoscoreData';
import type { ProductSelectedImages } from './ProductSelectedImages';
import {
    ProductSelectedImagesFromJSON,
    ProductSelectedImagesFromJSONTyped,
    ProductSelectedImagesToJSON,
} from './ProductSelectedImages';
import type { PackagingComponentREAD } from './PackagingComponentREAD';
import {
    PackagingComponentREADFromJSON,
    PackagingComponentREADFromJSONTyped,
    PackagingComponentREADToJSON,
} from './PackagingComponentREAD';
import type { ProductMetaSourceFields } from './ProductMetaSourceFields';
import {
    ProductMetaSourceFieldsFromJSON,
    ProductMetaSourceFieldsFromJSONTyped,
    ProductMetaSourceFieldsToJSON,
} from './ProductMetaSourceFields';
import type { ProductExtendedCategoriesProperties } from './ProductExtendedCategoriesProperties';
import {
    ProductExtendedCategoriesPropertiesFromJSON,
    ProductExtendedCategoriesPropertiesFromJSONTyped,
    ProductExtendedCategoriesPropertiesToJSON,
} from './ProductExtendedCategoriesProperties';
import type { ProductExtendedOwnerFields } from './ProductExtendedOwnerFields';
import {
    ProductExtendedOwnerFieldsFromJSON,
    ProductExtendedOwnerFieldsFromJSONTyped,
    ProductExtendedOwnerFieldsToJSON,
} from './ProductExtendedOwnerFields';
import type { ProductNutritionNutriments } from './ProductNutritionNutriments';
import {
    ProductNutritionNutrimentsFromJSON,
    ProductNutritionNutrimentsFromJSONTyped,
    ProductNutritionNutrimentsToJSON,
} from './ProductNutritionNutriments';
import type { ProductAttributeGroup } from './ProductAttributeGroup';
import {
    ProductAttributeGroupFromJSON,
    ProductAttributeGroupFromJSONTyped,
    ProductAttributeGroupToJSON,
} from './ProductAttributeGroup';
import type { ProductExtendedNovaGroupsMarkers } from './ProductExtendedNovaGroupsMarkers';
import {
    ProductExtendedNovaGroupsMarkersFromJSON,
    ProductExtendedNovaGroupsMarkersFromJSONTyped,
    ProductExtendedNovaGroupsMarkersToJSON,
} from './ProductExtendedNovaGroupsMarkers';
import type { ProductMiscNutrientLevels } from './ProductMiscNutrientLevels';
import {
    ProductMiscNutrientLevelsFromJSON,
    ProductMiscNutrientLevelsFromJSONTyped,
    ProductMiscNutrientLevelsToJSON,
} from './ProductMiscNutrientLevels';
import type { ProductImages } from './ProductImages';
import {
    ProductImagesFromJSON,
    ProductImagesFromJSONTyped,
    ProductImagesToJSON,
} from './ProductImages';
import type { Ingredient } from './Ingredient';
import {
    IngredientFromJSON,
    IngredientFromJSONTyped,
    IngredientToJSON,
} from './Ingredient';
import type { ProductMetaSource } from './ProductMetaSource';
import {
    ProductMetaSourceFromJSON,
    ProductMetaSourceFromJSONTyped,
    ProductMetaSourceToJSON,
} from './ProductMetaSource';
import type { ProductIngredientsIngredientsAnalysis } from './ProductIngredientsIngredientsAnalysis';
import {
    ProductIngredientsIngredientsAnalysisFromJSON,
    ProductIngredientsIngredientsAnalysisFromJSONTyped,
    ProductIngredientsIngredientsAnalysisToJSON,
} from './ProductIngredientsIngredientsAnalysis';

/**
 * This is all the fields describing a product and how to display it on a page.
 * 
 * Refer to the different sub schema for more readable entries:
 * 
 * * [Product Base](#cmp--schemas-product-base): Base fields of a product
 * * [Product Misc](#cmp--schemas-product-misc): Miscellaneous but important fields of a product
 * * [Product Tags](#cmp--schemas-product-tags): Tags fields on a product
 * * [Product Images](#cmp--schemas-product-images): Information about Images of a product
 * * [Product Eco-Score](#cmp--schemas-product-ecoscore): Fields related to Eco-Score for a product
 * * [Product Ingredients](#cmp--schemas-product-ingredients): Fields about ingredients of a product
 * * [Product Nutrition](#cmp--schemas-product-nutrition): Nutrition fields of a product
 * * [Product Data Quality](#cmp--schemas-product-quality): fields related to data quality for a product
 * * [Product Extended](#cmp--schemas-product-extended): TODO
 * * [Product Metadata](#cmp--schemas-product-meta): Metadata of a product (author, editors, etc.)
 * * [Product Knowledge Panels](#cmp--schemas-product-knowledge-panels): Knowledge panels for a product
 * * [Product Attribute Groups](#cmp--schemas-product-attribute-groups): Attribute groups for personal product matching
 * 
 * @export
 * @interface ProductBase
 */
export interface ProductBase {
    /**
     * Abbreviated name in requested language
     * @type {string}
     * @memberof ProductBase
     */
    abbreviatedProductName?: string;
    /**
     * barcode of the product (can be EAN-13 or internal codes for some food stores),
     * for products without a barcode,
     * Open Food Facts assigns a number starting with the 200 reserved prefix
     * 
     * @type {string}
     * @memberof ProductBase
     */
    code?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    codesTags?: Array<string>;
    /**
     * Legal name of the product as regulated
     * by the European authorities.
     * 
     * @type {string}
     * @memberof ProductBase
     */
    genericName?: string;
    /**
     * internal identifier for the product, usually set to the value of `code`,
     * except on the producers platform where it is prefixed by the owner
     * 
     * @type {string}
     * @memberof ProductBase
     */
    id?: string;
    /**
     * Main language of the product.
     * This is a duplicate of `lang` property (for historical reasons).
     * 
     * @type {string}
     * @memberof ProductBase
     */
    lc?: string;
    /**
     * Main language of the product.
     * 
     * This should be the main language of product packaging (if one is predominant).
     * 
     * Main language is also used to decide which ingredients list to parse.
     * 
     * @type {string}
     * @memberof ProductBase
     */
    lang?: string;
    /**
     * Nova group as an integer from 1 to 4. See https://world.openfoodfacts.org/nova
     * @type {number}
     * @memberof ProductBase
     */
    novaGroup?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    novaGroups?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    obsolete?: string;
    /**
     * A date at which the product was declared obsolete.
     * This means it's not produced any more.
     * 
     * @type {string}
     * @memberof ProductBase
     */
    obsoleteSinceDate?: string;
    /**
     * The name of the product
     * 
     * @type {string}
     * @memberof ProductBase
     */
    productName?: string;
    /**
     * The name of the product can also
     * be in many other languages like
     * product_name_fr (for French).
     * 
     * @type {string}
     * @memberof ProductBase
     */
    productNameEn?: string;
    /**
     * The size in g or ml for the whole product.
     * It's a normalized version of the quantity field.
     * 
     * @type {string}
     * @memberof ProductBase
     */
    productQuantity?: string;
    /**
     * The unit (either g or ml) for the correponding product_quantity.
     * 
     * @type {string}
     * @memberof ProductBase
     */
    productQuantityUnit?: string;
    /**
     * Quantity and Unit.
     * 
     * @type {string}
     * @memberof ProductBase
     */
    quantity?: string;
    /**
     * Number of food additives.
     * 
     * @type {number}
     * @memberof ProductBase
     */
    additivesN?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    checked?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductBase
     */
    complete?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductBase
     */
    completeness?: number;
    /**
     * See also: `ecoscore_tags`
     * 
     * @type {string}
     * @memberof ProductBase
     */
    ecoscoreGrade?: string;
    /**
     * See also: `ecoscore_tags`
     * 
     * @type {number}
     * @memberof ProductBase
     */
    ecoscoreScore?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    foodGroups?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    foodGroupsTags?: Array<string>;
    /**
     * 
     * @type {ProductMiscNutrientLevels}
     * @memberof ProductBase
     */
    nutrientLevels?: ProductMiscNutrientLevels;
    /**
     * Recycling instructions as raw text, e.g. Plastic
     * bottle to recycle, Plastic cap to recycle.
     * This will get automatically parsed and
     * will be used to compute the Eco-Score.
     * You can either request it (if it exists) or
     * send it in a specific language.
     * 
     * @type {string}
     * @memberof ProductBase
     */
    packagingText?: string;
    /**
     * The packagings object is an array of individual packaging component objects.
     * 
     * The Packaging data document explains how packaging data is structured in Open Food Facts: https://openfoodfacts.github.io/openfoodfacts-server/dev/explain-packaging-data/
     * 
     * The shape, material and recycling properties of each packaging component are linked to entries in the packaging_shapes, packaging_materials and packaging_recycling taxonomies:
     * 
     * https://world.openfoodfacts.org/data/taxonomies/packaging_shapes.json
     * https://world.openfoodfacts.org/data/taxonomies/packaging_materials.json
     * https://world.openfoodfacts.org/data/taxonomies/packaging_recycling.json
     * 
     * If the tags_lc field is set, the properties will include a lc_name field with the translation in the requested language.
     * @type {Array<PackagingComponentREAD>}
     * @memberof ProductBase
     */
    packagings?: Array<PackagingComponentREAD>;
    /**
     * Indicate if the packagings array contains all the packaging parts of the product. This field can be set by users when they enter or verify packaging data. Possible values are 0 or 1.
     * @type {number}
     * @memberof ProductBase
     */
    packagingsComplete?: number;
    /**
     * Category of food according to [French Nutrition and Health Program](https://fr.wikipedia.org/wiki/Programme_national_nutrition_sant%C3%A9)
     * 
     * @type {string}
     * @memberof ProductBase
     */
    pnnsGroups1?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    pnnsGroups1Tags?: Array<string>;
    /**
     * Sub Category of food according to [French Nutrition and Health Program](https://fr.wikipedia.org/wiki/Programme_national_nutrition_sant%C3%A9)
     * 
     * @type {string}
     * @memberof ProductBase
     */
    pnnsGroups2?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    pnnsGroups2Tags?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ProductBase
     */
    popularityKey?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    popularityTags?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ProductBase
     */
    scansN?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductBase
     */
    uniqueScansN?: number;
    /**
     * Normalized version of serving_size.
     * Note that this is NOT the number of servings by product.
     * <small>(in perl, see `normalize_serving_size`)</small>
     * 
     * @type {string}
     * @memberof ProductBase
     */
    servingQuantity?: string;
    /**
     * The unit (either g or ml) for the correponding serving_quantity.
     * 
     * @type {string}
     * @memberof ProductBase
     */
    servingQuantityUnit?: string;
    /**
     * Serving size text (generally in g or ml).
     * We expect a quantity + unit but the user is free to input any string.
     * 
     * @type {string}
     * @memberof ProductBase
     */
    servingSize?: string;
    /**
     * List of brands (not taxonomized)
     * @type {string}
     * @memberof ProductBase
     */
    brands?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    brandsTags?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    categories?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    categoriesHierarchy?: Array<string>;
    /**
     * Categories language code
     * @type {string}
     * @memberof ProductBase
     */
    categoriesLc?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    categoriesTags?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    checkersTags?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    cities?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof ProductBase
     */
    citiesTags?: Array<object>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    correctorsTags?: Array<string>;
    /**
     * List of countries where the product is sold.
     * 
     * @type {string}
     * @memberof ProductBase
     */
    countries?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    countriesHierarchy?: Array<string>;
    /**
     * Countries language code
     * @type {string}
     * @memberof ProductBase
     */
    countriesLc?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    countriesTags?: Array<string>;
    /**
     * All ecoscore of a product.
     * Most of the time it's only one value,
     * but it might eventually be more for products composed of sub-products.
     * See also: `ecoscore_score`, `ecoscore_grade`.
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    ecoscoreTags?: Array<string>;
    /**
     * Packager code. EMB is the French system of traceability codes for packager.
     * 
     * @type {string}
     * @memberof ProductBase
     */
    embCodes?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    embCodesOrig?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof ProductBase
     */
    embCodesTags?: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    labels?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    labelsHierarchy?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    labelsLc?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    labelsTags?: Array<string>;
    /**
     * The data as a series of tag: `yyyy-mm-dd`, `yyyy-mm`, `yyyy`
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    entryDatesTags?: Array<string>;
    /**
     * Places where the product was manufactured or transformed.
     * 
     * @type {string}
     * @memberof ProductBase
     */
    manufacturingPlaces?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof ProductBase
     */
    manufacturingPlacesTags?: Array<object>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    novaGroupsTags?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    nutrientLevelsTags?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    imageFrontSmallUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    imageFrontThumbUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    imageFrontUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    imageNutritionSmallUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    imageNutritionThumbUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    imageNutritionUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    imageSmallUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    imageThumbUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    imageUrl?: string;
    /**
     * 
     * @type {ProductImages}
     * @memberof ProductBase
     */
    images?: ProductImages;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    lastImageDatesTags?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ProductBase
     */
    lastImageT?: number;
    /**
     * 
     * @type {ProductSelectedImages}
     * @memberof ProductBase
     */
    selectedImages?: ProductSelectedImages;
    /**
     * 
     * @type {EcoscoreData}
     * @memberof ProductBase
     */
    ecoscoreData?: EcoscoreData;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    ecoscoreExtendedDataVersion?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    environmentImpactLevel?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof ProductBase
     */
    environmentImpactLevelTags?: Array<object>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    additivesTags?: Array<string>;
    /**
     * comma separated list of allergens
     * @type {string}
     * @memberof ProductBase
     */
    allergens?: string;
    /**
     * language in which `allergens` where input
     * @type {string}
     * @memberof ProductBase
     */
    allergensLc?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    allergensHierarchy?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    allergensTags?: Array<string>;
    /**
     * This structure gives the different ingredients and some information about them,
     * like estimate on their quantity.
     * 
     * @type {Array<Ingredient>}
     * @memberof ProductBase
     */
    ingredients?: Array<Ingredient>;
    /**
     * 
     * @type {ProductIngredientsIngredientsAnalysis}
     * @memberof ProductBase
     */
    ingredientsAnalysis?: ProductIngredientsIngredientsAnalysis;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    ingredientsAnalysisTags?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ProductBase
     */
    ingredientsFromOrThatMayBeFromPalmOilN?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductBase
     */
    ingredientsFromPalmOilN?: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof ProductBase
     */
    ingredientsFromPalmOilTags?: Array<object>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    ingredientsHierarchy?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ProductBase
     */
    ingredientsN?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    ingredientsNTags?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    ingredientsOriginalTags?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ProductBase
     */
    ingredientsPercentAnalysis?: number;
    /**
     * Number of sweeteners additives in the ingredients. Undefined if ingredients are not specified.
     * 
     * @type {number}
     * @memberof ProductBase
     */
    ingredientsSweetenersN?: number;
    /**
     * Number of non-nutritive sweeteners additives (as specified in the Nutri-Score formula) in the ingredients. Undefined if ingredients are not specified.
     * 
     * @type {number}
     * @memberof ProductBase
     */
    ingredientsNonNutritiveSweetenersN?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    ingredientsTags?: Array<string>;
    /**
     * Language that was used to parse the ingredient list. If `ingredients_text` is available
     * for the product main language (`lang`), `ingredients_lc=lang`, otherwise we look at
     * `ingredients_text` fields for other languages and set `ingredients_lc` to the first
     * non-empty `ingredient_text`. 
     * 
     * @type {string}
     * @memberof ProductBase
     */
    ingredientsLc?: string;
    /**
     * Raw list of ingredients. This will get automatically
     * parsed and get used to compute the Eco-Score or find allergens, etc..
     * 
     * It's a copy of ingredients_text in the main language of the product (see `lang` proprety).
     * 
     * @type {string}
     * @memberof ProductBase
     */
    ingredientsText?: string;
    /**
     * Same text as `ingredients_text` but where allergens have HTML elements around them to identify them
     * 
     * @type {string}
     * @memberof ProductBase
     */
    ingredientsTextWithAllergens?: string;
    /**
     * 
     * @type {number}
     * @memberof ProductBase
     */
    ingredientsThatMayBeFromPalmOilN?: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof ProductBase
     */
    ingredientsThatMayBeFromPalmOilTags?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof ProductBase
     */
    ingredientsWithSpecifiedPercentN?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductBase
     */
    ingredientsWithSpecifiedPercentSum?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductBase
     */
    ingredientsWithUnspecifiedPercentN?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductBase
     */
    ingredientsWithUnspecifiedPercentSum?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductBase
     */
    knownIngredientsN?: number;
    /**
     * Origins of ingredients
     * 
     * @type {string}
     * @memberof ProductBase
     */
    origins?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof ProductBase
     */
    originsHierarchy?: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    originsLc?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof ProductBase
     */
    originsTags?: Array<object>;
    /**
     * List of substances that might cause allergies
     * that are present in trace amounts in the product
     * (this does not include the ingredients, as they
     * are not only present in trace amounts).
     * It is taxonomized with the allergens taxonomy.
     * 
     * @type {string}
     * @memberof ProductBase
     */
    traces?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof ProductBase
     */
    tracesHierarchy?: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    tracesLc?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof ProductBase
     */
    tracesTags?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof ProductBase
     */
    unknownIngredientsN?: number;
    /**
     * When a product does not have nutrition data displayed on the
     * packaging, the user can check the field "Nutrition facts are
     * not specified on the product".
     * By doing so, the no_nutrition_data field takes the value "on".
     * This case is frequent (thousands of products).
     * 
     * @type {string}
     * @memberof ProductBase
     */
    noNutritionData?: string;
    /**
     * The nutrition data on the package can be per serving or per 100g.
     * 
     * This is essential to understand if `<nutrient>_value` and `<nutrient>`
     * values in `nutriments` applies for a serving or for 100g.
     * 
     * **IMPORTANT:**
     * When writing products,
     * this setting applies to all existing nutrients values for the product,
     * not only the nutrient values sent in the write request.
     * So it should not be changed unless all nutrients values are provided
     * with values that match the nutrition_data_per field.
     * 
     * @type {string}
     * @memberof ProductBase
     */
    nutritionDataPer?: ProductBaseNutritionDataPerEnum;
    /**
     * The nutrition data for prepared product on the package (if any) can be per serving or per 100g.
     * 
     * This is essential to understand if `<nutrient>_prepared_value` and `<nutrient>_prepared`
     * values in `nutriments` applies for a serving or for 100g.
     * 
     * See also important note on `nutrition_data_per`.
     * 
     * @type {string}
     * @memberof ProductBase
     */
    nutritionDataPreparedPer?: ProductBaseNutritionDataPreparedPerEnum;
    /**
     * 
     * @type {ProductNutritionNutriments}
     * @memberof ProductBase
     */
    nutriments?: ProductNutritionNutriments;
    /**
     * 
     * @type {ProductNutritionNutriscoreData}
     * @memberof ProductBase
     */
    nutriscoreData?: ProductNutritionNutriscoreData;
    /**
     * Nutri-Score for the product as a letter.
     * 
     * See https://world.openfoodfacts.org/nutriscore.
     * 
     * @type {string}
     * @memberof ProductBase
     */
    nutriscoreGrade?: ProductBaseNutriscoreGradeEnum;
    /**
     * Nutri-Score for the product as an integer (see also `nutriscore_grade`).
     * 
     * @type {number}
     * @memberof ProductBase
     */
    nutriscoreScore?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductBase
     */
    nutriscoreScoreOpposite?: number;
    /**
     * Nutrition grade (‘a’ to ‘e’),
     * https://world.openfoodfacts.org/nutriscore.
     * 
     * @type {string}
     * @memberof ProductBase
     */
    nutritionGradeFr?: string;
    /**
     * Nutrition grades as a comma separated list.
     * 
     * Some products with multiple components might have multiple Nutri-Score
     * 
     * @type {string}
     * @memberof ProductBase
     */
    nutritionGrades?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    nutritionGradesTags?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ProductBase
     */
    nutritionScoreBeverage?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductBase
     */
    nutritionScoreWarningFruitsVegetablesNutsEstimateFromIngredients?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductBase
     */
    nutritionScoreWarningFruitsVegetablesNutsEstimateFromIngredientsValue?: number;
    /**
     * 
     * @type {number}
     * @memberof ProductBase
     */
    nutritionScoreWarningNoFiber?: number;
    /**
     * 
     * @type {Array<object>}
     * @memberof ProductBase
     */
    otherNutritionalSubstancesTags?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof ProductBase
     */
    unknownNutrientsTags?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof ProductBase
     */
    vitaminsTags?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof ProductBase
     */
    dataQualityBugsTags?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof ProductBase
     */
    dataQualityErrorsTags?: Array<object>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    dataQualityInfoTags?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    dataQualityTags?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    dataQualityWarningsTags?: Array<string>;
    /**
     * Source of data imported from producers.
     * 
     * @type {string}
     * @memberof ProductBase
     */
    dataSources?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    dataSourcesTags?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    lastCheckDatesTags?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof ProductBase
     */
    lastCheckedT?: number;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    lastChecker?: string;
    /**
     * comma separated list of values indicating some states of the product,
     * like things to be done, or to be completed.
     * See [states taxonomy](https://static.openfoodfacts.net/data/taxonomies/states.json)
     * 
     * @type {string}
     * @memberof ProductBase
     */
    states?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    statesHierarchy?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    statesTags?: Array<string>;
    /**
     * Information about different aspect of the product
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    miscTags?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    additivesOriginalTags?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    additivesPrevOriginalTags?: Array<string>;
    /**
     * 
     * @type {Array<object>}
     * @memberof ProductBase
     */
    addedCountriesTags?: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    allergensFromIngredients?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    allergensFromUser?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof ProductBase
     */
    aminoAcidsPrevTags?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof ProductBase
     */
    aminoAcidsTags?: Array<object>;
    /**
     * 
     * @type {number}
     * @memberof ProductBase
     */
    carbonFootprintPercentOfKnownIngredients?: number;
    /**
     * 
     * @type {ProductExtendedCategoriesProperties}
     * @memberof ProductBase
     */
    categoriesProperties?: ProductExtendedCategoriesProperties;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    categoriesPropertiesTags?: Array<string>;
    /**
     * 
     * @type {{ [key: string]: string; }}
     * @memberof ProductBase
     */
    categoryProperties?: { [key: string]: string; };
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    ciqualFoodNameTags?: Array<string>;
    /**
     * the category to use for comparison.
     * 
     * **TODO** explain how it is chosen.
     * 
     * @type {string}
     * @memberof ProductBase
     */
    comparedToCategory?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    conservationConditions?: string;
    /**
     * Contact info of customer service.
     * 
     * @type {string}
     * @memberof ProductBase
     */
    customerService?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    expirationDate?: string;
    /**
     * link to the product on the website of the producer
     * 
     * @type {string}
     * @memberof ProductBase
     */
    link?: string;
    /**
     * 
     * @type {Array<object>}
     * @memberof ProductBase
     */
    mainCountriesTags?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof ProductBase
     */
    mineralsPrevTags?: Array<object>;
    /**
     * 
     * @type {Array<object>}
     * @memberof ProductBase
     */
    mineralsTags?: Array<object>;
    /**
     * 
     * @type {ProductExtendedOwnerFields}
     * @memberof ProductBase
     */
    ownerFields?: ProductExtendedOwnerFields;
    /**
     * 
     * @type {ProductExtendedNovaGroupsMarkers}
     * @memberof ProductBase
     */
    novaGroupsMarkers?: ProductExtendedNovaGroupsMarkers;
    /**
     * 
     * @type {Array<object>}
     * @memberof ProductBase
     */
    nucleotidesTags?: Array<object>;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    origin?: string;
    /**
     * Country, state, or city where the product can be purchased.
     * 
     * @type {string}
     * @memberof ProductBase
     */
    purchasePlaces?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    purchasePlacesTags?: Array<string>;
    /**
     * Distributor name.
     * 
     * @type {string}
     * @memberof ProductBase
     */
    stores?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    storesTags?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    tracesFromIngredients?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    tracesFromUser?: string;
    /**
     * Date when the product was added (UNIX timestamp format).
     * See also `entry_dates_tags`
     * 
     * @type {number}
     * @memberof ProductBase
     */
    createdT?: number;
    /**
     * The contributor who added the product first.
     * 
     * @type {string}
     * @memberof ProductBase
     */
    creator?: string;
    /**
     * List of editors who edited the product.
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    editorsTags?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    informersTags?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    interfaceVersionCreated?: string;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    interfaceVersionModified?: string;
    /**
     * 
     * @type {object}
     * @memberof ProductBase
     */
    languages?: object;
    /**
     * Same as `languages` but by language code, instead of language tags
     * 
     * @type {object}
     * @memberof ProductBase
     */
    languagesCodes?: object;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    languagesHierarchy?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    languagesTags?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    lastEditDatesTags?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    lastEditor?: string;
    /**
     * The username of the user who last modified the product.
     * 
     * @type {string}
     * @memberof ProductBase
     */
    lastModifiedBy?: string;
    /**
     * Date when the product page was last modified.
     * 
     * @type {number}
     * @memberof ProductBase
     */
    lastModifiedT?: number;
    /**
     * Id of the producer in case he provides his own data about a product (producer platform).
     * 
     * @type {string}
     * @memberof ProductBase
     */
    owner?: string;
    /**
     * Tagyfied version of owner
     * 
     * @type {string}
     * @memberof ProductBase
     */
    ownersTags?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    photographersTags?: Array<string>;
    /**
     * revision number of this product version (each edit adds a revision)
     * @type {number}
     * @memberof ProductBase
     */
    rev?: number;
    /**
     * 
     * @type {Array<ProductMetaSource>}
     * @memberof ProductBase
     */
    sources?: Array<ProductMetaSource>;
    /**
     * 
     * @type {ProductMetaSourceFields}
     * @memberof ProductBase
     */
    sourcesFields?: ProductMetaSourceFields;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    teams?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof ProductBase
     */
    teamsTags?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof ProductBase
     */
    updateKey?: string;
    /**
     * 
     * @type {Panels}
     * @memberof ProductBase
     */
    knowledgePanels?: Panels;
    /**
     * Each element is an attribute that can help compute a personal ranking for the product
     * @type {Array<ProductAttributeGroup>}
     * @memberof ProductBase
     */
    attributeGroups?: Array<ProductAttributeGroup>;
}


/**
 * @export
 */
export const ProductBaseNutritionDataPerEnum = {
    Serving: 'serving',
    _100g: '100g'
} as const;
export type ProductBaseNutritionDataPerEnum = typeof ProductBaseNutritionDataPerEnum[keyof typeof ProductBaseNutritionDataPerEnum];

/**
 * @export
 */
export const ProductBaseNutritionDataPreparedPerEnum = {
    Serving: 'serving',
    _100g: '100g'
} as const;
export type ProductBaseNutritionDataPreparedPerEnum = typeof ProductBaseNutritionDataPreparedPerEnum[keyof typeof ProductBaseNutritionDataPreparedPerEnum];

/**
 * @export
 */
export const ProductBaseNutriscoreGradeEnum = {
    A: 'a',
    B: 'b',
    C: 'c',
    D: 'd',
    E: 'e'
} as const;
export type ProductBaseNutriscoreGradeEnum = typeof ProductBaseNutriscoreGradeEnum[keyof typeof ProductBaseNutriscoreGradeEnum];


/**
 * Check if a given object implements the ProductBase interface.
 */
export function instanceOfProductBase(value: object): value is ProductBase {
    return true;
}

export function ProductBaseFromJSON(json: any): ProductBase {
    return ProductBaseFromJSONTyped(json, false);
}

export function ProductBaseFromJSONTyped(json: any, ignoreDiscriminator: boolean): ProductBase {
    if (json == null) {
        return json;
    }
    return {
        
        'abbreviatedProductName': json['abbreviated_product_name'] == null ? undefined : json['abbreviated_product_name'],
        'code': json['code'] == null ? undefined : json['code'],
        'codesTags': json['codes_tags'] == null ? undefined : json['codes_tags'],
        'genericName': json['generic_name'] == null ? undefined : json['generic_name'],
        'id': json['id'] == null ? undefined : json['id'],
        'lc': json['lc'] == null ? undefined : json['lc'],
        'lang': json['lang'] == null ? undefined : json['lang'],
        'novaGroup': json['nova_group'] == null ? undefined : json['nova_group'],
        'novaGroups': json['nova_groups'] == null ? undefined : json['nova_groups'],
        'obsolete': json['obsolete'] == null ? undefined : json['obsolete'],
        'obsoleteSinceDate': json['obsolete_since_date'] == null ? undefined : json['obsolete_since_date'],
        'productName': json['product_name'] == null ? undefined : json['product_name'],
        'productNameEn': json['product_name_en'] == null ? undefined : json['product_name_en'],
        'productQuantity': json['product_quantity'] == null ? undefined : json['product_quantity'],
        'productQuantityUnit': json['product_quantity_unit'] == null ? undefined : json['product_quantity_unit'],
        'quantity': json['quantity'] == null ? undefined : json['quantity'],
        'additivesN': json['additives_n'] == null ? undefined : json['additives_n'],
        'checked': json['checked'] == null ? undefined : json['checked'],
        'complete': json['complete'] == null ? undefined : json['complete'],
        'completeness': json['completeness'] == null ? undefined : json['completeness'],
        'ecoscoreGrade': json['ecoscore_grade'] == null ? undefined : json['ecoscore_grade'],
        'ecoscoreScore': json['ecoscore_score'] == null ? undefined : json['ecoscore_score'],
        'foodGroups': json['food_groups'] == null ? undefined : json['food_groups'],
        'foodGroupsTags': json['food_groups_tags'] == null ? undefined : json['food_groups_tags'],
        'nutrientLevels': json['nutrient_levels'] == null ? undefined : ProductMiscNutrientLevelsFromJSON(json['nutrient_levels']),
        'packagingText': json['packaging_text'] == null ? undefined : json['packaging_text'],
        'packagings': json['packagings'] == null ? undefined : ((json['packagings'] as Array<any>).map(PackagingComponentREADFromJSON)),
        'packagingsComplete': json['packagings_complete'] == null ? undefined : json['packagings_complete'],
        'pnnsGroups1': json['pnns_groups_1'] == null ? undefined : json['pnns_groups_1'],
        'pnnsGroups1Tags': json['pnns_groups_1_tags'] == null ? undefined : json['pnns_groups_1_tags'],
        'pnnsGroups2': json['pnns_groups_2'] == null ? undefined : json['pnns_groups_2'],
        'pnnsGroups2Tags': json['pnns_groups_2_tags'] == null ? undefined : json['pnns_groups_2_tags'],
        'popularityKey': json['popularity_key'] == null ? undefined : json['popularity_key'],
        'popularityTags': json['popularity_tags'] == null ? undefined : json['popularity_tags'],
        'scansN': json['scans_n'] == null ? undefined : json['scans_n'],
        'uniqueScansN': json['unique_scans_n'] == null ? undefined : json['unique_scans_n'],
        'servingQuantity': json['serving_quantity'] == null ? undefined : json['serving_quantity'],
        'servingQuantityUnit': json['serving_quantity_unit'] == null ? undefined : json['serving_quantity_unit'],
        'servingSize': json['serving_size'] == null ? undefined : json['serving_size'],
        'brands': json['brands'] == null ? undefined : json['brands'],
        'brandsTags': json['brands_tags'] == null ? undefined : json['brands_tags'],
        'categories': json['categories'] == null ? undefined : json['categories'],
        'categoriesHierarchy': json['categories_hierarchy'] == null ? undefined : json['categories_hierarchy'],
        'categoriesLc': json['categories_lc'] == null ? undefined : json['categories_lc'],
        'categoriesTags': json['categories_tags'] == null ? undefined : json['categories_tags'],
        'checkersTags': json['checkers_tags'] == null ? undefined : json['checkers_tags'],
        'cities': json['cities'] == null ? undefined : json['cities'],
        'citiesTags': json['cities_tags'] == null ? undefined : json['cities_tags'],
        'correctorsTags': json['correctors_tags'] == null ? undefined : json['correctors_tags'],
        'countries': json['countries'] == null ? undefined : json['countries'],
        'countriesHierarchy': json['countries_hierarchy'] == null ? undefined : json['countries_hierarchy'],
        'countriesLc': json['countries_lc'] == null ? undefined : json['countries_lc'],
        'countriesTags': json['countries_tags'] == null ? undefined : json['countries_tags'],
        'ecoscoreTags': json['ecoscore_tags'] == null ? undefined : json['ecoscore_tags'],
        'embCodes': json['emb_codes'] == null ? undefined : json['emb_codes'],
        'embCodesOrig': json['emb_codes_orig'] == null ? undefined : json['emb_codes_orig'],
        'embCodesTags': json['emb_codes_tags'] == null ? undefined : json['emb_codes_tags'],
        'labels': json['labels'] == null ? undefined : json['labels'],
        'labelsHierarchy': json['labels_hierarchy'] == null ? undefined : json['labels_hierarchy'],
        'labelsLc': json['labels_lc'] == null ? undefined : json['labels_lc'],
        'labelsTags': json['labels_tags'] == null ? undefined : json['labels_tags'],
        'entryDatesTags': json['entry_dates_tags'] == null ? undefined : json['entry_dates_tags'],
        'manufacturingPlaces': json['manufacturing_places'] == null ? undefined : json['manufacturing_places'],
        'manufacturingPlacesTags': json['manufacturing_places_tags'] == null ? undefined : json['manufacturing_places_tags'],
        'novaGroupsTags': json['nova_groups_tags'] == null ? undefined : json['nova_groups_tags'],
        'nutrientLevelsTags': json['nutrient_levels_tags'] == null ? undefined : json['nutrient_levels_tags'],
        'imageFrontSmallUrl': json['image_front_small_url'] == null ? undefined : json['image_front_small_url'],
        'imageFrontThumbUrl': json['image_front_thumb_url'] == null ? undefined : json['image_front_thumb_url'],
        'imageFrontUrl': json['image_front_url'] == null ? undefined : json['image_front_url'],
        'imageNutritionSmallUrl': json['image_nutrition_small_url'] == null ? undefined : json['image_nutrition_small_url'],
        'imageNutritionThumbUrl': json['image_nutrition_thumb_url'] == null ? undefined : json['image_nutrition_thumb_url'],
        'imageNutritionUrl': json['image_nutrition_url'] == null ? undefined : json['image_nutrition_url'],
        'imageSmallUrl': json['image_small_url'] == null ? undefined : json['image_small_url'],
        'imageThumbUrl': json['image_thumb_url'] == null ? undefined : json['image_thumb_url'],
        'imageUrl': json['image_url'] == null ? undefined : json['image_url'],
        'images': json['images'] == null ? undefined : ProductImagesFromJSON(json['images']),
        'lastImageDatesTags': json['last_image_dates_tags'] == null ? undefined : json['last_image_dates_tags'],
        'lastImageT': json['last_image_t'] == null ? undefined : json['last_image_t'],
        'selectedImages': json['selected_images'] == null ? undefined : ProductSelectedImagesFromJSON(json['selected_images']),
        'ecoscoreData': json['ecoscore_data'] == null ? undefined : EcoscoreDataFromJSON(json['ecoscore_data']),
        'ecoscoreExtendedDataVersion': json['ecoscore_extended_data_version'] == null ? undefined : json['ecoscore_extended_data_version'],
        'environmentImpactLevel': json['environment_impact_level'] == null ? undefined : json['environment_impact_level'],
        'environmentImpactLevelTags': json['environment_impact_level_tags'] == null ? undefined : json['environment_impact_level_tags'],
        'additivesTags': json['additives_tags'] == null ? undefined : json['additives_tags'],
        'allergens': json['allergens'] == null ? undefined : json['allergens'],
        'allergensLc': json['allergens_lc'] == null ? undefined : json['allergens_lc'],
        'allergensHierarchy': json['allergens_hierarchy'] == null ? undefined : json['allergens_hierarchy'],
        'allergensTags': json['allergens_tags'] == null ? undefined : json['allergens_tags'],
        'ingredients': json['ingredients'] == null ? undefined : ((json['ingredients'] as Array<any>).map(IngredientFromJSON)),
        'ingredientsAnalysis': json['ingredients_analysis'] == null ? undefined : ProductIngredientsIngredientsAnalysisFromJSON(json['ingredients_analysis']),
        'ingredientsAnalysisTags': json['ingredients_analysis_tags'] == null ? undefined : json['ingredients_analysis_tags'],
        'ingredientsFromOrThatMayBeFromPalmOilN': json['ingredients_from_or_that_may_be_from_palm_oil_n'] == null ? undefined : json['ingredients_from_or_that_may_be_from_palm_oil_n'],
        'ingredientsFromPalmOilN': json['ingredients_from_palm_oil_n'] == null ? undefined : json['ingredients_from_palm_oil_n'],
        'ingredientsFromPalmOilTags': json['ingredients_from_palm_oil_tags'] == null ? undefined : json['ingredients_from_palm_oil_tags'],
        'ingredientsHierarchy': json['ingredients_hierarchy'] == null ? undefined : json['ingredients_hierarchy'],
        'ingredientsN': json['ingredients_n'] == null ? undefined : json['ingredients_n'],
        'ingredientsNTags': json['ingredients_n_tags'] == null ? undefined : json['ingredients_n_tags'],
        'ingredientsOriginalTags': json['ingredients_original_tags'] == null ? undefined : json['ingredients_original_tags'],
        'ingredientsPercentAnalysis': json['ingredients_percent_analysis'] == null ? undefined : json['ingredients_percent_analysis'],
        'ingredientsSweetenersN': json['ingredients_sweeteners_n'] == null ? undefined : json['ingredients_sweeteners_n'],
        'ingredientsNonNutritiveSweetenersN': json['ingredients_non_nutritive_sweeteners_n'] == null ? undefined : json['ingredients_non_nutritive_sweeteners_n'],
        'ingredientsTags': json['ingredients_tags'] == null ? undefined : json['ingredients_tags'],
        'ingredientsLc': json['ingredients_lc'] == null ? undefined : json['ingredients_lc'],
        'ingredientsText': json['ingredients_text'] == null ? undefined : json['ingredients_text'],
        'ingredientsTextWithAllergens': json['ingredients_text_with_allergens'] == null ? undefined : json['ingredients_text_with_allergens'],
        'ingredientsThatMayBeFromPalmOilN': json['ingredients_that_may_be_from_palm_oil_n'] == null ? undefined : json['ingredients_that_may_be_from_palm_oil_n'],
        'ingredientsThatMayBeFromPalmOilTags': json['ingredients_that_may_be_from_palm_oil_tags'] == null ? undefined : json['ingredients_that_may_be_from_palm_oil_tags'],
        'ingredientsWithSpecifiedPercentN': json['ingredients_with_specified_percent_n'] == null ? undefined : json['ingredients_with_specified_percent_n'],
        'ingredientsWithSpecifiedPercentSum': json['ingredients_with_specified_percent_sum'] == null ? undefined : json['ingredients_with_specified_percent_sum'],
        'ingredientsWithUnspecifiedPercentN': json['ingredients_with_unspecified_percent_n'] == null ? undefined : json['ingredients_with_unspecified_percent_n'],
        'ingredientsWithUnspecifiedPercentSum': json['ingredients_with_unspecified_percent_sum'] == null ? undefined : json['ingredients_with_unspecified_percent_sum'],
        'knownIngredientsN': json['known_ingredients_n'] == null ? undefined : json['known_ingredients_n'],
        'origins': json['origins'] == null ? undefined : json['origins'],
        'originsHierarchy': json['origins_hierarchy'] == null ? undefined : json['origins_hierarchy'],
        'originsLc': json['origins_lc'] == null ? undefined : json['origins_lc'],
        'originsTags': json['origins_tags'] == null ? undefined : json['origins_tags'],
        'traces': json['traces'] == null ? undefined : json['traces'],
        'tracesHierarchy': json['traces_hierarchy'] == null ? undefined : json['traces_hierarchy'],
        'tracesLc': json['traces_lc'] == null ? undefined : json['traces_lc'],
        'tracesTags': json['traces_tags'] == null ? undefined : json['traces_tags'],
        'unknownIngredientsN': json['unknown_ingredients_n'] == null ? undefined : json['unknown_ingredients_n'],
        'noNutritionData': json['no_nutrition_data'] == null ? undefined : json['no_nutrition_data'],
        'nutritionDataPer': json['nutrition_data_per'] == null ? undefined : json['nutrition_data_per'],
        'nutritionDataPreparedPer': json['nutrition_data_prepared_per'] == null ? undefined : json['nutrition_data_prepared_per'],
        'nutriments': json['nutriments'] == null ? undefined : ProductNutritionNutrimentsFromJSON(json['nutriments']),
        'nutriscoreData': json['nutriscore_data'] == null ? undefined : ProductNutritionNutriscoreDataFromJSON(json['nutriscore_data']),
        'nutriscoreGrade': json['nutriscore_grade'] == null ? undefined : json['nutriscore_grade'],
        'nutriscoreScore': json['nutriscore_score'] == null ? undefined : json['nutriscore_score'],
        'nutriscoreScoreOpposite': json['nutriscore_score_opposite'] == null ? undefined : json['nutriscore_score_opposite'],
        'nutritionGradeFr': json['nutrition_grade_fr'] == null ? undefined : json['nutrition_grade_fr'],
        'nutritionGrades': json['nutrition_grades'] == null ? undefined : json['nutrition_grades'],
        'nutritionGradesTags': json['nutrition_grades_tags'] == null ? undefined : json['nutrition_grades_tags'],
        'nutritionScoreBeverage': json['nutrition_score_beverage'] == null ? undefined : json['nutrition_score_beverage'],
        'nutritionScoreWarningFruitsVegetablesNutsEstimateFromIngredients': json['nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients'] == null ? undefined : json['nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients'],
        'nutritionScoreWarningFruitsVegetablesNutsEstimateFromIngredientsValue': json['nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients_value'] == null ? undefined : json['nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients_value'],
        'nutritionScoreWarningNoFiber': json['nutrition_score_warning_no_fiber'] == null ? undefined : json['nutrition_score_warning_no_fiber'],
        'otherNutritionalSubstancesTags': json['other_nutritional_substances_tags'] == null ? undefined : json['other_nutritional_substances_tags'],
        'unknownNutrientsTags': json['unknown_nutrients_tags'] == null ? undefined : json['unknown_nutrients_tags'],
        'vitaminsTags': json['vitamins_tags'] == null ? undefined : json['vitamins_tags'],
        'dataQualityBugsTags': json['data_quality_bugs_tags'] == null ? undefined : json['data_quality_bugs_tags'],
        'dataQualityErrorsTags': json['data_quality_errors_tags'] == null ? undefined : json['data_quality_errors_tags'],
        'dataQualityInfoTags': json['data_quality_info_tags'] == null ? undefined : json['data_quality_info_tags'],
        'dataQualityTags': json['data_quality_tags'] == null ? undefined : json['data_quality_tags'],
        'dataQualityWarningsTags': json['data_quality_warnings_tags'] == null ? undefined : json['data_quality_warnings_tags'],
        'dataSources': json['data_sources'] == null ? undefined : json['data_sources'],
        'dataSourcesTags': json['data_sources_tags'] == null ? undefined : json['data_sources_tags'],
        'lastCheckDatesTags': json['last_check_dates_tags'] == null ? undefined : json['last_check_dates_tags'],
        'lastCheckedT': json['last_checked_t'] == null ? undefined : json['last_checked_t'],
        'lastChecker': json['last_checker'] == null ? undefined : json['last_checker'],
        'states': json['states'] == null ? undefined : json['states'],
        'statesHierarchy': json['states_hierarchy'] == null ? undefined : json['states_hierarchy'],
        'statesTags': json['states_tags'] == null ? undefined : json['states_tags'],
        'miscTags': json['misc_tags'] == null ? undefined : json['misc_tags'],
        'additivesOriginalTags': json['additives_original_tags'] == null ? undefined : json['additives_original_tags'],
        'additivesPrevOriginalTags': json['additives_prev_original_tags'] == null ? undefined : json['additives_prev_original_tags'],
        'addedCountriesTags': json['added_countries_tags'] == null ? undefined : json['added_countries_tags'],
        'allergensFromIngredients': json['allergens_from_ingredients'] == null ? undefined : json['allergens_from_ingredients'],
        'allergensFromUser': json['allergens_from_user'] == null ? undefined : json['allergens_from_user'],
        'aminoAcidsPrevTags': json['amino_acids_prev_tags'] == null ? undefined : json['amino_acids_prev_tags'],
        'aminoAcidsTags': json['amino_acids_tags'] == null ? undefined : json['amino_acids_tags'],
        'carbonFootprintPercentOfKnownIngredients': json['carbon_footprint_percent_of_known_ingredients'] == null ? undefined : json['carbon_footprint_percent_of_known_ingredients'],
        'categoriesProperties': json['categories_properties'] == null ? undefined : ProductExtendedCategoriesPropertiesFromJSON(json['categories_properties']),
        'categoriesPropertiesTags': json['categories_properties_tags'] == null ? undefined : json['categories_properties_tags'],
        'categoryProperties': json['category_properties'] == null ? undefined : json['category_properties'],
        'ciqualFoodNameTags': json['ciqual_food_name_tags'] == null ? undefined : json['ciqual_food_name_tags'],
        'comparedToCategory': json['compared_to_category'] == null ? undefined : json['compared_to_category'],
        'conservationConditions': json['conservation_conditions'] == null ? undefined : json['conservation_conditions'],
        'customerService': json['customer_service'] == null ? undefined : json['customer_service'],
        'expirationDate': json['expiration_date'] == null ? undefined : json['expiration_date'],
        'link': json['link'] == null ? undefined : json['link'],
        'mainCountriesTags': json['main_countries_tags'] == null ? undefined : json['main_countries_tags'],
        'mineralsPrevTags': json['minerals_prev_tags'] == null ? undefined : json['minerals_prev_tags'],
        'mineralsTags': json['minerals_tags'] == null ? undefined : json['minerals_tags'],
        'ownerFields': json['owner_fields'] == null ? undefined : ProductExtendedOwnerFieldsFromJSON(json['owner_fields']),
        'novaGroupsMarkers': json['nova_groups_markers'] == null ? undefined : ProductExtendedNovaGroupsMarkersFromJSON(json['nova_groups_markers']),
        'nucleotidesTags': json['nucleotides_tags'] == null ? undefined : json['nucleotides_tags'],
        'origin': json['origin'] == null ? undefined : json['origin'],
        'purchasePlaces': json['purchase_places'] == null ? undefined : json['purchase_places'],
        'purchasePlacesTags': json['purchase_places_tags'] == null ? undefined : json['purchase_places_tags'],
        'stores': json['stores'] == null ? undefined : json['stores'],
        'storesTags': json['stores_tags'] == null ? undefined : json['stores_tags'],
        'tracesFromIngredients': json['traces_from_ingredients'] == null ? undefined : json['traces_from_ingredients'],
        'tracesFromUser': json['traces_from_user'] == null ? undefined : json['traces_from_user'],
        'createdT': json['created_t'] == null ? undefined : json['created_t'],
        'creator': json['creator'] == null ? undefined : json['creator'],
        'editorsTags': json['editors_tags'] == null ? undefined : json['editors_tags'],
        'informersTags': json['informers_tags'] == null ? undefined : json['informers_tags'],
        'interfaceVersionCreated': json['interface_version_created'] == null ? undefined : json['interface_version_created'],
        'interfaceVersionModified': json['interface_version_modified'] == null ? undefined : json['interface_version_modified'],
        'languages': json['languages'] == null ? undefined : json['languages'],
        'languagesCodes': json['languages_codes'] == null ? undefined : json['languages_codes'],
        'languagesHierarchy': json['languages_hierarchy'] == null ? undefined : json['languages_hierarchy'],
        'languagesTags': json['languages_tags'] == null ? undefined : json['languages_tags'],
        'lastEditDatesTags': json['last_edit_dates_tags'] == null ? undefined : json['last_edit_dates_tags'],
        'lastEditor': json['last_editor'] == null ? undefined : json['last_editor'],
        'lastModifiedBy': json['last_modified_by'] == null ? undefined : json['last_modified_by'],
        'lastModifiedT': json['last_modified_t'] == null ? undefined : json['last_modified_t'],
        'owner': json['owner'] == null ? undefined : json['owner'],
        'ownersTags': json['owners_tags'] == null ? undefined : json['owners_tags'],
        'photographersTags': json['photographers_tags'] == null ? undefined : json['photographers_tags'],
        'rev': json['rev'] == null ? undefined : json['rev'],
        'sources': json['sources'] == null ? undefined : ((json['sources'] as Array<any>).map(ProductMetaSourceFromJSON)),
        'sourcesFields': json['sources_fields'] == null ? undefined : ProductMetaSourceFieldsFromJSON(json['sources_fields']),
        'teams': json['teams'] == null ? undefined : json['teams'],
        'teamsTags': json['teams_tags'] == null ? undefined : json['teams_tags'],
        'updateKey': json['update_key'] == null ? undefined : json['update_key'],
        'knowledgePanels': json['knowledge_panels'] == null ? undefined : PanelsFromJSON(json['knowledge_panels']),
        'attributeGroups': json['attribute_groups'] == null ? undefined : ((json['attribute_groups'] as Array<any>).map(ProductAttributeGroupFromJSON)),
    };
}

export function ProductBaseToJSON(value?: ProductBase | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'abbreviated_product_name': value['abbreviatedProductName'],
        'code': value['code'],
        'codes_tags': value['codesTags'],
        'generic_name': value['genericName'],
        'id': value['id'],
        'lc': value['lc'],
        'lang': value['lang'],
        'nova_group': value['novaGroup'],
        'nova_groups': value['novaGroups'],
        'obsolete': value['obsolete'],
        'obsolete_since_date': value['obsoleteSinceDate'],
        'product_name': value['productName'],
        'product_name_en': value['productNameEn'],
        'product_quantity': value['productQuantity'],
        'product_quantity_unit': value['productQuantityUnit'],
        'quantity': value['quantity'],
        'additives_n': value['additivesN'],
        'checked': value['checked'],
        'complete': value['complete'],
        'completeness': value['completeness'],
        'ecoscore_grade': value['ecoscoreGrade'],
        'ecoscore_score': value['ecoscoreScore'],
        'food_groups': value['foodGroups'],
        'food_groups_tags': value['foodGroupsTags'],
        'nutrient_levels': ProductMiscNutrientLevelsToJSON(value['nutrientLevels']),
        'packaging_text': value['packagingText'],
        'packagings': value['packagings'] == null ? undefined : ((value['packagings'] as Array<any>).map(PackagingComponentREADToJSON)),
        'packagings_complete': value['packagingsComplete'],
        'pnns_groups_1': value['pnnsGroups1'],
        'pnns_groups_1_tags': value['pnnsGroups1Tags'],
        'pnns_groups_2': value['pnnsGroups2'],
        'pnns_groups_2_tags': value['pnnsGroups2Tags'],
        'popularity_key': value['popularityKey'],
        'popularity_tags': value['popularityTags'],
        'scans_n': value['scansN'],
        'unique_scans_n': value['uniqueScansN'],
        'serving_quantity': value['servingQuantity'],
        'serving_quantity_unit': value['servingQuantityUnit'],
        'serving_size': value['servingSize'],
        'brands': value['brands'],
        'brands_tags': value['brandsTags'],
        'categories': value['categories'],
        'categories_hierarchy': value['categoriesHierarchy'],
        'categories_lc': value['categoriesLc'],
        'categories_tags': value['categoriesTags'],
        'checkers_tags': value['checkersTags'],
        'cities': value['cities'],
        'cities_tags': value['citiesTags'],
        'correctors_tags': value['correctorsTags'],
        'countries': value['countries'],
        'countries_hierarchy': value['countriesHierarchy'],
        'countries_lc': value['countriesLc'],
        'countries_tags': value['countriesTags'],
        'ecoscore_tags': value['ecoscoreTags'],
        'emb_codes': value['embCodes'],
        'emb_codes_orig': value['embCodesOrig'],
        'emb_codes_tags': value['embCodesTags'],
        'labels': value['labels'],
        'labels_hierarchy': value['labelsHierarchy'],
        'labels_lc': value['labelsLc'],
        'labels_tags': value['labelsTags'],
        'entry_dates_tags': value['entryDatesTags'],
        'manufacturing_places': value['manufacturingPlaces'],
        'manufacturing_places_tags': value['manufacturingPlacesTags'],
        'nova_groups_tags': value['novaGroupsTags'],
        'nutrient_levels_tags': value['nutrientLevelsTags'],
        'image_front_small_url': value['imageFrontSmallUrl'],
        'image_front_thumb_url': value['imageFrontThumbUrl'],
        'image_front_url': value['imageFrontUrl'],
        'image_nutrition_small_url': value['imageNutritionSmallUrl'],
        'image_nutrition_thumb_url': value['imageNutritionThumbUrl'],
        'image_nutrition_url': value['imageNutritionUrl'],
        'image_small_url': value['imageSmallUrl'],
        'image_thumb_url': value['imageThumbUrl'],
        'image_url': value['imageUrl'],
        'images': ProductImagesToJSON(value['images']),
        'last_image_dates_tags': value['lastImageDatesTags'],
        'last_image_t': value['lastImageT'],
        'selected_images': ProductSelectedImagesToJSON(value['selectedImages']),
        'ecoscore_data': EcoscoreDataToJSON(value['ecoscoreData']),
        'ecoscore_extended_data_version': value['ecoscoreExtendedDataVersion'],
        'environment_impact_level': value['environmentImpactLevel'],
        'environment_impact_level_tags': value['environmentImpactLevelTags'],
        'additives_tags': value['additivesTags'],
        'allergens': value['allergens'],
        'allergens_lc': value['allergensLc'],
        'allergens_hierarchy': value['allergensHierarchy'],
        'allergens_tags': value['allergensTags'],
        'ingredients': value['ingredients'] == null ? undefined : ((value['ingredients'] as Array<any>).map(IngredientToJSON)),
        'ingredients_analysis': ProductIngredientsIngredientsAnalysisToJSON(value['ingredientsAnalysis']),
        'ingredients_analysis_tags': value['ingredientsAnalysisTags'],
        'ingredients_from_or_that_may_be_from_palm_oil_n': value['ingredientsFromOrThatMayBeFromPalmOilN'],
        'ingredients_from_palm_oil_n': value['ingredientsFromPalmOilN'],
        'ingredients_from_palm_oil_tags': value['ingredientsFromPalmOilTags'],
        'ingredients_hierarchy': value['ingredientsHierarchy'],
        'ingredients_n': value['ingredientsN'],
        'ingredients_n_tags': value['ingredientsNTags'],
        'ingredients_original_tags': value['ingredientsOriginalTags'],
        'ingredients_percent_analysis': value['ingredientsPercentAnalysis'],
        'ingredients_sweeteners_n': value['ingredientsSweetenersN'],
        'ingredients_non_nutritive_sweeteners_n': value['ingredientsNonNutritiveSweetenersN'],
        'ingredients_tags': value['ingredientsTags'],
        'ingredients_lc': value['ingredientsLc'],
        'ingredients_text': value['ingredientsText'],
        'ingredients_text_with_allergens': value['ingredientsTextWithAllergens'],
        'ingredients_that_may_be_from_palm_oil_n': value['ingredientsThatMayBeFromPalmOilN'],
        'ingredients_that_may_be_from_palm_oil_tags': value['ingredientsThatMayBeFromPalmOilTags'],
        'ingredients_with_specified_percent_n': value['ingredientsWithSpecifiedPercentN'],
        'ingredients_with_specified_percent_sum': value['ingredientsWithSpecifiedPercentSum'],
        'ingredients_with_unspecified_percent_n': value['ingredientsWithUnspecifiedPercentN'],
        'ingredients_with_unspecified_percent_sum': value['ingredientsWithUnspecifiedPercentSum'],
        'known_ingredients_n': value['knownIngredientsN'],
        'origins': value['origins'],
        'origins_hierarchy': value['originsHierarchy'],
        'origins_lc': value['originsLc'],
        'origins_tags': value['originsTags'],
        'traces': value['traces'],
        'traces_hierarchy': value['tracesHierarchy'],
        'traces_lc': value['tracesLc'],
        'traces_tags': value['tracesTags'],
        'unknown_ingredients_n': value['unknownIngredientsN'],
        'no_nutrition_data': value['noNutritionData'],
        'nutrition_data_per': value['nutritionDataPer'],
        'nutrition_data_prepared_per': value['nutritionDataPreparedPer'],
        'nutriments': ProductNutritionNutrimentsToJSON(value['nutriments']),
        'nutriscore_data': ProductNutritionNutriscoreDataToJSON(value['nutriscoreData']),
        'nutriscore_grade': value['nutriscoreGrade'],
        'nutriscore_score': value['nutriscoreScore'],
        'nutriscore_score_opposite': value['nutriscoreScoreOpposite'],
        'nutrition_grade_fr': value['nutritionGradeFr'],
        'nutrition_grades': value['nutritionGrades'],
        'nutrition_grades_tags': value['nutritionGradesTags'],
        'nutrition_score_beverage': value['nutritionScoreBeverage'],
        'nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients': value['nutritionScoreWarningFruitsVegetablesNutsEstimateFromIngredients'],
        'nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients_value': value['nutritionScoreWarningFruitsVegetablesNutsEstimateFromIngredientsValue'],
        'nutrition_score_warning_no_fiber': value['nutritionScoreWarningNoFiber'],
        'other_nutritional_substances_tags': value['otherNutritionalSubstancesTags'],
        'unknown_nutrients_tags': value['unknownNutrientsTags'],
        'vitamins_tags': value['vitaminsTags'],
        'data_quality_bugs_tags': value['dataQualityBugsTags'],
        'data_quality_errors_tags': value['dataQualityErrorsTags'],
        'data_quality_info_tags': value['dataQualityInfoTags'],
        'data_quality_tags': value['dataQualityTags'],
        'data_quality_warnings_tags': value['dataQualityWarningsTags'],
        'data_sources': value['dataSources'],
        'data_sources_tags': value['dataSourcesTags'],
        'last_check_dates_tags': value['lastCheckDatesTags'],
        'last_checked_t': value['lastCheckedT'],
        'last_checker': value['lastChecker'],
        'states': value['states'],
        'states_hierarchy': value['statesHierarchy'],
        'states_tags': value['statesTags'],
        'misc_tags': value['miscTags'],
        'additives_original_tags': value['additivesOriginalTags'],
        'additives_prev_original_tags': value['additivesPrevOriginalTags'],
        'added_countries_tags': value['addedCountriesTags'],
        'allergens_from_ingredients': value['allergensFromIngredients'],
        'allergens_from_user': value['allergensFromUser'],
        'amino_acids_prev_tags': value['aminoAcidsPrevTags'],
        'amino_acids_tags': value['aminoAcidsTags'],
        'carbon_footprint_percent_of_known_ingredients': value['carbonFootprintPercentOfKnownIngredients'],
        'categories_properties': ProductExtendedCategoriesPropertiesToJSON(value['categoriesProperties']),
        'categories_properties_tags': value['categoriesPropertiesTags'],
        'category_properties': value['categoryProperties'],
        'ciqual_food_name_tags': value['ciqualFoodNameTags'],
        'compared_to_category': value['comparedToCategory'],
        'conservation_conditions': value['conservationConditions'],
        'customer_service': value['customerService'],
        'expiration_date': value['expirationDate'],
        'link': value['link'],
        'main_countries_tags': value['mainCountriesTags'],
        'minerals_prev_tags': value['mineralsPrevTags'],
        'minerals_tags': value['mineralsTags'],
        'owner_fields': ProductExtendedOwnerFieldsToJSON(value['ownerFields']),
        'nova_groups_markers': ProductExtendedNovaGroupsMarkersToJSON(value['novaGroupsMarkers']),
        'nucleotides_tags': value['nucleotidesTags'],
        'origin': value['origin'],
        'purchase_places': value['purchasePlaces'],
        'purchase_places_tags': value['purchasePlacesTags'],
        'stores': value['stores'],
        'stores_tags': value['storesTags'],
        'traces_from_ingredients': value['tracesFromIngredients'],
        'traces_from_user': value['tracesFromUser'],
        'created_t': value['createdT'],
        'creator': value['creator'],
        'editors_tags': value['editorsTags'],
        'informers_tags': value['informersTags'],
        'interface_version_created': value['interfaceVersionCreated'],
        'interface_version_modified': value['interfaceVersionModified'],
        'languages': value['languages'],
        'languages_codes': value['languagesCodes'],
        'languages_hierarchy': value['languagesHierarchy'],
        'languages_tags': value['languagesTags'],
        'last_edit_dates_tags': value['lastEditDatesTags'],
        'last_editor': value['lastEditor'],
        'last_modified_by': value['lastModifiedBy'],
        'last_modified_t': value['lastModifiedT'],
        'owner': value['owner'],
        'owners_tags': value['ownersTags'],
        'photographers_tags': value['photographersTags'],
        'rev': value['rev'],
        'sources': value['sources'] == null ? undefined : ((value['sources'] as Array<any>).map(ProductMetaSourceToJSON)),
        'sources_fields': ProductMetaSourceFieldsToJSON(value['sourcesFields']),
        'teams': value['teams'],
        'teams_tags': value['teamsTags'],
        'update_key': value['updateKey'],
        'knowledge_panels': PanelsToJSON(value['knowledgePanels']),
        'attribute_groups': value['attributeGroups'] == null ? undefined : ((value['attributeGroups'] as Array<any>).map(ProductAttributeGroupToJSON)),
    };
}

