/* tslint:disable */
/* eslint-disable */
/**
 * Open Food Facts Open API
 * As a developer, the Open Food Facts API allows you to get information and contribute to the products database. You can create great apps to help people make better food choices and also provide data to enhance the database. 
 *
 * The version of the OpenAPI document: 2
 * Contact: contact@openfoodfacts.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * A text in simple HTML format to display.
 * 
 * For some specific texts that correspond to a product field (e.g. a product name, the ingredients list of a product),the edit_field_* fields are used to indicate how to edit the field value.
 * @export
 * @interface TextElement
 */
export interface TextElement {
    /**
     * the type of text, might influence the way you display it.
     * 
     * @type {string}
     * @memberof TextElement
     */
    type?: TextElementTypeEnum;
    /**
     * Text to display in HTML format.
     * @type {string}
     * @memberof TextElement
     */
    html?: string;
    /**
     * Language of the text. The name of the language is returned in the language requested when making the API call. e.g. if the text is in Polish, and the requested language is French, the language field will contain "Polonais" (French for "Polish"). Only set for specific fields such as the list of ingredients of a product.
     * @type {string}
     * @memberof TextElement
     */
    language?: string;
    /**
     * 2 letter language code for the text. Only set for specific fields such as the list of ingredients of a product.
     * @type {string}
     * @memberof TextElement
     */
    lc?: string;
    /**
     * id of the field used to edit this text in the product edit API.
     * @type {string}
     * @memberof TextElement
     */
    editFieldId?: string;
    /**
     * Type of the product field.
     * @type {string}
     * @memberof TextElement
     */
    editFieldType?: string;
    /**
     * Current value of the product field. This may differ from the html field which can contain extra formating.
     * @type {string}
     * @memberof TextElement
     */
    editFieldValue?: string;
    /**
     * Link to the source
     * @type {string}
     * @memberof TextElement
     */
    sourceUrl?: string;
    /**
     * name of the source
     * @type {string}
     * @memberof TextElement
     */
    sourceText?: string;
    /**
     * Source locale name
     * @type {string}
     * @memberof TextElement
     */
    sourceLc?: string;
    /**
     * Human readable source locale name
     * @type {string}
     * @memberof TextElement
     */
    sourceLanguage?: string;
}


/**
 * @export
 */
export const TextElementTypeEnum = {
    Summary: 'summary',
    Warning: 'warning',
    Notes: 'notes'
} as const;
export type TextElementTypeEnum = typeof TextElementTypeEnum[keyof typeof TextElementTypeEnum];


/**
 * Check if a given object implements the TextElement interface.
 */
export function instanceOfTextElement(value: object): value is TextElement {
    return true;
}

export function TextElementFromJSON(json: any): TextElement {
    return TextElementFromJSONTyped(json, false);
}

export function TextElementFromJSONTyped(json: any, ignoreDiscriminator: boolean): TextElement {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'] == null ? undefined : json['type'],
        'html': json['html'] == null ? undefined : json['html'],
        'language': json['language'] == null ? undefined : json['language'],
        'lc': json['lc'] == null ? undefined : json['lc'],
        'editFieldId': json['edit_field_id'] == null ? undefined : json['edit_field_id'],
        'editFieldType': json['edit_field_type'] == null ? undefined : json['edit_field_type'],
        'editFieldValue': json['edit_field_value'] == null ? undefined : json['edit_field_value'],
        'sourceUrl': json['source_url'] == null ? undefined : json['source_url'],
        'sourceText': json['source_text'] == null ? undefined : json['source_text'],
        'sourceLc': json['source_lc'] == null ? undefined : json['source_lc'],
        'sourceLanguage': json['source_language'] == null ? undefined : json['source_language'],
    };
}

export function TextElementToJSON(value?: TextElement | null): any {
    if (value == null) {
        return value;
    }
    return {
        
        'type': value['type'],
        'html': value['html'],
        'language': value['language'],
        'lc': value['lc'],
        'edit_field_id': value['editFieldId'],
        'edit_field_type': value['editFieldType'],
        'edit_field_value': value['editFieldValue'],
        'source_url': value['sourceUrl'],
        'source_text': value['sourceText'],
        'source_lc': value['sourceLc'],
        'source_language': value['sourceLanguage'],
    };
}

