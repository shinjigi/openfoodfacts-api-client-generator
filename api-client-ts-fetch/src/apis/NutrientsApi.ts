/* tslint:disable */
/* eslint-disable */
/**
 * Open Food Facts Open API
 * As a developer, the Open Food Facts API allows you to get information and contribute to the products database. You can create great apps to help people make better food choices and also provide data to enhance the database. 
 *
 * The version of the OpenAPI document: 2
 * Contact: contact@openfoodfacts.org
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Nutrient,
} from '../models/index';
import {
    NutrientFromJSON,
    NutrientToJSON,
} from '../models/index';

export interface GetCgiNutrientsPlRequest {
    cc?: string;
    lc?: string;
}

/**
 * 
 */
export class NutrientsApi extends runtime.BaseAPI {

    /**
     * Used to display the nutrition facts table of a product, or to display a form to input those nutrition facts. 
     * Get a nested list of nutrients that can be displayed in the nutrition facts table for a specific country and language
     */
    async getCgiNutrientsPlRaw(requestParameters: GetCgiNutrientsPlRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Nutrient>>> {
        const queryParameters: any = {};

        if (requestParameters['cc'] != null) {
            queryParameters['cc'] = requestParameters['cc'];
        }

        if (requestParameters['lc'] != null) {
            queryParameters['lc'] = requestParameters['lc'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/cgi/nutrients.pl`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(NutrientFromJSON));
    }

    /**
     * Used to display the nutrition facts table of a product, or to display a form to input those nutrition facts. 
     * Get a nested list of nutrients that can be displayed in the nutrition facts table for a specific country and language
     */
    async getCgiNutrientsPl(requestParameters: GetCgiNutrientsPlRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Nutrient>> {
        const response = await this.getCgiNutrientsPlRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
