[main] WARN  o.o.codegen.DefaultCodegen - Generation using 3.1.0 specs is in development and is not officially supported yet. If you would like to expedite development, please consider woking on the open issues in the 3.1.0 project: https://github.com/orgs/OpenAPITools/projects/4/views/1 and reach out to our team on Slack at https://join.slack.com/t/openapi-generator/shared_invite/zt-12jxxd7p2-XUeQM~4pzsU9x~eGLQqX2g
[main] INFO  o.o.codegen.DefaultGenerator - Generating with dryRun=false
[main] INFO  o.o.c.ignore.CodegenIgnoreProcessor - Output directory (/mnt/c/Projects/Iside/fe-client/api-client-ts) does not exist, or is inaccessible. No file (.openapi-generator-ignore) will be evaluated.
[main] INFO  o.o.codegen.DefaultGenerator - OpenAPI Generator: typescript-fetch (client)
[main] INFO  o.o.codegen.DefaultGenerator - Generator 'typescript-fetch' is considered stable.
{
  "openapi" : "3.1.0",
  "info" : {
    "contact" : {
      "email" : "contact@openfoodfacts.org",
      "name" : "Open Food Facts",
      "url" : "https://slack.openfoodfacts.org/"
    },
    "description" : "As a developer, the Open Food Facts API allows you to get information\nand contribute to the products database. You can create great apps to\nhelp people make better food choices and also provide data to enhance the database.\n",
    "license" : {
      "name" : "data: ODbL",
      "url" : "https://opendatacommons.org/licenses/odbl/summary/index.html",
      "x-identifier" : "ODbL-1.0"
    },
    "termsOfService" : "https://world.openfoodfacts.org/terms-of-use",
    "title" : "Open Food Facts Open API",
    "version" : "2"
  },
  "externalDocs" : {
    "description" : "Please read the API introduction before using this API.\n",
    "url" : "https://openfoodfacts.github.io/openfoodfacts-server/api/"
  },
  "servers" : [ {
    "description" : "dev",
    "url" : "https://world.openfoodfacts.net"
  }, {
    "description" : "prod",
    "url" : "https://world.openfoodfacts.org"
  } ],
  "tags" : [ {
    "description" : "TODO",
    "name" : "Read Requests"
  }, {
    "description" : "TODO",
    "name" : "Write Requests"
  } ],
  "paths" : {
    "/api/v2/product/{barcode}" : {
      "get" : {
        "description" : "A product can be fetched via its unique barcode.\nIt returns all the details of that product response.\nYou can add th Knowledge panels that gives high leve informations about a product,\nready to display.\nThis is used by open food facts website,\nand by the official mobile application\n",
        "operationId" : "get-product-by-barcode",
        "parameters" : [ {
          "description" : "The barcode of the product to be fetched\n",
          "explode" : false,
          "in" : "path",
          "name" : "barcode",
          "required" : true,
          "schema" : { },
          "style" : "simple"
        }, {
          "description" : "TODO",
          "explode" : true,
          "in" : "query",
          "name" : "fields",
          "required" : false,
          "schema" : {
            "enum" : [ "knowledge_panels" ]
          },
          "style" : "form"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "examples" : {
                  "spread-example" : {
                    "summary" : "retrieved values for a well known chocolate and nut spread",
                    "value" : {
                      "code" : "3017620422003",
                      "product" : {
                        "_id" : "3017620422003",
                        "_keywords" : [ "et", "pate", "cacao", "produit", "ferrero", "gluten", "petit-dejeuner", "san", "au", "aux", "sucre", "nutella" ],
                        "abbreviated_product_name" : "Nutella t.400",
                        "abbreviated_product_name_fr" : "Nutella t.400",
                        "added_countries_tags" : [ ],
                        "additives_n" : 1,
                        "additives_original_tags" : [ "en:e322" ],
                        "additives_prev_original_tags" : [ "en:e322" ],
                        "additives_tags" : [ "en:e322" ],
                        "allergens" : "en:milk,en:nuts,en:soybeans",
                        "allergens_from_ingredients" : "en:nuts, hazelnuts",
                        "allergens_from_user" : "(fr) en:milk,en:nuts,en:soybeans",
                        "allergens_hierarchy" : [ "en:milk", "en:nuts", "en:soybeans" ],
                        "allergens_lc" : "fr",
                        "allergens_tags" : [ "en:milk", "en:nuts", "en:soybeans" ],
                        "amino_acids_prev_tags" : [ ],
                        "amino_acids_tags" : [ ],
                        "brands" : "Ferrero",
                        "brands_tags" : [ "ferrero" ],
                        "carbon_footprint_percent_of_known_ingredients" : 13,
                        "categories" : "Produits à tartiner,Petit-déjeuners,Produits à tartiner sucrés,Pâtes à tartiner,Pâtes à tartiner aux noisettes,Pâtes à tartiner aux noisettes et au cacao",
                        "categories_hierarchy" : [ "en:breakfasts", "en:spreads", "en:sweet-spreads", "en:hazelnut-spreads", "en:chocolate-spreads", "en:cocoa-and-hazelnuts-spreads" ],
                        "categories_lc" : "fr",
                        "categories_properties" : {
                          "agribalyse_food_code:en" : "31032",
                          "agribalyse_proxy_food_code:en" : "31032",
                          "ciqual_food_code:en" : "31032"
                        },
                        "categories_properties_tags" : [ "all-products", "categories-known", "agribalyse-food-code-31032", "agribalyse-food-code-known", "agribalyse-proxy-food-code-31032", "agribalyse-proxy-food-code-known", "ciqual-food-code-31032", "ciqual-food-code-known", "agribalyse-known", "agribalyse-31032" ],
                        "categories_tags" : [ "en:breakfasts", "en:spreads", "en:sweet-spreads", "fr:pates-a-tartiner", "en:hazelnut-spreads", "en:chocolate-spreads", "en:cocoa-and-hazelnuts-spreads" ],
                        "category_properties" : {
                          "ciqual_food_name:en" : "Chocolate spread with hazelnuts"
                        },
                        "checked" : "on",
                        "checkers_tags" : [ "moon-rabbit" ],
                        "ciqual_food_name_tags" : [ "chocolate-spread-with-hazelnuts" ],
                        "cities_tags" : [ ],
                        "code" : "3017620422003",
                        "codes_tags" : [ "code-13", "3017620422xxx", "301762042xxxx", "30176204xxxxx", "3017620xxxxxx", "301762xxxxxxx", "30176xxxxxxxx", "3017xxxxxxxxx", "301xxxxxxxxxx", "30xxxxxxxxxxx", "3xxxxxxxxxxxx" ],
                        "compared_to_category" : "en:cocoa-and-hazelnuts-spreads",
                        "complete" : 0,
                        "completeness" : 0.875,
                        "conservation_conditions" : "A conserver au sec et à l'abri de la chaleur. Ne pas mettre au réfrigérateur.",
                        "conservation_conditions_fr" : "A conserver au sec et à l'abri de la chaleur. Ne pas mettre au réfrigérateur.",
                        "correctors_tags" : [ "user1", "user2", "user3", "user4" ],
                        "countries" : "en:Algeria  Austria  Belgium  Canada  France  Germany  Italy  Luxembourg  Mexico  Morocco  Netherlands  Portugal  Senegal  Spain  Switzerland  Tunisia  United Kingdom  United States",
                        "countries_beforescanbot" : "Belgium,France",
                        "countries_hierarchy" : [ "en:Algeria  Austria  Belgium  Canada  France  Germany  Italy  Luxembourg  Mexico  Morocco  Netherlands  Portugal  Senegal  Spain  Switzerland  Tunisia  United Kingdom  United States" ],
                        "countries_lc" : "fr",
                        "countries_tags" : [ "en:algeria-austria-belgium-canada-france-germany-italy-luxembourg-mexico-morocco-netherlands-portugal-senegal-spain-switzerland-tunisia-united-kingdom-united-states" ],
                        "created_t" : 1457680652,
                        "creator" : "openfoodfacts-contributors",
                        "customer_service" : "FERRERO FRANCE COMMERCIALE - Service Consommateurs, CS 90058 - 76136 MONT SAINT AIGNAN Cedex",
                        "customer_service_fr" : "FERRERO FRANCE COMMERCIALE - Service Consommateurs, CS 90058 - 76136 MONT SAINT AIGNAN Cedex",
                        "data_quality_bugs_tags" : [ ],
                        "data_quality_errors_tags" : [ ],
                        "data_quality_info_tags" : [ "en:packaging-data-incomplete", "en:ingredients-percent-analysis-ok", "en:ecoscore-extended-data-computed", "en:ecoscore-extended-data-less-precise-than-agribalyse", "en:food-groups-1-known", "en:food-groups-2-known", "en:food-groups-3-unknown" ],
                        "data_quality_tags" : [ "en:packaging-data-incomplete", "en:ingredients-percent-analysis-ok", "en:ecoscore-extended-data-computed", "en:ecoscore-extended-data-less-precise-than-agribalyse", "en:food-groups-1-known", "en:food-groups-2-known", "en:food-groups-3-unknown", "en:ecoscore-origins-of-ingredients-origins-are-100-percent-unknown", "en:ecoscore-packaging-unspecified-shape", "en:ecoscore-production-system-no-label" ],
                        "data_quality_warnings_tags" : [ "en:ecoscore-origins-of-ingredients-origins-are-100-percent-unknown", "en:ecoscore-packaging-unspecified-shape", "en:ecoscore-production-system-no-label" ],
                        "data_sources" : "Database - FoodRepo / openfood.ch, Databases, Producer - Ferrero, Producers, App - yuka, Apps, Producer - ferrero-france-commerciale, Database - Equadis, Database - GDSN, App - InFood, App - Open Food Facts, App - halal-healthy, App - smoothie-openfoodfacts",
                        "data_sources_tags" : [ "database-foodrepo-openfood-ch", "databases", "producer-ferrero", "producers", "app-yuka", "apps", "producer-ferrero-france-commerciale", "database-equadis", "database-gdsn", "app-infood", "app-open-food-facts", "app-halal-healthy", "app-smoothie-openfoodfacts" ],
                        "ecoscore_data" : {
                          "adjustments" : {
                            "origins_of_ingredients" : {
                              "aggregated_origins" : [ {
                                "origin" : "en:unknown",
                                "percent" : 100
                              } ],
                              "epi_score" : 0,
                              "epi_value" : -5,
                              "origins_from_origins_field" : [ "en:unknown" ],
                              "transportation_scores" : {
                                "fr" : 0,
                                "no" : 0,
                                "uk" : 0,
                                "us" : 0,
                                "world" : 0
                              },
                              "transportation_values" : {
                                "fr" : 0,
                                "no" : 0,
                                "uk" : 0,
                                "us" : 0,
                                "world" : 0
                              },
                              "values" : {
                                "fr" : -5,
                                "no" : -5,
                                "uk" : -5,
                                "us" : -5,
                                "world" : -5
                              },
                              "warning" : "origins_are_100_percent_unknown"
                            },
                            "packaging" : {
                              "non_recyclable_and_non_biodegradable_materials" : 0,
                              "packagings" : [ {
                                "ecoscore_material_score" : 81,
                                "ecoscore_shape_ratio" : 1,
                                "material" : "en:clear-glass",
                                "shape" : "en:unknown"
                              } ],
                              "score" : 81,
                              "value" : -2,
                              "warning" : "unspecified_shape"
                            },
                            "production_system" : {
                              "labels" : [ ],
                              "value" : 0,
                              "warning" : "no_label"
                            },
                            "threatened_species" : {
                              "ingredient" : "en:palm-oil",
                              "value" : -10
                            }
                          },
                          "agribalyse" : {
                            "agribalyse_food_code" : "31032",
                            "co2_agriculture" : 8.7770996,
                            "co2_consumption" : 0,
                            "co2_distribution" : 0.014104999,
                            "co2_packaging" : 0.18864842,
                            "co2_processing" : 0.69167973,
                            "co2_total" : 9.8742343,
                            "co2_transportation" : 0.19708507,
                            "code" : "31032",
                            "dqr" : "2.54",
                            "ef_agriculture" : 0.61477708,
                            "ef_consumption" : 0,
                            "ef_distribution" : 0.0045906531,
                            "ef_packaging" : 0.020453714,
                            "ef_processing" : 0.085674643,
                            "ef_total" : 0.74366703,
                            "ef_transportation" : 0.017824104,
                            "is_beverage" : 0,
                            "name_en" : "Chocolate spread with hazelnuts",
                            "name_fr" : "Pâte à tartiner chocolat et noisette",
                            "score" : 40
                          },
                          "grade" : "d",
                          "grades" : {
                            "fr" : "d",
                            "no" : "d",
                            "uk" : "d",
                            "us" : "d",
                            "world" : "d"
                          },
                          "missing" : {
                            "labels" : 1,
                            "origins" : 1,
                            "packagings" : 1
                          },
                          "missing_data_warning" : 1,
                          "score" : 23,
                          "scores" : {
                            "fr" : 23,
                            "no" : 23,
                            "uk" : 23,
                            "us" : 23,
                            "world" : 23
                          },
                          "status" : "known"
                        },
                        "ecoscore_extended_data" : {
                          "impact" : {
                            "ef_single_score_log_stddev" : 0.0539895633164057,
                            "likeliest_impacts" : {
                              "Climate_change" : 0.172717449218484,
                              "EF_single_score" : 0.023255035815491
                            },
                            "likeliest_recipe" : {
                              "en:emulsifier" : 0.388589430098073,
                              "en:hazelnut_oil" : 12.806852015349,
                              "en:palm_oil" : 16.6103749736231,
                              "en:sugar" : 52.9709312507153,
                              "en:water" : 4.90093151221936,
                              "fr:Cacao_Maigre_7" : 3.94056985087663,
                              "fr:Lait__cr_m__En_Poudre_8" : 6.8959972390341
                            },
                            "mass_ratio_uncharacterized" : 0.11,
                            "uncharacterized_ingredients" : {
                              "impact" : [ "fr:Lait Écrémé En Poudre 8", "fr:Cacao Maigre 7" ],
                              "nutrition" : [ "fr:Lait Écrémé En Poudre 8", "fr:Cacao Maigre 7" ]
                            },
                            "uncharacterized_ingredients_mass_proportion" : {
                              "impact" : 0.11,
                              "nutrition" : 0.11
                            },
                            "uncharacterized_ingredients_ratio" : {
                              "impact" : 0.333333333333333,
                              "nutrition" : 0.333333333333333
                            },
                            "warnings" : [ "The product has a high number of nutrition uncharacterized ingredients: 33%", "The product has a high number of impact uncharacterized ingredients: 33%", "The estimated mass of nutrition uncharacterized ingredients in the product is high: 11%", "The estimated mass of impact uncharacterized ingredients in the product is high: 11%" ]
                          }
                        },
                        "ecoscore_extended_data_version" : "4",
                        "ecoscore_grade" : "d",
                        "ecoscore_score" : 23,
                        "ecoscore_tags" : [ "d" ],
                        "editors_tags" : [ "user1", "user2", "user3", "user4" ],
                        "emb_codes" : "",
                        "emb_codes_20141016" : "",
                        "emb_codes_orig" : "",
                        "emb_codes_tags" : [ ],
                        "entry_dates_tags" : [ "2016-03-11", "2016-03", "2016" ],
                        "environment_impact_level" : "",
                        "environment_impact_level_tags" : [ ],
                        "expiration_date" : "09/2021",
                        "food_groups" : "en:sweets",
                        "food_groups_tags" : [ "en:sugary-snacks", "en:sweets" ],
                        "fruits-vegetables-nuts_100g_estimate" : 0,
                        "generic_name" : "",
                        "generic_name_ar" : "نوتلا",
                        "generic_name_de" : "Nuss-Nougat-Creme",
                        "generic_name_en" : "",
                        "generic_name_es" : "Crema de Avellanas con cacao",
                        "generic_name_fr" : "Pâte à tartiner aux noisettes",
                        "generic_name_id" : "",
                        "generic_name_it" : "Nutella",
                        "generic_name_nl" : "",
                        "grades" : { },
                        "id" : "3017620422003",
                        "image_front_small_url" : "https://images.openfoodfacts.org/images/products/301/762/042/2003/front_en.399.200.jpg",
                        "image_front_thumb_url" : "https://images.openfoodfacts.org/images/products/301/762/042/2003/front_en.399.100.jpg",
                        "image_front_url" : "https://images.openfoodfacts.org/images/products/301/762/042/2003/front_en.399.400.jpg",
                        "image_nutrition_small_url" : "https://images.openfoodfacts.org/images/products/301/762/042/2003/nutrition_en.400.200.jpg",
                        "image_nutrition_thumb_url" : "https://images.openfoodfacts.org/images/products/301/762/042/2003/nutrition_en.400.100.jpg",
                        "image_nutrition_url" : "https://images.openfoodfacts.org/images/products/301/762/042/2003/nutrition_en.400.400.jpg",
                        "image_small_url" : "https://images.openfoodfacts.org/images/products/301/762/042/2003/front_en.399.200.jpg",
                        "image_thumb_url" : "https://images.openfoodfacts.org/images/products/301/762/042/2003/front_en.399.100.jpg",
                        "image_url" : "https://images.openfoodfacts.org/images/products/301/762/042/2003/front_en.399.400.jpg",
                        "images" : {
                          "1" : {
                            "sizes" : {
                              "100" : {
                                "h" : 100,
                                "w" : 56
                              },
                              "400" : {
                                "h" : 400,
                                "w" : 225
                              },
                              "full" : {
                                "h" : 2000,
                                "w" : 1125
                              }
                            },
                            "uploaded_t" : "1457680652",
                            "uploader" : "openfoodfacts-contributors"
                          },
                          "2" : {
                            "sizes" : {
                              "100" : {
                                "h" : 100,
                                "w" : 75
                              },
                              "400" : {
                                "h" : 400,
                                "w" : 300
                              },
                              "full" : {
                                "h" : 3264,
                                "w" : 2448
                              }
                            },
                            "uploaded_t" : "1462829284",
                            "uploader" : "openfoodfacts-contributors"
                          },
                          "3" : {
                            "sizes" : {
                              "100" : {
                                "h" : 100,
                                "w" : 56
                              },
                              "400" : {
                                "h" : 400,
                                "w" : 225
                              },
                              "full" : {
                                "h" : 2000,
                                "w" : 1125
                              }
                            },
                            "uploaded_t" : "1468510986",
                            "uploader" : "user3"
                          },
                          "front_en" : {
                            "angle" : "0",
                            "coordinates_image_size" : "full",
                            "geometry" : "0x0-0-0",
                            "imgid" : "1",
                            "normalize" : "false",
                            "rev" : "399",
                            "sizes" : {
                              "100" : {
                                "h" : 100,
                                "w" : 77
                              },
                              "200" : {
                                "h" : 200,
                                "w" : 155
                              },
                              "400" : {
                                "h" : 400,
                                "w" : 310
                              },
                              "full" : {
                                "h" : 1808,
                                "w" : 1400
                              }
                            },
                            "white_magic" : "false",
                            "x1" : "0",
                            "x2" : "0",
                            "y1" : "0",
                            "y2" : "0"
                          },
                          "front_fr" : {
                            "angle" : 0,
                            "coordinates_image_size" : "400",
                            "geometry" : "0x0--5--5",
                            "imgid" : "2",
                            "normalize" : "false",
                            "rev" : "415",
                            "sizes" : {
                              "100" : {
                                "h" : 100,
                                "w" : 77
                              },
                              "200" : {
                                "h" : 200,
                                "w" : 155
                              },
                              "400" : {
                                "h" : 400,
                                "w" : 310
                              },
                              "full" : {
                                "h" : 1808,
                                "w" : 1400
                              }
                            },
                            "white_magic" : "false",
                            "x1" : "-1",
                            "x2" : "-1",
                            "y1" : "-1",
                            "y2" : "-1"
                          },
                          "ingredients_fr" : {
                            "angle" : null,
                            "coordinates_image_size" : "400",
                            "geometry" : "0x0-0-0",
                            "imgid" : "3",
                            "normalize" : null,
                            "rev" : "299",
                            "sizes" : {
                              "100" : {
                                "h" : 16,
                                "w" : 100
                              },
                              "200" : {
                                "h" : 33,
                                "w" : 200
                              },
                              "400" : {
                                "h" : 65,
                                "w" : 400
                              },
                              "full" : {
                                "h" : 334,
                                "w" : 2046
                              }
                            },
                            "white_magic" : null,
                            "x1" : null,
                            "x2" : null,
                            "y1" : null,
                            "y2" : null
                          },
                          "nutrition_en" : {
                            "angle" : "0",
                            "coordinates_image_size" : "full",
                            "geometry" : "0x0-0-0",
                            "imgid" : "3",
                            "normalize" : "false",
                            "rev" : "400",
                            "sizes" : {
                              "100" : {
                                "h" : 100,
                                "w" : 96
                              },
                              "200" : {
                                "h" : 200,
                                "w" : 192
                              },
                              "400" : {
                                "h" : 400,
                                "w" : 383
                              },
                              "full" : {
                                "h" : 572,
                                "w" : 548
                              }
                            },
                            "white_magic" : "false",
                            "x1" : "0",
                            "x2" : "0",
                            "y1" : "0",
                            "y2" : "0"
                          },
                          "packaging_fr" : {
                            "angle" : 0,
                            "coordinates_image_size" : "full",
                            "geometry" : "0x0--1--1",
                            "imgid" : "3",
                            "normalize" : null,
                            "rev" : "420",
                            "sizes" : {
                              "100" : {
                                "h" : 31,
                                "w" : 100
                              },
                              "200" : {
                                "h" : 61,
                                "w" : 200
                              },
                              "400" : {
                                "h" : 122,
                                "w" : 400
                              },
                              "full" : {
                                "h" : 638,
                                "w" : 2084
                              }
                            },
                            "white_magic" : null,
                            "x1" : "-1",
                            "x2" : "-1",
                            "y1" : "-1",
                            "y2" : "-1"
                          }
                        },
                        "informers_tags" : [ "user1", "user2", "user3", "user4" ],
                        "ingredients" : [ {
                          "id" : "en:sugar",
                          "percent_estimate" : 46.5,
                          "percent_max" : 63,
                          "percent_min" : 30,
                          "text" : "sugar",
                          "vegan" : "yes",
                          "vegetarian" : "yes"
                        }, {
                          "from_palm_oil" : "yes",
                          "id" : "en:palm-oil",
                          "percent_estimate" : 25.5,
                          "percent_max" : 38,
                          "percent_min" : 13,
                          "text" : "palm oil",
                          "vegan" : "yes",
                          "vegetarian" : "yes"
                        }, {
                          "id" : "en:hazelnut",
                          "percent" : 13,
                          "percent_estimate" : 13,
                          "percent_max" : 13,
                          "percent_min" : 13,
                          "text" : "hazelnuts",
                          "vegan" : "yes",
                          "vegetarian" : "yes"
                        }, {
                          "id" : "en:skim-milk-powder-8",
                          "percent" : 7,
                          "percent_estimate" : 7,
                          "percent_max" : 7,
                          "percent_min" : 7,
                          "text" : "skim milk powder 8"
                        }, {
                          "id" : "en:lean-cocoa-7",
                          "percent" : 4,
                          "percent_estimate" : 4,
                          "percent_max" : 4,
                          "percent_min" : 4,
                          "text" : "lean cocoa 7"
                        }, {
                          "id" : "en:emulsifier",
                          "ingredients" : [ {
                            "id" : "en:soya-lecithin",
                            "percent_estimate" : 2,
                            "percent_max" : 4,
                            "percent_min" : 0,
                            "text" : "soy lecithins",
                            "vegan" : "yes",
                            "vegetarian" : "yes"
                          } ],
                          "percent_estimate" : 2,
                          "percent_max" : 4,
                          "percent_min" : 0,
                          "text" : "emulsifiers"
                        }, {
                          "id" : "en:vanillin",
                          "percent_estimate" : 2,
                          "percent_max" : 4,
                          "percent_min" : 0,
                          "text" : "vanillin"
                        } ],
                        "ingredients_analysis" : {
                          "en:palm-oil" : [ "en:palm-oil" ],
                          "en:vegan-status-unknown" : [ "en:skim-milk-powder-8", "en:lean-cocoa-7", "en:vanillin" ],
                          "en:vegetarian-status-unknown" : [ "en:skim-milk-powder-8", "en:lean-cocoa-7", "en:vanillin" ]
                        },
                        "ingredients_analysis_tags" : [ "en:palm-oil", "en:vegan-status-unknown", "en:vegetarian-status-unknown" ],
                        "ingredients_from_or_that_may_be_from_palm_oil_n" : 0,
                        "ingredients_from_palm_oil_n" : 0,
                        "ingredients_from_palm_oil_tags" : [ ],
                        "ingredients_hierarchy" : [ "en:sugar", "en:added-sugar", "en:disaccharide", "en:palm-oil", "en:oil-and-fat", "en:vegetable-oil-and-fat", "en:palm-oil-and-fat", "en:hazelnut", "en:nut", "en:tree-nut", "en:skim-milk-powder-8", "en:lean-cocoa-7", "en:emulsifier", "en:vanillin", "en:soya-lecithin", "en:e322", "en:e322i" ],
                        "ingredients_n" : 8,
                        "ingredients_n_tags" : [ "8", "1-10" ],
                        "ingredients_original_tags" : [ "en:sugar", "en:palm-oil", "en:hazelnut", "en:skim-milk-powder-8", "en:lean-cocoa-7", "en:emulsifier", "en:vanillin", "en:soya-lecithin" ],
                        "ingredients_percent_analysis" : 1,
                        "ingredients_tags" : [ "en:sugar", "en:added-sugar", "en:disaccharide", "en:palm-oil", "en:oil-and-fat", "en:vegetable-oil-and-fat", "en:palm-oil-and-fat", "en:hazelnut", "en:nut", "en:tree-nut", "en:skim-milk-powder-8", "en:lean-cocoa-7", "en:emulsifier", "en:vanillin", "en:soya-lecithin", "en:e322", "en:e322i" ],
                        "ingredients_text" : "sugar, palm oil,  hazelnuts 13%, skim milk powder 8, 7%, lean cocoa 7, 4%, emulsifiers: soy lecithins, vanillin",
                        "ingredients_text_en" : "sugar, palm oil,  hazelnuts 13%, skim milk powder 8, 7%, lean cocoa 7, 4%, emulsifiers: soy lecithins, vanillin",
                        "ingredients_text_fr" : "Sucre, huile de palme, _NOISETTES_ 13%, _LAIT_ écrémé en poudre 8,7%, cacao maigre 7,4%, émulsifiants: lécithine [SOJA]; vanilline. Sans gluten",
                        "ingredients_text_with_allergens" : "sugar, palm oil,  <span class=\"allergen\">hazelnuts</span> 13%, skim milk powder 8, 7%, lean cocoa 7, 4%, emulsifiers: soy lecithins, vanillin",
                        "ingredients_text_with_allergens_en" : "sugar, palm oil,  <span class=\"allergen\">hazelnuts</span> 13%, skim milk powder 8, 7%, lean cocoa 7, 4%, emulsifiers: soy lecithins, vanillin",
                        "ingredients_text_with_allergens_fr" : "Sucre, huile de palme, <span class=\"allergen\">NOISETTES</span> 13%, <span class=\"allergen\">LAIT</span> écrémé en poudre 8,7%, cacao maigre 7,4%, émulsifiants: lécithine [<span class=\"allergen\">SOJA</span>]; vanilline. Sans gluten",
                        "ingredients_that_may_be_from_palm_oil_n" : 0,
                        "ingredients_that_may_be_from_palm_oil_tags" : [ ],
                        "ingredients_with_specified_percent_n" : 3,
                        "ingredients_with_specified_percent_sum" : 24,
                        "ingredients_with_unspecified_percent_n" : 4,
                        "ingredients_with_unspecified_percent_sum" : 76,
                        "interface_version_created" : "20120622",
                        "interface_version_modified" : "20150316.jqm2",
                        "known_ingredients_n" : 15,
                        "labels" : "Sans gluten,en:nonorganic",
                        "labels_hierarchy" : [ "en:no-gluten", "en:nonorganic" ],
                        "labels_lc" : "fr",
                        "labels_tags" : [ "en:no-gluten", "en:nonorganic" ],
                        "lang" : "en",
                        "languages" : {
                          "en:arabic" : 2,
                          "en:english" : 4,
                          "en:french" : 10,
                          "en:german" : 3,
                          "en:italian" : 3,
                          "en:spanish" : 7
                        },
                        "languages_codes" : {
                          "en" : 4,
                          "fr" : 10
                        },
                        "languages_hierarchy" : [ "en:english", "en:french" ],
                        "languages_tags" : [ "en:english", "en:french", "en:multilingual" ],
                        "last_check_dates_tags" : [ "2021-07-21", "2021-07", "2021" ],
                        "last_checked_t" : 1626872806,
                        "last_checker" : "user3",
                        "last_edit_dates_tags" : [ "2022-07-29", "2022-07", "2022" ],
                        "last_editor" : "user4",
                        "last_image_dates_tags" : [ "2022-07-29", "2022-07", "2022" ],
                        "last_image_t" : 1659084293,
                        "last_modified_by" : "user4",
                        "last_modified_t" : 1659084329,
                        "lc" : "en",
                        "link" : "",
                        "main_countries_tags" : [ ],
                        "manufacturing_places" : "",
                        "manufacturing_places_tags" : [ ],
                        "max_imgid" : "121",
                        "minerals_prev_tags" : [ ],
                        "minerals_tags" : [ ],
                        "misc_tags" : [ "en:nutrition-no-fiber", "en:nutrition-fruits-vegetables-nuts-estimate-from-ingredients", "en:nutrition-no-fiber-or-fruits-vegetables-nuts", "en:nutriscore-computed", "en:ecoscore-extended-data-computed", "en:ecoscore-extended-data-version-4", "en:ecoscore-missing-data-warning", "en:ecoscore-missing-data-labels", "en:ecoscore-missing-data-origins", "en:ecoscore-missing-data-packagings", "en:ecoscore-computed" ],
                        "no_nutrition_data" : "null",
                        "nova_group" : 4,
                        "nova_groups" : "4",
                        "nova_groups_markers" : {
                          "3" : [ [ "ingredients", "en:sugar" ] ],
                          "4" : [ [ "additives", "en:e322" ], [ "ingredients", "en:emulsifier" ] ]
                        },
                        "nova_groups_tags" : [ "en:4-ultra-processed-food-and-drink-products" ],
                        "nucleotides_prev_tags" : [ ],
                        "nucleotides_tags" : [ ],
                        "nutrient_levels" : {
                          "fat" : "high",
                          "salt" : "low",
                          "saturated-fat" : "high",
                          "sugars" : "high"
                        },
                        "nutrient_levels_tags" : [ "en:fat-in-high-quantity", "en:saturated-fat-in-high-quantity", "en:sugars-in-high-quantity", "en:salt-in-low-quantity" ],
                        "nutriments" : {
                          "alcohol" : 0,
                          "alcohol_100g" : 0,
                          "alcohol_serving" : 0,
                          "alcohol_unit" : "% vol",
                          "alcohol_value" : 0,
                          "carbohydrates" : 57.5,
                          "carbohydrates_100g" : 57.5,
                          "carbohydrates_serving" : 8.62,
                          "carbohydrates_unit" : "g",
                          "carbohydrates_value" : 57.5,
                          "carbon-footprint-from-known-ingredients_product" : 135,
                          "carbon-footprint-from-known-ingredients_serving" : 5.07,
                          "energy" : 2252,
                          "energy-kcal" : 539,
                          "energy-kcal_100g" : 539,
                          "energy-kcal_serving" : 80.8,
                          "energy-kcal_unit" : "kcal",
                          "energy-kcal_value" : 539,
                          "energy-kj" : 2252,
                          "energy-kj_100g" : 2252,
                          "energy-kj_serving" : 338,
                          "energy-kj_unit" : "kJ",
                          "energy-kj_value" : 2252,
                          "energy_100g" : 2252,
                          "energy_serving" : 338,
                          "energy_unit" : "kJ",
                          "energy_value" : 2252,
                          "fat" : 30.9,
                          "fat_100g" : 30.9,
                          "fat_serving" : 4.63,
                          "fat_unit" : "g",
                          "fat_value" : 30.9,
                          "fruits-vegetables-nuts-estimate-from-ingredients_100g" : 13,
                          "fruits-vegetables-nuts-estimate-from-ingredients_serving" : 13,
                          "nova-group" : 4,
                          "nova-group_100g" : 4,
                          "nova-group_serving" : 4,
                          "nutrition-score-fr" : 26,
                          "nutrition-score-fr_100g" : 26,
                          "proteins" : 6.3,
                          "proteins_100g" : 6.3,
                          "proteins_serving" : 0.945,
                          "proteins_unit" : "g",
                          "proteins_value" : 6.3,
                          "salt" : 0.107,
                          "salt_100g" : 0.107,
                          "salt_serving" : 0.016,
                          "salt_unit" : "g",
                          "salt_value" : 0.107,
                          "saturated-fat" : 10.6,
                          "saturated-fat_100g" : 10.6,
                          "saturated-fat_serving" : 1.59,
                          "saturated-fat_unit" : "g",
                          "saturated-fat_value" : 10.6,
                          "sodium" : 0.0428,
                          "sodium_100g" : 0.0428,
                          "sodium_serving" : 0.00642,
                          "sodium_unit" : "g",
                          "sodium_value" : 0.0428,
                          "sugars" : 56.3,
                          "sugars_100g" : 56.3,
                          "sugars_serving" : 8.44,
                          "sugars_unit" : "g",
                          "sugars_value" : 56.3
                        },
                        "nutriscore_data" : {
                          "energy" : 2252,
                          "energy_points" : 6,
                          "energy_value" : 2252,
                          "fiber" : 0,
                          "fiber_points" : 0,
                          "fiber_value" : 0,
                          "fruits_vegetables_nuts_colza_walnut_olive_oils" : 13,
                          "fruits_vegetables_nuts_colza_walnut_olive_oils_points" : 0,
                          "fruits_vegetables_nuts_colza_walnut_olive_oils_value" : 13,
                          "grade" : "e",
                          "is_beverage" : 0,
                          "is_cheese" : 0,
                          "is_fat" : 0,
                          "is_water" : 0,
                          "negative_points" : 26,
                          "positive_points" : 0,
                          "proteins" : 6.3,
                          "proteins_points" : 3,
                          "proteins_value" : 6.3,
                          "saturated_fat" : 10.6,
                          "saturated_fat_points" : 10,
                          "saturated_fat_ratio" : 34.3042071197411,
                          "saturated_fat_ratio_points" : 5,
                          "saturated_fat_ratio_value" : 34.3,
                          "saturated_fat_value" : 10.6,
                          "score" : 26,
                          "sodium" : 42.8,
                          "sodium_points" : 0,
                          "sodium_value" : 42.8,
                          "sugars" : 56.3,
                          "sugars_points" : 10,
                          "sugars_value" : 56.3
                        },
                        "nutriscore_grade" : "e",
                        "nutriscore_score" : 26,
                        "nutriscore_score_opposite" : -26,
                        "nutrition_data" : "on",
                        "nutrition_data_per" : "100g",
                        "nutrition_data_prepared" : "",
                        "nutrition_data_prepared_per" : "100g",
                        "nutrition_grade_fr" : "e",
                        "nutrition_grades" : "e",
                        "nutrition_grades_tags" : [ "e" ],
                        "nutrition_score_beverage" : 0,
                        "nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients" : 1,
                        "nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients_value" : 13,
                        "nutrition_score_warning_no_fiber" : 1,
                        "obsolete" : "",
                        "obsolete_since_date" : "",
                        "origin" : "",
                        "origins" : "",
                        "origins_hierarchy" : [ ],
                        "origins_lc" : "fr",
                        "origins_tags" : [ ],
                        "other_nutritional_substances_tags" : [ ],
                        "owner" : "org-ferrero-france-commerciale",
                        "owners_tags" : "org-ferrero-france-commerciale",
                        "packaging" : "PP 5 Ummi PLASTIQUE / PLASTIEK PAP 27 WWW PAPIER / PAPIER CIPAP 82 PANNEAU DE FIBRE COMPOSITES/ COMPOSIET VEZELPLAAT GL 70 VERRE / GLAS",
                        "packaging_hierarchy" : [ "fr:PP 5 Ummi PLASTIQUE / PLASTIEK PAP 27 WWW PAPIER / PAPIER CIPAP 82 PANNEAU DE FIBRE COMPOSITES/ COMPOSIET VEZELPLAAT GL 70 VERRE / GLAS" ],
                        "packaging_lc" : "fr",
                        "packaging_tags" : [ "fr:pp-5-ummi-plastique-plastiek-pap-27-www-papier-papier-cipap-82-panneau-de-fibre-composites-composiet-vezelplaat-gl-70-verre-glas" ],
                        "packaging_text" : "",
                        "packaging_text_ar" : "",
                        "packaging_text_de" : "",
                        "packaging_text_en" : "",
                        "packaging_text_es" : "Pot en verre, couvercle en plastique.",
                        "packaging_text_fr" : "1 couvercle plastique blanc opaque PP à jeter,\r\n1 plaque en carton PAP 21 à recycler,\r\n1 opercule en carton C/PAP 82 à recycler,\r\n1 pot en verre à recycler",
                        "packaging_text_id" : "",
                        "packaging_text_it" : "",
                        "packaging_text_nl" : "",
                        "packagings" : [ {
                          "material" : "en:clear-glass"
                        } ],
                        "photographers_tags" : [ "user1", "user2", "user3", "user4" ],
                        "pnns_groups_1" : "Sugary snacks",
                        "pnns_groups_1_tags" : [ "sugary-snacks", "known" ],
                        "pnns_groups_2" : "Sweets",
                        "pnns_groups_2_tags" : [ "sweets", "known" ],
                        "popularity_key" : 20999992556,
                        "popularity_tags" : [ "top-10-scans-2021", "top-50-scans-2021", "top-100-scans-2021", "top-500-scans-2021", "top-1000-scans-2021", "top-5000-scans-2021", "top-10000-scans-2021", "top-50000-scans-2021", "top-100000-scans-2021", "top-10-fr-scans-2021", "top-50-fr-scans-2021", "top-100-fr-scans-2021", "top-500-fr-scans-2021", "top-1000-fr-scans-2021", "top-5000-fr-scans-2021", "top-10000-fr-scans-2021", "top-50000-fr-scans-2021", "top-100000-fr-scans-2021", "top-country-fr-scans-2021", "at-least-5-fr-scans-2021", "at-least-10-fr-scans-2021" ],
                        "product_name" : "Nutella",
                        "product_name_ar" : "نوتيلا",
                        "product_name_de" : "Nutella",
                        "product_name_en" : "Nutella",
                        "product_name_es" : "Nutella",
                        "product_name_fr" : "Pâte à tartiner Nutella noisettes et cacao - 400g",
                        "product_name_id" : "",
                        "product_name_it" : "Nutella",
                        "product_name_nl" : "",
                        "product_quantity" : "400",
                        "purchase_places" : "F - 77480 Mousseaux les Bray  France",
                        "purchase_places_tags" : [ "f-77480-mousseaux-les-bray-france" ],
                        "quantity" : "400g",
                        "removed_countries_tags" : [ ],
                        "rev" : 421,
                        "scans_n" : 3713,
                        "scores" : { },
                        "selected_images" : {
                          "front" : {
                            "display" : {
                              "en" : "https://images.openfoodfacts.org/images/products/301/762/042/2003/front_en.399.400.jpg",
                              "fr" : "https://images.openfoodfacts.org/images/products/301/762/042/2003/front_fr.415.400.jpg"
                            },
                            "small" : {
                              "en" : "https://images.openfoodfacts.org/images/products/301/762/042/2003/front_en.399.200.jpg",
                              "fr" : "https://images.openfoodfacts.org/images/products/301/762/042/2003/front_fr.415.200.jpg"
                            },
                            "thumb" : {
                              "en" : "https://images.openfoodfacts.org/images/products/301/762/042/2003/front_en.399.100.jpg",
                              "fr" : "https://images.openfoodfacts.org/images/products/301/762/042/2003/front_fr.415.100.jpg"
                            }
                          },
                          "ingredients" : {
                            "display" : {
                              "fr" : "https://images.openfoodfacts.org/images/products/301/762/042/2003/ingredients_fr.299.400.jpg"
                            },
                            "small" : {
                              "fr" : "https://images.openfoodfacts.org/images/products/301/762/042/2003/ingredients_fr.299.200.jpg"
                            },
                            "thumb" : {
                              "fr" : "https://images.openfoodfacts.org/images/products/301/762/042/2003/ingredients_fr.299.100.jpg"
                            }
                          },
                          "nutrition" : {
                            "display" : {
                              "en" : "https://images.openfoodfacts.org/images/products/301/762/042/2003/nutrition_en.400.400.jpg"
                            },
                            "small" : {
                              "en" : "https://images.openfoodfacts.org/images/products/301/762/042/2003/nutrition_en.400.200.jpg"
                            },
                            "thumb" : {
                              "en" : "https://images.openfoodfacts.org/images/products/301/762/042/2003/nutrition_en.400.100.jpg"
                            }
                          },
                          "packaging" : {
                            "display" : {
                              "fr" : "https://images.openfoodfacts.org/images/products/301/762/042/2003/packaging_fr.420.400.jpg"
                            },
                            "small" : {
                              "fr" : "https://images.openfoodfacts.org/images/products/301/762/042/2003/packaging_fr.420.200.jpg"
                            },
                            "thumb" : {
                              "fr" : "https://images.openfoodfacts.org/images/products/301/762/042/2003/packaging_fr.420.100.jpg"
                            }
                          }
                        },
                        "serving_quantity" : "15",
                        "serving_size" : "15g",
                        "sortkey" : 1610877517,
                        "sources" : [ {
                          "fields" : [ "product_name_de", "product_name_it", "brands", "countries" ],
                          "id" : "openfood-ch",
                          "images" : [ ],
                          "import_t" : 1548767279,
                          "manufacturer" : "0",
                          "name" : "FoodRepo",
                          "source_licence" : "Creative Commons Attribution 4.0 International License",
                          "source_licence_url" : "https://creativecommons.org/licenses/by/4.0/",
                          "url" : "https://www.foodrepo.org/ch/products/19413"
                        }, {
                          "fields" : [ "packaging", "ingredients_text_fr" ],
                          "id" : "ferrero",
                          "images" : [ ],
                          "import_t" : 1552318840,
                          "manufacturer" : "1",
                          "name" : "Ferrero",
                          "url" : "https://www.ferrero.fr"
                        } ],
                        "sources_fields" : {
                          "org-gs1" : {
                            "gln" : "3010176200101",
                            "gpcCategoryCode" : "10000187",
                            "gpcCategoryName" : "Pâtes à Tartiner Sucrées (Longue Conservation)",
                            "isAllergenRelevantDataProvided" : "true",
                            "lastChangeDateTime" : "2022-07-13T16:01:41+02:00",
                            "partyName" : "FERRERO FRANCE COMMERCIALE",
                            "productionVariantDescription" : "2014",
                            "publicationDateTime" : "2022-07-13T16:01:41+02:00"
                          }
                        },
                        "states" : "en:to-be-completed, en:nutrition-facts-completed, en:ingredients-completed, en:expiration-date-completed, en:packaging-code-to-be-completed, en:characteristics-to-be-completed, en:origins-to-be-completed, en:categories-completed, en:brands-completed, en:packaging-completed, en:quantity-completed, en:product-name-completed, en:photos-to-be-validated, en:packaging-photo-to-be-selected, en:nutrition-photo-selected, en:ingredients-photo-to-be-selected, en:front-photo-selected, en:photos-uploaded",
                        "states_hierarchy" : [ "en:to-be-completed", "en:nutrition-facts-completed", "en:ingredients-completed", "en:expiration-date-completed", "en:packaging-code-to-be-completed", "en:characteristics-to-be-completed", "en:origins-to-be-completed", "en:categories-completed", "en:brands-completed", "en:packaging-completed", "en:quantity-completed", "en:product-name-completed", "en:photos-to-be-validated", "en:packaging-photo-to-be-selected", "en:nutrition-photo-selected", "en:ingredients-photo-to-be-selected", "en:front-photo-selected", "en:photos-uploaded" ],
                        "states_tags" : [ "en:to-be-completed", "en:nutrition-facts-completed", "en:ingredients-completed", "en:expiration-date-completed", "en:packaging-code-to-be-completed", "en:characteristics-to-be-completed", "en:origins-to-be-completed", "en:categories-completed", "en:brands-completed", "en:packaging-completed", "en:quantity-completed", "en:product-name-completed", "en:photos-to-be-validated", "en:packaging-photo-to-be-selected", "en:nutrition-photo-selected", "en:ingredients-photo-to-be-selected", "en:front-photo-selected", "en:photos-uploaded" ],
                        "stores" : "Bi1  Magasins U  Carrefour  Franprix  Auchan  Casino  Intermarché,carrefour.fr",
                        "stores_tags" : [ "bi1-magasins-u-carrefour-franprix-auchan-casino-intermarche", "carrefour-fr" ],
                        "teams" : "pain-au-chocolat,shark-attack,stakano,chocolatine,la-robe-est-bleue,vegan,m,b,c,vegancheck",
                        "teams_tags" : [ "pain-au-chocolat", "shark-attack", "stakano", "chocolatine", "la-robe-est-bleue", "vegan", "m", "b", "c", "vegancheck" ],
                        "traces" : "",
                        "traces_from_ingredients" : "",
                        "traces_from_user" : "(fr) ",
                        "traces_hierarchy" : [ ],
                        "traces_lc" : "fr",
                        "traces_tags" : [ ],
                        "unique_scans_n" : 2544,
                        "unknown_ingredients_n" : 2,
                        "unknown_nutrients_tags" : [ ],
                        "update_key" : "ing20220322",
                        "vitamins_prev_tags" : [ ],
                        "vitamins_tags" : [ ]
                      },
                      "status" : 1,
                      "status_verbose" : "product found"
                    }
                  }
                },
                "schema" : {
                  "oneOf" : [ {
                    "components" : {
                      "schemas" : {
                        "Product" : {
                          "type" : "object",
                          "properties" : {
                            "product" : {
                              "$ref" : "../schemas/product.yaml"
                            }
                          }
                        },
                        "GetProductByBarcodeBase" : {
                          "type" : "object",
                          "allOf" : [ {
                            "$ref" : "./get_product_by_barcode_base.yaml"
                          }, {
                            "$ref" : "#/components/schemas/Product"
                          } ]
                        }
                      }
                    }
                  }, {
                    "allOf" : [ {
                      "properties" : {
                        "code" : {
                          "description" : "Barcode of the product\n(can be EAN-13 or internal codes for some food stores).\nFor products without a barcode, Open Food Facts assigns a \nnumber starting with the 200 reserved prefix.\n"
                        },
                        "status" : { },
                        "status_verbose" : { }
                      }
                    }, {
                      "properties" : {
                        "product" : {
                          "description" : "Knowledge panels for a product\n",
                          "properties" : {
                            "knowledge_panels" : {
                              "description" : "The panels object is a dictionary of individual panel objects.\nEach key of the dictionary is the id of the panel, and the value is the panel object.\n\nApps typically display a number of root panels with known panel ids (e.g. health_card and environment_card). Panels can reference other panels and display them as sub-panels.",
                              "properties" : {
                                "additionalProperties" : {
                                  "description" : "Each panel contains an optional title and an optional array of elements.",
                                  "properties" : {
                                    "type" : {
                                      "description" : "Type of the panel. If set to \"card\", the panel and its sub-panels should be displayed in a card. If set to \"inline\", the panel should have its content always displayed."
                                    },
                                    "expanded" : {
                                      "description" : "If true, the panel is to be displayed already expanded. If false, only the title should be displayed, and the user should be able to click or tap it to open the panel and display the elements."
                                    },
                                    "expand_for" : {
                                      "description" : "If set to \"large\", the content of the panel should be expanded on large screens, but it should still be possible to unexpand it."
                                    },
                                    "title_element" : {
                                      "description" : "The title of a panel.",
                                      "properties" : {
                                        "title" : { },
                                        "grade" : {
                                          "description" : "Indicates that the panel corresponds to a A to E grade such as the Nutri-Score of the Eco-Score.",
                                          "enum" : [ "a", "b", "c", "d", "e", "unknown" ]
                                        },
                                        "icon_url" : { },
                                        "icon_color_from_evaluation" : { },
                                        "icon_size" : {
                                          "description" : "If set to \"small\", the icon should be displayed at a small size.\n"
                                        },
                                        "type" : {
                                          "description" : "Used to indicate a special type for the title, such as \"grade\" for Nutri-Score and Eco-Score."
                                        }
                                      },
                                      "title" : "title_element",
                                      "x-stoplight" : {
                                        "id" : "lox0wvl9bdgy2"
                                      }
                                    },
                                    "elements" : {
                                      "description" : "An ordered list of elements to display in the content of the panel.",
                                      "items" : {
                                        "description" : "Each element object contains one specific element object such as a text element or an image element.\n",
                                        "properties" : {
                                          "type" : {
                                            "description" : "The type of the included element object.\nThe type also indicates which field contains the included element object.\ne.g. if the type is \"text\", the included element object will be in the \"text_element\" field.\n\nNote that in the future, new type of element may be added,\nso your code should ignore unrecognized types, and unknown properties.\n\nTODO: add Map type\n",
                                            "enum" : [ "text", "image", "action", "panel", "panel_group", "table" ]
                                          },
                                          "text_element" : {
                                            "description" : "A text in simple HTML format to display.\n\nFor some specific texts that correspond to a product field (e.g. a product name, the ingredients list of a product),the edit_field_* fields are used to indicate how to edit the field value.",
                                            "properties" : {
                                              "type" : {
                                                "description" : "the type of text, might influence the way you display it.\n",
                                                "enum" : [ "summary", "warning", "notes" ]
                                              },
                                              "html" : {
                                                "description" : "Text to display in HTML format."
                                              },
                                              "language" : {
                                                "description" : "Language of the text. The name of the language is returned in the language requested when making the API call. e.g. if the text is in Polish, and the requested language is French, the language field will contain \"Polonais\" (French for \"Polish\"). Only set for specific fields such as the list of ingredients of a product."
                                              },
                                              "lc" : {
                                                "description" : "2 letter language code for the text. Only set for specific fields such as the list of ingredients of a product."
                                              },
                                              "edit_field_id" : {
                                                "description" : "id of the field used to edit this text in the product edit API."
                                              },
                                              "edit_field_type" : {
                                                "description" : "Type of the product field."
                                              },
                                              "edit_field_value" : {
                                                "description" : "Current value of the product field. This may differ from the html field which can contain extra formating."
                                              },
                                              "source_url" : {
                                                "description" : "Link to the source"
                                              },
                                              "source_text" : {
                                                "description" : "name of the source"
                                              },
                                              "source_lc" : {
                                                "description" : "Source locale name"
                                              },
                                              "source_language" : {
                                                "description" : "Human readable source locale name"
                                              }
                                            },
                                            "title" : "text_element",
                                            "x-stoplight" : {
                                              "id" : "vdwxlt73qnqfa"
                                            }
                                          },
                                          "image_element" : {
                                            "properties" : {
                                              "url" : {
                                                "description" : "full URL of the image"
                                              },
                                              "width" : {
                                                "description" : "Width of the image.\n\nThis is just a suggestion coming from the server, \nthe client may choose to use its own dimensions for the image.\n"
                                              },
                                              "height" : {
                                                "description" : "Height of the image.\n\nThis is just a suggestion coming from the server,\nthe client may choose to use its own dimensions for the image.\n"
                                              },
                                              "alt_text" : {
                                                "description" : "Alt Text of the image."
                                              }
                                            },
                                            "title" : "image_element",
                                            "x-stoplight" : {
                                              "id" : "k4v4kwt489q3j"
                                            }
                                          },
                                          "action_element" : { },
                                          "panel_element" : {
                                            "description" : "Panels can include other panels as sub-panels using the panel_element.",
                                            "properties" : {
                                              "panel_id" : {
                                                "description" : "The id of the panel to include. The id is the key of the panel in the panels object returned in the knowledge_panels field."
                                              }
                                            },
                                            "title" : "panel_element",
                                            "x-stoplight" : {
                                              "id" : "ymx41elz4yrnj"
                                            }
                                          },
                                          "panel_group_element" : {
                                            "description" : "The panel group element is used to display an optional title followed by a number of sub-panels.",
                                            "properties" : {
                                              "title" : { },
                                              "panel_ids" : {
                                                "description" : "The ids of the panels to include. The ids are the keys of the panels in the panels object returned in the knowledge_panels field.",
                                                "items" : { }
                                              }
                                            },
                                            "title" : "panel_group_element",
                                            "x-stoplight" : {
                                              "id" : "b7emlfrgiuue2"
                                            }
                                          },
                                          "table_element" : {
                                            "description" : "Element to display a table.",
                                            "properties" : {
                                              "id" : {
                                                "description" : "An id for the table."
                                              },
                                              "title" : {
                                                "description" : "Title of the column.\n"
                                              },
                                              "rows" : { },
                                              "columns" : {
                                                "items" : {
                                                  "properties" : {
                                                    "type" : { },
                                                    "text" : { },
                                                    "text_for_small_screens" : { },
                                                    "style" : { },
                                                    "column_group_id" : { },
                                                    "shown_by_default" : { }
                                                  },
                                                  "title" : "table_column"
                                                }
                                              }
                                            },
                                            "title" : "table_element"
                                          }
                                        },
                                        "required" : [ "type" ],
                                        "title" : "element",
                                        "x-stoplight" : {
                                          "id" : "e2ybdrtmx0tme"
                                        }
                                      }
                                    },
                                    "level" : {
                                      "description" : "a message level, as levels we use in log.\nIt might help theming the panel visualy\n"
                                    },
                                    "size" : {
                                      "description" : "size is either empty (normal display) \nor small to indicate a panel that should have a smaller font size\n",
                                      "enum" : [ "small" ]
                                    },
                                    "topics" : {
                                      "items" : { }
                                    }
                                  },
                                  "title" : "panel"
                                }
                              },
                              "readOnly" : true,
                              "title" : "panels"
                            }
                          }
                        }
                      }
                    } ]
                  } ]
                }
              }
            },
            "description" : "OK"
          },
          "429" : {
            "content" : {
              "text/plain" : {
                "schema" : { }
              }
            },
            "description" : "Too Many Requests"
          }
        },
        "security" : [ ],
        "summary" : "Get information for a specific product by barcode",
        "tags" : [ "Read Requests" ]
      }
    },
    "/cgi/product_image_upload.pl" : {
      "post" : {
        "description" : "Photos are source and proof of data.\nThe first photo uploaded for a product is\nauto-selected as the product’s “front” photo.'\n",
        "operationId" : "get-cgi-product_image_upload.pl",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "properties" : {
                  "code" : {
                    "description" : "Barcode of the product\n"
                  },
                  "imagefield" : {
                    "description" : "Indicates the type of the image and the corresponding language. It should\nbe in the format `{IMAGE_TYPE}_{LANG}` format, where `IMAGE_TYPE` is one\nof `front|ingredients|nutrition|packaging|other` and `LANG` is the 2\nletter language code. Use `other` if you don't want the image to be\nselected. Note that the first image of a product is always selected as front\npicture.\n"
                  },
                  "imgupload_front_en" : {
                    "description" : "This field must contain image binary content.\nThe format and extension must be one of gif|jpeg|jpg|png|heic.            \nThis field is dynamic and dependent on the value of imagefield in the\nrequest body. It wil be imgupload_the value of the imagefield stated\nearlier. For example, if `imagefield=front_en`, the name of this field\nshould be `imageupload_front_en`.\n",
                    "format" : "binary"
                  }
                },
                "required" : [ "code", "imagefield", "imgupload_front_en" ]
              }
            }
          },
          "description" : ""
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "files" : {
                      "items" : {
                        "properties" : {
                          "url" : { },
                          "filename" : { },
                          "name" : { },
                          "thumbnailUrl" : { },
                          "code" : { }
                        }
                      }
                    },
                    "image" : {
                      "properties" : {
                        "thumb_url" : { },
                        "imgid" : { },
                        "crop_url" : { }
                      }
                    },
                    "imgid" : { },
                    "status" : { },
                    "imagefield" : { },
                    "code" : { }
                  }
                }
              }
            },
            "description" : "OK"
          },
          "429" : {
            "content" : {
              "text/plain" : {
                "schema" : { }
              }
            },
            "description" : "Too Many Requests"
          }
        },
        "security" : [ ],
        "summary" : "Add a Photo to an Existing Product",
        "tags" : [ "Write Requests" ]
      }
    },
    "/cgi/ingredients.pl" : {
      "get" : {
        "description" : "Open Food Facts uses optical character recognition (OCR) to retrieve nutritional data and other information from the product labels.\n",
        "operationId" : "get-cgi-ingredients.pl",
        "parameters" : [ {
          "$ref" : "#/components/parameters/id"
        }, {
          "$ref" : "#/components/parameters/code"
        }, {
          "$ref" : "#/components/parameters/process_image"
        }, {
          "$ref" : "#/components/parameters/ocr_engine"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "status" : { }
                  }
                }
              }
            },
            "description" : "OK"
          },
          "429" : {
            "content" : {
              "text/plain" : {
                "schema" : { }
              }
            },
            "description" : "Too Many Requests"
          }
        },
        "security" : [ ],
        "summary" : "Performing OCR on a Product",
        "tags" : [ "Read Requests" ]
      }
    },
    "/cgi/product_image_crop.pl" : {
      "get" : {
        "description" : "Although we recommend rotating photos manually and uploading a new version of the image,\nthe OFF API allows you to make api calls to automate this process.\nYou can rotate existing photos by setting the angle to 90º, 180º, or 270º clockwise.\n",
        "operationId" : "get-cgi-product_image_crop.pl",
        "parameters" : [ {
          "$ref" : "#/components/parameters/code"
        }, {
          "$ref" : "#/components/parameters/id"
        }, {
          "$ref" : "#/components/parameters/imgid"
        }, {
          "$ref" : "#/components/parameters/angle"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "status" : { },
                    "imagefield" : { },
                    "image" : {
                      "properties" : {
                        "display_url" : { }
                      }
                    }
                  }
                }
              }
            },
            "description" : "OK"
          },
          "429" : {
            "content" : {
              "text/plain" : {
                "schema" : { }
              }
            },
            "description" : "Too Many Requests"
          }
        },
        "security" : [ ],
        "summary" : "Rotate A Photo",
        "tags" : [ "Write Requests" ]
      },
      "post" : {
        "description" : "Cropping is only relevant for editing existing products.\nYou cannot crop an image the first time you upload it to the system.\n",
        "operationId" : "post-cgi-product_image_crop.pl",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "description" : "Select a photo and optionally crop/rotate it.\nThe origin of the cropping coordinates is the top-left corner.\nNote that rotation is applied *before* cropping, so the cropping bounding box\nis relative to the rotated image.\n",
                "properties" : {
                  "code" : {
                    "description" : "Barcode of the product."
                  },
                  "imgid" : {
                    "description" : "identifier of the image to select, it should be a number"
                  },
                  "id" : {
                    "description" : "identifier of the selected image field, should be in the format\n`{IMAGE_TYPE}_{LANG}` format, where `IMAGE_TYPE` is one of\n`front|ingredients|nutrition|packaging|other` and `LANG` is the 2 letter\nlanguage code.\nNote that if you select an image for the main language of the product (ex:\n`ingredients_it` if `it` is the main language), this image will be\ndisplayed on Product Opener for all languages (ex: on\n`https://fr.openfoodfacts.org`, unless `ingredients_fr` exists).\n"
                  },
                  "x1" : {
                    "description" : "X origin coordinate of the crop, it must be lower than x2"
                  },
                  "y1" : {
                    "description" : "Y origin coordinate of the crop, it must be lower than y2"
                  },
                  "x2" : {
                    "description" : "X end coordinate of the crop, it must be higher than x1"
                  },
                  "y2" : {
                    "description" : "Y end coordinate of the crop, it must be higher than y1"
                  },
                  "angle" : {
                    "description" : "angle of the rotation to apply on the selected image.\npassing `90` as value rotate the image 90 degrees counter-clockwise.\n"
                  },
                  "normalize" : {
                    "description" : "whether the selected image should be normalized using ImageMagick",
                    "enum" : [ "true", "false" ]
                  },
                  "white_magic" : {
                    "default" : "false",
                    "description" : "whether the source image should be white magiced (background removal) using\nImageMagick.\n",
                    "enum" : [ "true", "false" ]
                  }
                },
                "required" : [ "code", "id", "imgid" ]
              }
            }
          },
          "required" : true
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : { }
                }
              }
            },
            "description" : "OK"
          },
          "429" : {
            "content" : {
              "text/plain" : {
                "schema" : { }
              }
            },
            "description" : "Too Many Requests"
          }
        },
        "security" : [ ],
        "summary" : "Crop A Photo",
        "tags" : [ "Write Requests" ]
      }
    },
    "/cgi/product_image_unselect.pl" : {
      "post" : {
        "operationId" : "post-cgi-product_image_unselect.pl",
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "properties" : {
                  "code" : {
                    "description" : "code of the product"
                  },
                  "id" : {
                    "description" : "image field (image id) of the photo to unselect"
                  }
                }
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "status" : {
                      "description" : "status of the unselect operation"
                    },
                    "status_code" : {
                      "description" : "status code of the operation"
                    },
                    "imagefield" : {
                      "description" : "image field that was unselected"
                    }
                  }
                }
              }
            },
            "description" : "OK"
          },
          "429" : {
            "content" : {
              "text/plain" : {
                "schema" : { }
              }
            },
            "description" : "Too Many Requests"
          }
        },
        "security" : [ ],
        "summary" : "Unselect A Photo"
      }
    },
    "/cgi/product_jqm2.pl" : {
      "post" : {
        "description" : "If the barcode exists then you will be editing the existing product,\nHowever if it doesn''t you will be creating a new product with that unique barcode,\nand adding properties to the product.\n",
        "operationId" : "post-cgi-product_jqm2.pl",
        "parameters" : [ ],
        "requestBody" : {
          "content" : {
            "multipart/form-data" : {
              "schema" : {
                "description" : "You can provide most of the properties defined in the product schema.\n",
                "properties" : {
                  "code" : {
                    "description" : "The barcode of the product to be added or edited"
                  },
                  "user_id" : {
                    "description" : "A valid username."
                  },
                  "password" : {
                    "description" : "A valid corresponding password."
                  },
                  "comment" : {
                    "description" : "A comment for the change. It will be shown in product changes history."
                  },
                  "brands" : {
                    "description" : "The brands of the product (comma separated list of values).",
                    "items" : { }
                  },
                  "labels" : {
                    "description" : "The labels of the product (comma separated list of values).",
                    "items" : { }
                  },
                  "categories" : {
                    "description" : "The categories of the product (comma separated list of values).",
                    "items" : { }
                  },
                  "packaging" : {
                    "description" : "Packaging type, format, material.\nThe [v3 API documentation](https://openfoodfacts.github.io/openfoodfacts-server/api/ref-v3/#operation/post-api-v3-product-barcode)\nhas a more structured data for `packaging`.\n"
                  }
                },
                "required" : [ "code", "password", "user_id" ]
              }
            }
          }
        },
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "status_verbose" : { },
                    "status" : { }
                  }
                }
              }
            },
            "description" : "OK"
          },
          "429" : {
            "content" : {
              "text/plain" : {
                "schema" : { }
              }
            },
            "description" : "Too Many Requests"
          }
        },
        "security" : [ ],
        "summary" : "Add or Edit A Product",
        "tags" : [ "Write Requests" ]
      }
    },
    "/api/v2/search" : {
      "get" : {
        "description" : "Search request allows you to get products that match your search criteria.\n\nIt allows you create many custom APIs for your use case.\n\nIf the search query parameter has 2 possible values, they are seperated by a comma(,).\nWhen filtering via a parameter that has different language codes like `fr`, `de` or `en`, specify the language code in the parameter name e.g `categories_tags_en`\n\n**Important:** search API v2 does not support full text request (search_term),\nyou have to use [search API v1](https://wiki.openfoodfacts.org/API/Read/Search) for that.\nUpcoming [search-a-licious project](https://github.com/openfoodfacts/search-a-licious) will fix that.\n\n### Limiting results\n\nYou can limit the size of returned objects thanks to the `fields` object (see below).\n\neg: `fields=code,product_name,brands,attribute_groups``\n\nPlease use it as much as possible to avoid overloading the servers.\n\nThe search use pagination, see `page` and `page_size` parameters.\n\n**Beware:** the `page_count` data in item is a bit counter intuitive…, read the description.\n\n### Conditions on tags\n\nAll `_tags`` parameters accepts either:\n\n* a single value\n* or a comma-separated list of values (doing a AND)\n* or a pipe separated list of values (doing a OR)\n\nYou can exclude terms by using a \"-\" prefix.\n\nFor taxonomized entries, you might either use the tag id (recommended),\nor a known synonym (without language prefix)\n\n* `labels_tags=en:organic,en:fair-trade` find items that are fair-trade AND organic\n* `labels_tags=en:organic|en:fair-trade` find items that are fair-trade OR organic\n* `labels_tags=en:organic,en:-fair-trade` find items that are organic BUT NOT fair-trade\n\n\n### Conditions on nutriments\n\nTo get a list of nutrients\n\nYou can either query on nutrient per 100g (`_100g` suffix)\nor per serving (`serving` suffix).\n\nYou can also add `_prepared_`\nto get the nutrients in the prepared product instead of as sold.\n\nYou can add a comparison operator and value to the parameter name\nto get products with nutrient above or bellow a value.\nIf you use a parameter value it exactly match it.\n\n* `energy-kj_100g<200` products where energy in kj for 100g is less than 200kj\n* `sugars_serving>10` products where sugar per serving is greater than 10g\n* `saturated-fat_100g=1` products where saturated fat per 100g is exactly 10g\n* `salt_prepared_serving<0.1` products where salt per serving for prepared product is less than 0.1g\n\n### More references\n\nSee also [wiki page](https://wiki.openfoodfacts.org/Open_Food_Facts_Search_API_Version_2)\n",
        "operationId" : "get-search",
        "parameters" : [ {
          "description" : "The additives_tags in english of product(s) you are searching for.\nThe [OFF App](https://world.openfoodfacts.org/additives) has a list of possible values for `additives`.\n\nYou can use multiple values by using a comma separated list.\nYou can add a \"-\" before values to avoid matching a tag.\n",
          "explode" : false,
          "in" : "query",
          "name" : "additives_tags",
          "required" : false,
          "schema" : { },
          "style" : "form"
        }, {
          "description" : "The allergens_tags in english of product(s) you are searching for.\nThe [OFF App](https://world.openfoodfacts.org/allergens) has a list of possible values for `allergens`.\n\nYou can use multiple values by using a comma separated list.\nYou can add a \"-\" before values to avoid matching a tag.\n",
          "explode" : false,
          "in" : "query",
          "name" : "allergens_tags",
          "required" : false,
          "schema" : { },
          "style" : "form"
        }, {
          "description" : "The brands_tags of product(s) you are searching for.\nThe [OFF App](https://world.openfoodfacts.org/brands) has a list of possible values for `brands`.\n\nYou can use multiple values by using a comma separated list.\nYou can add a \"-\" before values to avoid matching a tag.\n",
          "explode" : false,
          "in" : "query",
          "name" : "brands_tags",
          "required" : false,
          "schema" : { },
          "style" : "form"
        }, {
          "description" : "The category of product(s) you are searching for.\nThe [OFF App](https://world.openfoodfacts.org/categories) has a list of possible values for `categories`.\n\nYou can use multiple values by using a comma separated list.\nYou can add a \"-\" before values to avoid matching a tag.\n",
          "explode" : false,
          "in" : "query",
          "name" : "categories_tags",
          "required" : false,
          "schema" : { },
          "style" : "form"
        }, {
          "description" : "The countries_tags_en of product(s) you are searching for.\nThe [OFF App](https://world.openfoodfacts.org/countries) shows a list of possible values for `countries`.\n\nYou can use multiple values by using a comma separated list.\nYou can add a \"-\" before values to avoid matching a tag.\n",
          "explode" : false,
          "in" : "query",
          "name" : "countries_tags_en",
          "required" : false,
          "schema" : { },
          "style" : "form"
        }, {
          "description" : "The emb_codes_tags of product(s) you are searching for.\n\nYou can use multiple values by using a comma separated list.\nYou can add a \"-\" before values to avoid matching a tag.\n",
          "explode" : false,
          "in" : "query",
          "name" : "emb_codes_tags",
          "required" : false,
          "schema" : { },
          "style" : "form"
        }, {
          "description" : "The labels_tags in english of product(s) you are searching for.\nThe [OFF App](https://world.openfoodfacts.org/labels) has a list of possible values for `labels`.\n\nYou can use multiple values by using a comma separated list.\nYou can add a \"-\" before values to avoid matching a tag.\n",
          "explode" : false,
          "in" : "query",
          "name" : "labels_tags",
          "required" : false,
          "schema" : { },
          "style" : "form"
        }, {
          "description" : "The manufacturing_places_tags of product(s) you are searching for.\nThe [OFF App](https://world.openfoodfacts.org/manufacturing-places) has a list of possible values for `manufacturing-places`.\n\nYou can use multiple values by using a comma separated list.\nYou can add a \"-\" before values to avoid matching a tag.\n",
          "explode" : false,
          "in" : "query",
          "name" : "manufacturing_places_tags",
          "required" : false,
          "schema" : { },
          "style" : "form"
        }, {
          "description" : "The nutrition_grades_tags of product(s) you are searching for.\nThe [OFF App](https://world.openfoodfacts.org/nutrition-grades) has a list of possible values for `nutrition-grades`.\n\nYou can use multiple values by using a comma separated list.\nYou can add a \"-\" before values to avoid matching a tag.\n",
          "explode" : false,
          "in" : "query",
          "name" : "nutrition_grades_tags",
          "required" : false,
          "schema" : { },
          "style" : "form"
        }, {
          "description" : "The origins_tags of product(s) you are searching for.\n\nYou can use multiple values by using a comma separated list.\nYou can add a \"-\" before values to avoid matching a tag.\n",
          "explode" : false,
          "in" : "query",
          "name" : "origins_tags",
          "required" : false,
          "schema" : { },
          "style" : "form"
        }, {
          "description" : "The packaging_tag in german of product(s) you are searching for.\nThe [OFF App](https://world.openfoodfacts.org/packaging) has a list of possible values for `packaging`.\n\nYou can use multiple values by using a comma separated list.\nYou can add a \"-\" before values to avoid matching a tag.\n",
          "explode" : false,
          "in" : "query",
          "name" : "packaging_tags_de",
          "required" : false,
          "schema" : { },
          "style" : "form"
        }, {
          "description" : "The purchase_places_tags of product(s) you are searching for.\n\nYou can use multiple values by using a comma separated list.\nYou can add a \"-\" before values to avoid matching a tag.\n",
          "explode" : false,
          "in" : "query",
          "name" : "purchase_places_tags",
          "required" : false,
          "schema" : { },
          "style" : "form"
        }, {
          "description" : "The states_tags in english of product(s) you are searching for.\nThe [OFF App](https://world.openfoodfacts.org/states) has a list of possible values for `states`.\n\nYou can use multiple values by using a comma separated list.\nYou can add a \"-\" before values to avoid matching a tag.\n",
          "explode" : false,
          "in" : "query",
          "name" : "states_tags",
          "required" : false,
          "schema" : { },
          "style" : "form"
        }, {
          "description" : "The stores_tags of product(s) you are searching for.\n\nYou can use multiple values by using a comma separated list.\nYou can add a \"-\" before values to avoid matching a tag.\n",
          "explode" : false,
          "in" : "query",
          "name" : "stores_tags",
          "required" : false,
          "schema" : { },
          "style" : "form"
        }, {
          "description" : "The traces_tags of product(s) you are searching for.\nThe [OFF App](https://world.openfoodfacts.org/traces) shows a list of possible values for `traces`.\n\nYou can use multiple values by using a comma separated list.\nYou can add a \"-\" before values to avoid matching a tag.\n",
          "explode" : false,
          "in" : "query",
          "name" : "traces_tags",
          "required" : false,
          "schema" : { },
          "style" : "form"
        }, {
          "description" : "You can add a language code to a specific tag to query it in a specific language\n",
          "explode" : false,
          "in" : "query",
          "name" : "<tag_name>_tags_<language_code>",
          "required" : false,
          "schema" : { },
          "style" : "form"
        }, {
          "description" : "Search on nutrient lower than a value\n",
          "explode" : true,
          "in" : "query",
          "name" : "<nutrient>_lt_<value>",
          "required" : false,
          "schema" : { },
          "style" : "form"
        }, {
          "description" : "Search on nutrient greater than a value\n",
          "explode" : true,
          "in" : "query",
          "name" : "<nutrient>_gt_<value>",
          "required" : false,
          "schema" : { },
          "style" : "form"
        }, {
          "description" : "Search on nutrient for an exact quantity\n",
          "explode" : true,
          "in" : "query",
          "name" : "<nutrient>_eq_<value>",
          "required" : false,
          "schema" : { },
          "style" : "form"
        }, {
          "$ref" : "#/components/parameters/fields"
        }, {
          "$ref" : "#/components/parameters/sort_by"
        }, {
          "$ref" : "#/components/parameters/page"
        }, {
          "$ref" : "#/components/parameters/page_size"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "properties" : {
                    "count" : {
                      "description" : "Total number of products found\n"
                    },
                    "page" : {
                      "description" : "Page number of returned results.\n\nYou can get a different page, by using the `page` query parameter.\n"
                    },
                    "page_count" : {
                      "description" : "Number of products in this page.\n\nThis will differ from page_size only on the last page.\n"
                    },
                    "page_size" : {
                      "description" : "Requested number of products per pages\n\nTo get the number of pages, divide count by page_size\n(eg. `Math.floor( count / page_size) + 1 `)\n"
                    },
                    "products" : {
                      "description" : "The products matching the query corresponding to current page\n",
                      "items" : {
                        "allOf" : [ {
                          "description" : "Base product data\n",
                          "properties" : {
                            "abbreviated_product_name" : {
                              "description" : "Abbreviated name in requested language"
                            },
                            "code" : {
                              "description" : "barcode of the product (can be EAN-13 or internal codes for some food stores),\nfor products without a barcode,\nOpen Food Facts assigns a number starting with the 200 reserved prefix\n"
                            },
                            "codes_tags" : {
                              "items" : {
                                "description" : "A value which is the type of barcode \"code-13\" or \"code-8\"\nand\nA series of mask for the barcode\nIt helps retrieve barcodes starting by\n"
                              }
                            },
                            "generic_name" : {
                              "description" : "Legal name of the product as regulated\nby the European authorities.\n"
                            },
                            "id" : {
                              "description" : "internal identifier for the product, usually set to the value of `code`,\nexcept on the producers platform where it is prefixed by the owner\n"
                            },
                            "lc" : {
                              "description" : "Main language of the product.\nThis is a duplicate of `lang` property (for historical reasons).\n"
                            },
                            "lang" : {
                              "description" : "Main language of the product.\n\nThis should be the main language of product packaging (if one is predominant).\n\nMain language is also used to decide which ingredients list to parse.\n"
                            },
                            "nova_group" : {
                              "description" : "Nova group as an integer from 1 to 4. See https://world.openfoodfacts.org/nova"
                            },
                            "nova_groups" : { },
                            "obsolete" : { },
                            "obsolete_since_date" : {
                              "description" : "A date at which the product was declared obsolete.\nThis means it's not produced any more.\n"
                            },
                            "product_name" : {
                              "description" : "The name of the product\n"
                            },
                            "product_name_en" : {
                              "description" : "The name of the product can also\nbe in many other languages like\nproduct_name_fr (for French).\n"
                            },
                            "product_quantity" : {
                              "description" : "The size in g or ml for the whole product.\nIt's a normalized version of the quantity field.\n"
                            },
                            "product_quantity_unit" : {
                              "description" : "The unit (either g or ml) for the correponding product_quantity.\n"
                            },
                            "quantity" : {
                              "description" : "Quantity and Unit.\n"
                            }
                          }
                        }, {
                          "description" : "Miscellaneous but important fields of a product\n",
                          "properties" : {
                            "additives_n" : {
                              "description" : "Number of food additives.\n"
                            },
                            "checked" : { },
                            "complete" : { },
                            "completeness" : { },
                            "ecoscore_grade" : {
                              "description" : "See also: `ecoscore_tags`\n"
                            },
                            "ecoscore_score" : {
                              "description" : "See also: `ecoscore_tags`\n"
                            },
                            "food_groups" : { },
                            "food_groups_tags" : {
                              "items" : { }
                            },
                            "nutrient_levels" : {
                              "description" : "Traffic light indicators on main nutrients levels\n",
                              "properties" : {
                                "fat" : {
                                  "enum" : [ "low", "moderate", "high" ]
                                },
                                "salt" : {
                                  "enum" : [ "low", "moderate", "high" ]
                                },
                                "saturated-fat" : {
                                  "enum" : [ "low", "moderate", "high" ]
                                },
                                "sugars" : {
                                  "enum" : [ "low", "moderate", "high" ]
                                }
                              }
                            },
                            "packaging_text" : {
                              "description" : "Recycling instructions as raw text, e.g. Plastic\nbottle to recycle, Plastic cap to recycle.\nThis will get automatically parsed and\nwill be used to compute the Eco-Score.\nYou can either request it (if it exists) or\nsend it in a specific language.\n"
                            },
                            "packagings" : {
                              "description" : "The packagings object is an array of individual packaging component objects.\n\nThe Packaging data document explains how packaging data is structured in Open Food Facts: https://openfoodfacts.github.io/openfoodfacts-server/dev/explain-packaging-data/\n\nThe shape, material and recycling properties of each packaging component are linked to entries in the packaging_shapes, packaging_materials and packaging_recycling taxonomies:\n\nhttps://world.openfoodfacts.org/data/taxonomies/packaging_shapes.json\nhttps://world.openfoodfacts.org/data/taxonomies/packaging_materials.json\nhttps://world.openfoodfacts.org/data/taxonomies/packaging_recycling.json\n\nIf the tags_lc field is set, the properties will include a lc_name field with the translation in the requested language.",
                              "items" : {
                                "description" : "Each packaging component has different properties to specify how many there are, its shape, material etc.\n\nThe shape, material and recycling properties are mapped to one entry in the packaging_shapes, packaging_materials and packaging_recycling taxonomies, and the value of the property is the canonical name of the taxonomy entry (e.g. en:bottle).\n\nThey may contain values that could not yet get matched to their respective taxonomy, in which case they will contain a free text value prefixed with the language code of this text value (e.g. \"fr:Bouteille sphérique\" might have been entered by a French user to indicate it is a spherical bottle).",
                                "properties" : {
                                  "number_of_units" : {
                                    "description" : "umber of units of this packaging component contained in the product (e.g. 6 for a pack of 6 bottles)"
                                  },
                                  "shape" : {
                                    "description" : "The shape property is canonicalized using the packaging_shapes taxonomy.",
                                    "properties" : {
                                      "id" : {
                                        "description" : "Canonical id of the entry in the taxonomy. If the value cannot be mapped to a taxonomy entry, the value will be the name of the entry in its original language prefixed by the language 2 letter code and a colon."
                                      },
                                      "lc_name" : {
                                        "description" : "Name of the entry in the language requested in the tags_lc field of the request. This field is returned only of tags_lc is specified. If the translation is not available, or if the entry does not exist in the taxonomy, the value will be the name of the entry in its original language prefixed by the language 2 letter code and a colon."
                                      }
                                    },
                                    "title" : "Packaging component shape",
                                    "x-stoplight" : {
                                      "id" : "xrj8agza3dwgf"
                                    }
                                  },
                                  "material" : {
                                    "description" : "The material property is canonicalized using the packaging_materials taxonomy.",
                                    "properties" : {
                                      "id" : {
                                        "description" : "Canonical id of the entry in the taxonomy. If the value cannot be mapped to a taxonomy entry, the value will be the name of the entry in its original language prefixed by the language 2 letter code and a colon."
                                      },
                                      "lc_name" : {
                                        "description" : "Name of the entry in the language requested in the tags_lc field of the request. This field is returned only of tags_lc is specified. If the translation is not available, or if the entry does not exist in the taxonomy, the value will be the name of the entry in its original language prefixed by the language 2 letter code and a colon."
                                      }
                                    },
                                    "title" : "Packaging component material",
                                    "x-stoplight" : {
                                      "id" : "n6umazgqmwrd5"
                                    }
                                  },
                                  "recycling" : {
                                    "description" : "The recycling property is canonicalized using the packaging_recycling taxonomy.",
                                    "properties" : {
                                      "id" : {
                                        "description" : "Canonical id of the entry in the taxonomy. If the value cannot be mapped to a taxonomy entry, the value will be the name of the entry in its original language prefixed by the language 2 letter code and a colon."
                                      },
                                      "lc_name" : {
                                        "description" : "Name of the entry in the language requested in the tags_lc field of the request. This field is returned only of tags_lc is specified. If the translation is not available, or if the entry does not exist in the taxonomy, the value will be the name of the entry in its original language prefixed by the language 2 letter code and a colon."
                                      }
                                    },
                                    "title" : "Packaging component recycling instruction",
                                    "x-stoplight" : {
                                      "id" : "376tk8e2cmyh2"
                                    }
                                  },
                                  "quantity_per_unit" : {
                                    "description" : "Quantity (weight or volume) of food product contained in the packaging component. (e.g. 75cl for a wine bottle)"
                                  },
                                  "quantity_per_unit_value" : {
                                    "description" : "Value parsed from the quantity field."
                                  },
                                  "quantity_per_unit_unit" : {
                                    "description" : "Unit parsed and normalized from the quantity field."
                                  },
                                  "weight_specified" : {
                                    "description" : "Weight (as specified by the manufacturer) of one unit of the empty packaging component (in grams). (e.g. for a 6 pack of 1.5l water bottles, it might be 30, the weight in grams of 1 empty water bottle without its cap which is a different packaging component)."
                                  },
                                  "weight_measured" : {
                                    "description" : "Weight (as measured by one or more users) of one unit of the empty packaging component (in grams). (e.g. for a 6 pack of 1.5l water bottles, it might be 30, the weight in grams of 1 empty water bottle without its cap which is a different packaging component)."
                                  },
                                  "weight_estimated" : {
                                    "description" : "Weight (as estimated from similar products) of one unit of the empty packaging component (in grams). (e.g. for a 6 pack of 1.5l water bottles, it might be 30, the weight in grams of 1 empty water bottle without its cap which is a different packaging component)."
                                  },
                                  "weight" : {
                                    "description" : "Weight of one unit of the empty packaging component."
                                  },
                                  "weight_source_id" : {
                                    "description" : "Indicates which field was used to populate the \"weight\" field. Either \"specified\", \"measured\", or \"estimated\""
                                  }
                                },
                                "title" : "Packaging component (READ)"
                              },
                              "readOnly" : true,
                              "title" : "Packagings (READ)"
                            },
                            "packagings_complete" : {
                              "description" : "Indicate if the packagings array contains all the packaging parts of the product. This field can be set by users when they enter or verify packaging data. Possible values are 0 or 1.",
                              "maximum" : 1,
                              "minimum" : 0,
                              "title" : "packagings_complete"
                            },
                            "pnns_groups_1" : {
                              "description" : "Category of food according to [French Nutrition and Health Program](https://fr.wikipedia.org/wiki/Programme_national_nutrition_sant%C3%A9)\n"
                            },
                            "pnns_groups_1_tags" : {
                              "items" : { }
                            },
                            "pnns_groups_2" : {
                              "description" : "Sub Category of food according to [French Nutrition and Health Program](https://fr.wikipedia.org/wiki/Programme_national_nutrition_sant%C3%A9)\n"
                            },
                            "pnns_groups_2_tags" : {
                              "items" : { }
                            },
                            "popularity_key" : { },
                            "popularity_tags" : {
                              "items" : { }
                            },
                            "scans_n" : { },
                            "unique_scans_n" : { },
                            "serving_quantity" : {
                              "description" : "Normalized version of serving_size.\nNote that this is NOT the number of servings by product.\n<small>(in perl, see `normalize_serving_size`)</small>\n"
                            },
                            "serving_quantity_unit" : {
                              "description" : "The unit (either g or ml) for the correponding serving_quantity.\n"
                            },
                            "serving_size" : {
                              "description" : "Serving size text (generally in g or ml).\nWe expect a quantity + unit but the user is free to input any string.\n"
                            }
                          },
                          "title" : "product_misc"
                        }, {
                          "description" : "Data about a product which is represented as tags\n",
                          "properties" : {
                            "brands" : {
                              "description" : "List of brands (not taxonomized)"
                            },
                            "brands_tags" : {
                              "items" : {
                                "description" : "List of brands (tags, not taxonomized)"
                              }
                            },
                            "categories" : { },
                            "categories_hierarchy" : {
                              "items" : { }
                            },
                            "categories_lc" : {
                              "description" : "Categories language code"
                            },
                            "categories_tags" : {
                              "items" : { }
                            },
                            "checkers_tags" : {
                              "items" : {
                                "description" : "List of checkers (users who checked the product) tags"
                              }
                            },
                            "cities" : { },
                            "cities_tags" : {
                              "items" : { }
                            },
                            "correctors_tags" : {
                              "items" : { }
                            },
                            "countries" : {
                              "description" : "List of countries where the product is sold.\n"
                            },
                            "countries_hierarchy" : {
                              "items" : { }
                            },
                            "countries_lc" : {
                              "description" : "Countries language code"
                            },
                            "countries_tags" : {
                              "items" : { }
                            },
                            "ecoscore_tags" : {
                              "description" : "All ecoscore of a product.\nMost of the time it's only one value,\nbut it might eventually be more for products composed of sub-products.\nSee also: `ecoscore_score`, `ecoscore_grade`.\n",
                              "items" : { }
                            },
                            "emb_codes" : {
                              "description" : "Packager code. EMB is the French system of traceability codes for packager.\n"
                            },
                            "emb_codes_orig" : { },
                            "emb_codes_tags" : {
                              "items" : { }
                            },
                            "labels" : { },
                            "labels_hierarchy" : {
                              "items" : { }
                            },
                            "labels_lc" : { },
                            "labels_tags" : {
                              "items" : { }
                            },
                            "entry_dates_tags" : {
                              "description" : "The data as a series of tag: `yyyy-mm-dd`, `yyyy-mm`, `yyyy`\n",
                              "items" : { }
                            },
                            "manufacturing_places" : {
                              "description" : "Places where the product was manufactured or transformed.\n"
                            },
                            "manufacturing_places_tags" : {
                              "items" : { }
                            },
                            "nova_groups_tags" : {
                              "items" : { }
                            },
                            "nutrient_levels_tags" : {
                              "items" : { }
                            }
                          }
                        }, {
                          "description" : "Information about Images of a product.\n\nImages ensure the reliability of Open Food Facts data.\nIt provides a primary source and proof of all the structured data.\nYou may therefore want to display it along the structured information.\n\nSee also tutorials about images:\n* [Getting images](https://openfoodfacts.github.io/openfoodfacts-server/api/how-to-download-images/)\n* [Uploading images](https://openfoodfacts.github.io/openfoodfacts-server/api/tutorial-uploading-photo-to-a-product/)\n",
                          "properties" : {
                            "image_front_small_url" : { },
                            "image_front_thumb_url" : { },
                            "image_front_url" : { },
                            "image_nutrition_small_url" : { },
                            "image_nutrition_thumb_url" : { },
                            "image_nutrition_url" : { },
                            "image_small_url" : { },
                            "image_thumb_url" : { },
                            "image_url" : { },
                            "images" : {
                              "description" : "This contains properties for all images contained on the product.\n",
                              "properties" : {
                                "1" : {
                                  "description" : "This object represent an image that was uploaded to a product.\n\"imgid\" is an integer which is a sequential number unique to each picture.\n",
                                  "properties" : {
                                    "sizes" : {
                                      "description" : "The available image sizes for the product (both reduced and full). \nThe reduced images are the ones with numbers as the key( 100, 200 etc) \nwhile the full images have `full` as the key.\n",
                                      "properties" : {
                                        "full" : {
                                          "description" : "properties of fullsize image\n**TODO** explain how to compute name\n",
                                          "properties" : {
                                            "h" : {
                                              "description" : "The height of the reduced/full image in pixels.\n"
                                            },
                                            "w" : {
                                              "description" : "The width of the reduced/full image in pixels."
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "uploaded_t" : {
                                      "description" : "The time the image was uploaded (as unix timestamp).\n"
                                    },
                                    "uploader" : {
                                      "description" : "The contributor that uploaded the image.\n"
                                    }
                                  },
                                  "title" : "image"
                                },
                                "front" : {
                                  "description" : "property of an image (or part thereof) selected for a particular role and a particular language.\n",
                                  "properties" : {
                                    "angle" : {
                                      "description" : "The angle of the image rotation (if it was rotated)."
                                    },
                                    "coordinates_image_size" : { },
                                    "geometry" : { },
                                    "imgid" : {
                                      "description" : "The id of the original/source image that was selected to edit(rotate, normalize etc) to produce this new image."
                                    },
                                    "normalize" : {
                                      "description" : "Normalize colors."
                                    },
                                    "rev" : { },
                                    "sizes" : {
                                      "description" : "The available image sizes for the product (both reduced and full). \nThe reduced images are the ones with numbers as the key( 100, 200 etc)\nwhile the full images have `full` as the key.\n",
                                      "properties" : {
                                        "100" : {
                                          "properties" : {
                                            "h" : {
                                              "description" : "The height of the reduced/full image in pixels.\n"
                                            },
                                            "w" : {
                                              "description" : "The width of the reduced/full image in pixels."
                                            }
                                          }
                                        },
                                        "200" : {
                                          "properties" : {
                                            "h" : {
                                              "description" : "The height of the reduced/full image in pixels.\n"
                                            },
                                            "w" : {
                                              "description" : "The width of the reduced/full image in pixels."
                                            }
                                          }
                                        },
                                        "400" : {
                                          "properties" : {
                                            "h" : {
                                              "description" : "The height of the reduced/full image in pixels.\n"
                                            },
                                            "w" : {
                                              "description" : "The width of the reduced/full image in pixels."
                                            }
                                          }
                                        },
                                        "full" : {
                                          "properties" : {
                                            "h" : {
                                              "description" : "The height of the reduced/full image in pixels.\n"
                                            },
                                            "w" : {
                                              "description" : "The width of the reduced/full image in pixels."
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "white_magic" : {
                                      "description" : "Photo on white background : Try to remove the background.\n"
                                    },
                                    "x1" : { },
                                    "x2" : { },
                                    "y1" : { },
                                    "y2" : { }
                                  }
                                }
                              },
                              "title" : "product_images"
                            },
                            "last_image_dates_tags" : {
                              "items" : { }
                            },
                            "last_image_t" : { },
                            "selected_images" : {
                              "properties" : {
                                "front" : {
                                  "description" : "URLs of thumbnails image of image of type `image_type`",
                                  "properties" : {
                                    "display" : {
                                      "description" : "Thumbnail urls of product image (front) adapted to display on product page\n"
                                    },
                                    "small" : {
                                      "description" : "Thumbnail urls of product image (front) adapted to display on product list page\n"
                                    },
                                    "thumb" : {
                                      "description" : "Thumbnail urls of product image (front) in smallest format\n"
                                    }
                                  }
                                }
                              },
                              "title" : "product_selected_images"
                            }
                          },
                          "title" : "product_images"
                        }, {
                          "description" : "Fields related to Eco-Score for a product.\n\nSee also: `ecoscore_score`, `ecoscore_grade` and `ecoscore_tags`.\n",
                          "properties" : {
                            "ecoscore_data" : {
                              "description" : "An object about a lot of details about data needed for Eco-Score computation \nand complementary data of interest.\n",
                              "properties" : {
                                "adjustments" : {
                                  "properties" : {
                                    "origins_of_ingredients" : {
                                      "properties" : {
                                        "aggregated_origins" : {
                                          "items" : {
                                            "properties" : {
                                              "origin" : { },
                                              "percent" : { }
                                            },
                                            "title" : "adjustments_origin_of_ingredient"
                                          }
                                        },
                                        "epi_score" : { },
                                        "epi_value" : { },
                                        "origins_from_origins_field" : {
                                          "items" : { }
                                        },
                                        "transportation_scores" : { },
                                        "transportation_values" : { },
                                        "values" : { },
                                        "warning" : { }
                                      }
                                    },
                                    "packaging" : {
                                      "properties" : {
                                        "non_recyclable_and_non_biodegradable_materials" : { },
                                        "packagings" : {
                                          "items" : {
                                            "properties" : {
                                              "ecoscore_material_score" : { },
                                              "ecoscore_shape_ratio" : { },
                                              "material" : { },
                                              "shape" : { }
                                            },
                                            "title" : "adjustments_packaging_item"
                                          }
                                        },
                                        "score" : { },
                                        "value" : { },
                                        "warning" : { }
                                      }
                                    },
                                    "production_system" : {
                                      "properties" : {
                                        "labels" : {
                                          "items" : { }
                                        },
                                        "value" : { },
                                        "warning" : { }
                                      }
                                    },
                                    "threatened_species" : {
                                      "properties" : {
                                        "ingredient" : { },
                                        "value" : { }
                                      }
                                    }
                                  }
                                },
                                "agribalyse" : {
                                  "properties" : {
                                    "agribalyse_food_code" : { },
                                    "co2_agriculture" : { },
                                    "co2_consumption" : { },
                                    "co2_distribution" : { },
                                    "co2_packaging" : { },
                                    "co2_processing" : { },
                                    "co2_total" : { },
                                    "co2_transportation" : { },
                                    "code" : { },
                                    "dqr" : { },
                                    "ef_agriculture" : { },
                                    "ef_consumption" : { },
                                    "ef_distribution" : { },
                                    "ef_packaging" : { },
                                    "ef_processing" : { },
                                    "ef_total" : { },
                                    "ef_transportation" : { },
                                    "is_beverage" : { },
                                    "name_en" : {
                                      "description" : "This can be returned in many other languages\nlike name_fr (for french).\n"
                                    },
                                    "score" : { },
                                    "version" : { }
                                  }
                                },
                                "grade" : { },
                                "grades" : { },
                                "missing" : {
                                  "properties" : {
                                    "labels" : { },
                                    "origins" : { },
                                    "packagings" : { }
                                  }
                                },
                                "missing_data_warning" : { },
                                "previous_data" : {
                                  "properties" : {
                                    "grade" : { },
                                    "score" : { },
                                    "agribalyse" : {
                                      "properties" : {
                                        "agribalyse_food_code" : { },
                                        "co2_agriculture" : { },
                                        "co2_consumption" : { },
                                        "co2_distribution" : { },
                                        "co2_packaging" : { },
                                        "co2_processing" : { },
                                        "co2_total" : { },
                                        "co2_transportation" : { },
                                        "code" : { },
                                        "dqr" : { },
                                        "ef_agriculture" : { },
                                        "ef_consumption" : { },
                                        "ef_distribution" : { },
                                        "ef_packaging" : { },
                                        "ef_processing" : { },
                                        "ef_total" : { },
                                        "ef_transportation" : { },
                                        "is_beverage" : { },
                                        "name_en" : {
                                          "description" : "This can be returned in many other languages\nlike name_fr (for french).\n"
                                        },
                                        "score" : { },
                                        "version" : { }
                                      }
                                    }
                                  }
                                },
                                "score" : { },
                                "scores" : { },
                                "status" : { }
                              },
                              "title" : "ecoscore_data"
                            },
                            "ecoscore_extended_data_version" : { },
                            "environment_impact_level" : { },
                            "environment_impact_level_tags" : {
                              "items" : { }
                            }
                          },
                          "title" : "product_ecoscore"
                        }, {
                          "description" : "Fields about ingredients of a product",
                          "properties" : {
                            "additives_tags" : {
                              "items" : { }
                            },
                            "allergens" : {
                              "description" : "comma separated list of allergens"
                            },
                            "allergens_lc" : {
                              "description" : "language in which `allergens` where input"
                            },
                            "allergens_hierarchy" : {
                              "items" : { }
                            },
                            "allergens_tags" : {
                              "items" : { }
                            },
                            "ingredients" : {
                              "description" : "This structure gives the different ingredients and some information about them,\nlike estimate on their quantity.\n",
                              "items" : {
                                "properties" : {
                                  "id" : { },
                                  "ingredients" : {
                                    "description" : "Sub ingredients composing this ingredients.\n",
                                    "items" : {
                                      "properties" : {
                                        "id" : { },
                                        "ingredients" : {
                                          "description" : "Sub ingredients composing this ingredients.\n",
                                          "items" : {
                                            "$ref" : "#/components/schemas/Ingredients/items"
                                          }
                                        },
                                        "percent" : { },
                                        "percent_estimate" : { },
                                        "percent_max" : { },
                                        "percent_min" : { },
                                        "text" : { },
                                        "vegan" : { },
                                        "vegetarian" : { }
                                      },
                                      "title" : "ingredient"
                                    }
                                  },
                                  "percent" : { },
                                  "percent_estimate" : { },
                                  "percent_max" : { },
                                  "percent_min" : { },
                                  "text" : { },
                                  "vegan" : { },
                                  "vegetarian" : { }
                                },
                                "title" : "ingredient"
                              }
                            },
                            "ingredients_analysis" : {
                              "properties" : {
                                "en:palm-oil" : {
                                  "items" : { }
                                },
                                "en:vegan-status-unknown" : {
                                  "items" : { }
                                },
                                "en:vegetarian-status-unknown" : {
                                  "items" : { }
                                }
                              }
                            },
                            "ingredients_analysis_tags" : {
                              "items" : { }
                            },
                            "ingredients_from_or_that_may_be_from_palm_oil_n" : { },
                            "ingredients_from_palm_oil_n" : { },
                            "ingredients_from_palm_oil_tags" : {
                              "items" : { }
                            },
                            "ingredients_hierarchy" : {
                              "items" : { }
                            },
                            "ingredients_n" : { },
                            "ingredients_n_tags" : {
                              "items" : { }
                            },
                            "ingredients_original_tags" : {
                              "items" : { }
                            },
                            "ingredients_percent_analysis" : { },
                            "ingredients_sweeteners_n" : {
                              "description" : "Number of sweeteners additives in the ingredients. Undefined if ingredients are not specified.\n"
                            },
                            "ingredients_non_nutritive_sweeteners_n" : {
                              "description" : "Number of non-nutritive sweeteners additives (as specified in the Nutri-Score formula) in the ingredients. Undefined if ingredients are not specified.\n"
                            },
                            "ingredients_tags" : {
                              "items" : { }
                            },
                            "ingredients_lc" : {
                              "description" : "Language that was used to parse the ingredient list. If `ingredients_text` is available\nfor the product main language (`lang`), `ingredients_lc=lang`, otherwise we look at\n`ingredients_text` fields for other languages and set `ingredients_lc` to the first\nnon-empty `ingredient_text`. \n"
                            },
                            "ingredients_text" : {
                              "description" : "Raw list of ingredients. This will get automatically\nparsed and get used to compute the Eco-Score or find allergens, etc..\n\nIt's a copy of ingredients_text in the main language of the product (see `lang` proprety).\n"
                            },
                            "ingredients_text_with_allergens" : {
                              "description" : "Same text as `ingredients_text` but where allergens have HTML elements around them to identify them\n"
                            },
                            "ingredients_that_may_be_from_palm_oil_n" : { },
                            "ingredients_that_may_be_from_palm_oil_tags" : {
                              "items" : { }
                            },
                            "ingredients_with_specified_percent_n" : { },
                            "ingredients_with_specified_percent_sum" : { },
                            "ingredients_with_unspecified_percent_n" : { },
                            "ingredients_with_unspecified_percent_sum" : { },
                            "known_ingredients_n" : { },
                            "origins" : {
                              "description" : "Origins of ingredients\n"
                            },
                            "origins_hierarchy" : {
                              "items" : { }
                            },
                            "origins_lc" : { },
                            "origins_tags" : {
                              "items" : { }
                            },
                            "traces" : {
                              "description" : "List of substances that might cause allergies\nthat are present in trace amounts in the product\n(this does not include the ingredients, as they\nare not only present in trace amounts).\nIt is taxonomized with the allergens taxonomy.\n"
                            },
                            "traces_hierarchy" : {
                              "items" : { }
                            },
                            "traces_lc" : { },
                            "traces_tags" : {
                              "items" : { }
                            },
                            "unknown_ingredients_n" : { }
                          },
                          "title" : "product_ingredients"
                        }, {
                          "description" : "Nutrition fields of a product\n\nMost of these properties are read-only.\n\nSee [how to add nutrition data](https://openfoodfacts.github.io/openfoodfacts-server/api/ref-cheatsheet/#add-nutrition-facts-values-units-and-base)\n",
                          "properties" : {
                            "no_nutrition_data" : {
                              "description" : "When a product does not have nutrition data displayed on the\npackaging, the user can check the field \"Nutrition facts are\nnot specified on the product\".\nBy doing so, the no_nutrition_data field takes the value \"on\".\nThis case is frequent (thousands of products).\n"
                            },
                            "nutrition_data_per" : {
                              "description" : "The nutrition data on the package can be per serving or per 100g.\n\nThis is essential to understand if `<nutrient>_value` and `<nutrient>`\nvalues in `nutriments` applies for a serving or for 100g.\n\n**IMPORTANT:**\nWhen writing products,\nthis setting applies to all existing nutrients values for the product,\nnot only the nutrient values sent in the write request.\nSo it should not be changed unless all nutrients values are provided\nwith values that match the nutrition_data_per field.\n",
                              "enum" : [ "serving", "100g" ]
                            },
                            "nutrition_data_prepared_per" : {
                              "description" : "The nutrition data for prepared product on the package (if any) can be per serving or per 100g.\n\nThis is essential to understand if `<nutrient>_prepared_value` and `<nutrient>_prepared`\nvalues in `nutriments` applies for a serving or for 100g.\n\nSee also important note on `nutrition_data_per`.\n",
                              "enum" : [ "serving", "100g" ]
                            },
                            "nutriments" : {
                              "description" : "All known nutrients for the product.\n\nNote that each nutrients are declined with a variety of suffixes like `_100g`, `_serving`,\nsee patternProperties below.\n\nA specific `_unit` is the unit used to measure the nutrient.\n\nBeware that some properties are to be interpreted based upon `nutrition_data_per` value.\n\nAlso for products that have a nutrition table for prepared product\n(eg. the nutrition facts for a bowl of milk with cocoa powder),\na `_prepared` suffix is added (before other suffixes).\n\nYou can get all possible nutrients from the\n[nutrients taxonomy](https://static.openfoodfacts.org/data/taxonomies/nutrients.json)\n\n**FIXME** add more nutrients with description.\n",
                              "properties" : {
                                "alcohol" : {
                                  "description" : "Quantity of alcohol\n\n(per 100g or per serving) in a standard unit (g or ml)\n"
                                },
                                "carbohydrates" : { },
                                "energy" : {
                                  "description" : "It is the same as `energy-kj` if we have it, or computed from `energy-kcal` otherwise\n\n(per 100g or per serving) in kj\n"
                                },
                                "energy_value" : {
                                  "description" : "energy_value will be equal to energy-kj_value if we have it or to energy-kcal_value otherwise\n"
                                },
                                "energy_unit" : {
                                  "description" : "Equal to energy-kj_unit if we have it or to energy-kcal_unit otherwise\n",
                                  "enum" : [ "kcal", "kj" ]
                                },
                                "energy-kcal" : {
                                  "description" : "energy in kcal, if it is specified\n\n(per 100g or per serving) in a standard unit (g or ml)\n"
                                },
                                "energy-kj" : {
                                  "description" : "energy in kj, if it is specified\n\n(per 100g or per serving) in a standard unit (g or ml)\n"
                                },
                                "fat" : { },
                                "fruits-vegetables-legumes-estimate-from-ingredients" : {
                                  "description" : "An estimate, from the ingredients list of the percentage of fruits, vegetable and legumes.\nThis is an important information for Nutri-Score (2023 version) computation.\n"
                                },
                                "fruits-vegetables-nuts-estimate-from-ingredients" : {
                                  "description" : "An estimate, from the ingredients list of the percentage of fruits, vegetable and nuts.\nThis is an important information for Nutri-Score (2021 version) computation.\n"
                                },
                                "nova-group" : { },
                                "nutrition-score-fr" : {
                                  "description" : "Experimental nutrition score derived from\nthe UK FSA score and adapted for the French market\n(formula defined by the team of Professor Hercberg).\n"
                                },
                                "proteins" : { },
                                "salt" : { },
                                "saturated-fat" : { },
                                "sodium" : { },
                                "sugars" : { },
                                "carbon-footprint-from-known-ingredients_product" : { },
                                "carbon-footprint-from-known-ingredients_serving" : { },
                                "erythritol" : {
                                  "description" : "erythritol is a polyol which is not providing any energy.\nAs such, it needs not be taken into account when computing\nthe energy of a product. Eryhtritol is now displayed on\nnutrition facts sheet of some products, mainly in the USA.\nThis value is entered either by contributors, either by\nimports.\n"
                                }
                              }
                            },
                            "nutriscore_data" : {
                              "description" : "Detail of data the Nutri-Score was computed upon.\n\n**Note**: this might not be stable, don't rely too much on this, or, at least, tell us !\n\n**TODO** document each property\n",
                              "properties" : {
                                "energy" : { },
                                "energy_points" : { },
                                "energy_value" : { },
                                "fiber" : { },
                                "fiber_points" : { },
                                "fiber_value" : { },
                                "fruits_vegetables_nuts_colza_walnut_olive_oils" : { },
                                "fruits_vegetables_nuts_colza_walnut_olive_oils_points" : { },
                                "fruits_vegetables_nuts_colza_walnut_olive_oils_value" : { },
                                "grade" : { },
                                "is_beverage" : { },
                                "is_cheese" : { },
                                "is_fat" : { },
                                "is_water" : { },
                                "negative_points" : { },
                                "positive_points" : { },
                                "proteins" : { },
                                "proteins_points" : { },
                                "proteins_value" : { },
                                "saturated_fat" : { },
                                "saturated_fat_points" : { },
                                "saturated_fat_ratio" : { },
                                "saturated_fat_ratio_points" : { },
                                "saturated_fat_ratio_value" : { },
                                "saturated_fat_value" : { },
                                "score" : { },
                                "sodium" : { },
                                "sodium_points" : { },
                                "sodium_value" : { },
                                "sugars" : { },
                                "sugars_points" : { },
                                "sugars_value" : { }
                              }
                            },
                            "nutriscore_grade" : {
                              "description" : "Nutri-Score for the product as a letter.\n\nSee https://world.openfoodfacts.org/nutriscore.\n",
                              "enum" : [ "a", "b", "c", "d", "e" ]
                            },
                            "nutriscore_score" : {
                              "description" : "Nutri-Score for the product as an integer (see also `nutriscore_grade`).\n"
                            },
                            "nutriscore_score_opposite" : { },
                            "nutrition_grade_fr" : {
                              "description" : "Nutrition grade (‘a’ to ‘e’),\nhttps://world.openfoodfacts.org/nutriscore.\n"
                            },
                            "nutrition_grades" : {
                              "description" : "Nutrition grades as a comma separated list.\n\nSome products with multiple components might have multiple Nutri-Score\n"
                            },
                            "nutrition_grades_tags" : {
                              "items" : { }
                            },
                            "nutrition_score_beverage" : { },
                            "nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients" : { },
                            "nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients_value" : { },
                            "nutrition_score_warning_no_fiber" : { },
                            "other_nutritional_substances_tags" : {
                              "items" : { }
                            },
                            "unknown_nutrients_tags" : {
                              "items" : { }
                            },
                            "vitamins_tags" : {
                              "items" : { }
                            }
                          },
                          "title" : "product_nutrition"
                        }, {
                          "description" : "This is data that is linked to products data quality\n",
                          "properties" : {
                            "data_quality_bugs_tags" : {
                              "items" : { }
                            },
                            "data_quality_errors_tags" : {
                              "items" : { }
                            },
                            "data_quality_info_tags" : {
                              "items" : { }
                            },
                            "data_quality_tags" : {
                              "items" : { }
                            },
                            "data_quality_warnings_tags" : {
                              "items" : { }
                            },
                            "data_sources" : {
                              "description" : "Source of data imported from producers.\n"
                            },
                            "data_sources_tags" : {
                              "items" : { }
                            },
                            "last_check_dates_tags" : {
                              "items" : { }
                            },
                            "last_checked_t" : { },
                            "last_checker" : { },
                            "states" : {
                              "description" : "comma separated list of values indicating some states of the product,\nlike things to be done, or to be completed.\nSee [states taxonomy](https://static.openfoodfacts.net/data/taxonomies/states.json)\n"
                            },
                            "states_hierarchy" : {
                              "items" : { }
                            },
                            "states_tags" : {
                              "items" : {
                                "description" : "Each state describe something that is completed or is to be done or improved on the product.\nRefer to [states taxonomy](https://static.openfoodfacts.net/data/taxonomies/states.json)"
                              }
                            },
                            "misc_tags" : {
                              "description" : "Information about different aspect of the product\n",
                              "items" : { }
                            }
                          }
                        }, {
                          "properties" : {
                            "additives_original_tags" : {
                              "items" : { }
                            },
                            "additives_prev_original_tags" : {
                              "items" : { }
                            },
                            "added_countries_tags" : {
                              "items" : { }
                            },
                            "allergens_from_ingredients" : { },
                            "allergens_from_user" : { },
                            "amino_acids_prev_tags" : {
                              "items" : { }
                            },
                            "amino_acids_tags" : {
                              "items" : { }
                            },
                            "carbon_footprint_percent_of_known_ingredients" : { },
                            "categories_properties" : {
                              "properties" : {
                                "agribalyse_food_code:en" : { },
                                "agribalyse_proxy_food_code:en" : { },
                                "ciqual_food_code:en" : { }
                              }
                            },
                            "categories_properties_tags" : {
                              "items" : { }
                            },
                            "category_properties" : {
                              "additionalProperties" : {
                                "description" : "those are properties taken from the category taxonomy"
                              }
                            },
                            "ciqual_food_name_tags" : {
                              "items" : { }
                            },
                            "compared_to_category" : {
                              "description" : "the category to use for comparison.\n\n**TODO** explain how it is chosen.\n"
                            },
                            "conservation_conditions" : { },
                            "customer_service" : {
                              "description" : "Contact info of customer service.\n"
                            },
                            "expiration_date" : { },
                            "link" : {
                              "description" : "link to the product on the website of the producer\n"
                            },
                            "main_countries_tags" : {
                              "items" : { }
                            },
                            "minerals_prev_tags" : {
                              "items" : { }
                            },
                            "minerals_tags" : {
                              "items" : { }
                            },
                            "owner_fields" : {
                              "description" : "Those are fields provided by the producer (through producers platform),\nand the value he provided.\n",
                              "properties" : {
                                "additionalProperties" : {
                                  "description" : "you can retrieve all kind of properties, the same as on the parent object (the product).\nIt's not processed entries (like tags for example) but raw ones.\n",
                                  "oneOf" : [ { }, { }, { } ]
                                }
                              }
                            },
                            "nova_groups_markers" : {
                              "description" : "Detail of ingredients or processing that makes the products having Nova 3 or 4\n",
                              "properties" : {
                                "3" : {
                                  "description" : "Markers of level 3\n",
                                  "items" : {
                                    "description" : "This array has two element for each marker.\nOne\n",
                                    "items" : { }
                                  }
                                },
                                "4" : {
                                  "description" : "Markers of level 4\n",
                                  "items" : {
                                    "description" : "This array has two element for each marker.\nOne\n",
                                    "items" : { }
                                  }
                                }
                              }
                            },
                            "nucleotides_tags" : {
                              "items" : { }
                            },
                            "origin" : { },
                            "purchase_places" : {
                              "description" : "Country, state, or city where the product can be purchased.\n"
                            },
                            "purchase_places_tags" : {
                              "items" : { }
                            },
                            "stores" : {
                              "description" : "Distributor name.\n"
                            },
                            "stores_tags" : {
                              "items" : { }
                            },
                            "traces_from_ingredients" : { },
                            "traces_from_user" : { }
                          },
                          "title" : "product_extended"
                        }, {
                          "description" : "Metadata of a product (author, editors, creation date, etc.)\n",
                          "properties" : {
                            "created_t" : {
                              "description" : "Date when the product was added (UNIX timestamp format).\nSee also `entry_dates_tags`\n"
                            },
                            "creator" : {
                              "description" : "The contributor who added the product first.\n"
                            },
                            "editors_tags" : {
                              "description" : "List of editors who edited the product.\n",
                              "items" : { }
                            },
                            "informers_tags" : {
                              "items" : { }
                            },
                            "interface_version_created" : { },
                            "interface_version_modified" : { },
                            "languages" : { },
                            "languages_codes" : {
                              "description" : "Same as `languages` but by language code, instead of language tags\n"
                            },
                            "languages_hierarchy" : {
                              "items" : { }
                            },
                            "languages_tags" : {
                              "items" : { }
                            },
                            "last_edit_dates_tags" : {
                              "items" : { }
                            },
                            "last_editor" : { },
                            "last_modified_by" : {
                              "description" : "The username of the user who last modified the product.\n"
                            },
                            "last_modified_t" : {
                              "description" : "Date when the product page was last modified.\n"
                            },
                            "owner" : {
                              "description" : "Id of the producer in case he provides his own data about a product (producer platform).\n"
                            },
                            "owners_tags" : {
                              "description" : "Tagyfied version of owner\n"
                            },
                            "photographers_tags" : {
                              "items" : { }
                            },
                            "rev" : {
                              "description" : "revision number of this product version (each edit adds a revision)"
                            },
                            "sources" : {
                              "items" : {
                                "properties" : {
                                  "fields" : {
                                    "items" : { }
                                  },
                                  "id" : { },
                                  "images" : {
                                    "items" : { }
                                  },
                                  "import_t" : { },
                                  "manufacturer" : { },
                                  "name" : { },
                                  "source_licence" : { },
                                  "source_licence_url" : { },
                                  "url" : { }
                                },
                                "title" : "product_meta_source"
                              }
                            },
                            "sources_fields" : {
                              "properties" : {
                                "org-gs1" : {
                                  "properties" : {
                                    "gln" : { },
                                    "gpcCategoryCode" : { },
                                    "gpcCategoryName" : { },
                                    "isAllergenRelevantDataProvided" : { },
                                    "lastChangeDateTime" : { },
                                    "partyName" : { },
                                    "productionVariantDescription" : { },
                                    "publicationDateTime" : { }
                                  }
                                }
                              },
                              "title" : "product_meta_source_fields"
                            },
                            "teams" : { },
                            "teams_tags" : {
                              "items" : { }
                            },
                            "update_key" : { }
                          }
                        }, {
                          "description" : "Knowledge panels for a product\n",
                          "properties" : {
                            "knowledge_panels" : {
                              "description" : "The panels object is a dictionary of individual panel objects.\nEach key of the dictionary is the id of the panel, and the value is the panel object.\n\nApps typically display a number of root panels with known panel ids (e.g. health_card and environment_card). Panels can reference other panels and display them as sub-panels.",
                              "properties" : {
                                "additionalProperties" : {
                                  "description" : "Each panel contains an optional title and an optional array of elements.",
                                  "properties" : {
                                    "type" : {
                                      "description" : "Type of the panel. If set to \"card\", the panel and its sub-panels should be displayed in a card. If set to \"inline\", the panel should have its content always displayed."
                                    },
                                    "expanded" : {
                                      "description" : "If true, the panel is to be displayed already expanded. If false, only the title should be displayed, and the user should be able to click or tap it to open the panel and display the elements."
                                    },
                                    "expand_for" : {
                                      "description" : "If set to \"large\", the content of the panel should be expanded on large screens, but it should still be possible to unexpand it."
                                    },
                                    "title_element" : {
                                      "description" : "The title of a panel.",
                                      "properties" : {
                                        "title" : { },
                                        "grade" : {
                                          "description" : "Indicates that the panel corresponds to a A to E grade such as the Nutri-Score of the Eco-Score.",
                                          "enum" : [ "a", "b", "c", "d", "e", "unknown" ]
                                        },
                                        "icon_url" : { },
                                        "icon_color_from_evaluation" : { },
                                        "icon_size" : {
                                          "description" : "If set to \"small\", the icon should be displayed at a small size.\n"
                                        },
                                        "type" : {
                                          "description" : "Used to indicate a special type for the title, such as \"grade\" for Nutri-Score and Eco-Score."
                                        }
                                      },
                                      "title" : "title_element",
                                      "x-stoplight" : {
                                        "id" : "lox0wvl9bdgy2"
                                      }
                                    },
                                    "elements" : {
                                      "description" : "An ordered list of elements to display in the content of the panel.",
                                      "items" : {
                                        "description" : "Each element object contains one specific element object such as a text element or an image element.\n",
                                        "properties" : {
                                          "type" : {
                                            "description" : "The type of the included element object.\nThe type also indicates which field contains the included element object.\ne.g. if the type is \"text\", the included element object will be in the \"text_element\" field.\n\nNote that in the future, new type of element may be added,\nso your code should ignore unrecognized types, and unknown properties.\n\nTODO: add Map type\n",
                                            "enum" : [ "text", "image", "action", "panel", "panel_group", "table" ]
                                          },
                                          "text_element" : {
                                            "description" : "A text in simple HTML format to display.\n\nFor some specific texts that correspond to a product field (e.g. a product name, the ingredients list of a product),the edit_field_* fields are used to indicate how to edit the field value.",
                                            "properties" : {
                                              "type" : {
                                                "description" : "the type of text, might influence the way you display it.\n",
                                                "enum" : [ "summary", "warning", "notes" ]
                                              },
                                              "html" : {
                                                "description" : "Text to display in HTML format."
                                              },
                                              "language" : {
                                                "description" : "Language of the text. The name of the language is returned in the language requested when making the API call. e.g. if the text is in Polish, and the requested language is French, the language field will contain \"Polonais\" (French for \"Polish\"). Only set for specific fields such as the list of ingredients of a product."
                                              },
                                              "lc" : {
                                                "description" : "2 letter language code for the text. Only set for specific fields such as the list of ingredients of a product."
                                              },
                                              "edit_field_id" : {
                                                "description" : "id of the field used to edit this text in the product edit API."
                                              },
                                              "edit_field_type" : {
                                                "description" : "Type of the product field."
                                              },
                                              "edit_field_value" : {
                                                "description" : "Current value of the product field. This may differ from the html field which can contain extra formating."
                                              },
                                              "source_url" : {
                                                "description" : "Link to the source"
                                              },
                                              "source_text" : {
                                                "description" : "name of the source"
                                              },
                                              "source_lc" : {
                                                "description" : "Source locale name"
                                              },
                                              "source_language" : {
                                                "description" : "Human readable source locale name"
                                              }
                                            },
                                            "title" : "text_element",
                                            "x-stoplight" : {
                                              "id" : "vdwxlt73qnqfa"
                                            }
                                          },
                                          "image_element" : {
                                            "properties" : {
                                              "url" : {
                                                "description" : "full URL of the image"
                                              },
                                              "width" : {
                                                "description" : "Width of the image.\n\nThis is just a suggestion coming from the server, \nthe client may choose to use its own dimensions for the image.\n"
                                              },
                                              "height" : {
                                                "description" : "Height of the image.\n\nThis is just a suggestion coming from the server,\nthe client may choose to use its own dimensions for the image.\n"
                                              },
                                              "alt_text" : {
                                                "description" : "Alt Text of the image."
                                              }
                                            },
                                            "title" : "image_element",
                                            "x-stoplight" : {
                                              "id" : "k4v4kwt489q3j"
                                            }
                                          },
                                          "action_element" : { },
                                          "panel_element" : {
                                            "description" : "Panels can include other panels as sub-panels using the panel_element.",
                                            "properties" : {
                                              "panel_id" : {
                                                "description" : "The id of the panel to include. The id is the key of the panel in the panels object returned in the knowledge_panels field."
                                              }
                                            },
                                            "title" : "panel_element",
                                            "x-stoplight" : {
                                              "id" : "ymx41elz4yrnj"
                                            }
                                          },
                                          "panel_group_element" : {
                                            "description" : "The panel group element is used to display an optional title followed by a number of sub-panels.",
                                            "properties" : {
                                              "title" : { },
                                              "panel_ids" : {
                                                "description" : "The ids of the panels to include. The ids are the keys of the panels in the panels object returned in the knowledge_panels field.",
                                                "items" : { }
                                              }
                                            },
                                            "title" : "panel_group_element",
                                            "x-stoplight" : {
                                              "id" : "b7emlfrgiuue2"
                                            }
                                          },
                                          "table_element" : {
                                            "description" : "Element to display a table.",
                                            "properties" : {
                                              "id" : {
                                                "description" : "An id for the table."
                                              },
                                              "title" : {
                                                "description" : "Title of the column.\n"
                                              },
                                              "rows" : { },
                                              "columns" : {
                                                "items" : {
                                                  "properties" : {
                                                    "type" : { },
                                                    "text" : { },
                                                    "text_for_small_screens" : { },
                                                    "style" : { },
                                                    "column_group_id" : { },
                                                    "shown_by_default" : { }
                                                  },
                                                  "title" : "table_column"
                                                }
                                              }
                                            },
                                            "title" : "table_element"
                                          }
                                        },
                                        "required" : [ "type" ],
                                        "title" : "element",
                                        "x-stoplight" : {
                                          "id" : "e2ybdrtmx0tme"
                                        }
                                      }
                                    },
                                    "level" : {
                                      "description" : "a message level, as levels we use in log.\nIt might help theming the panel visualy\n"
                                    },
                                    "size" : {
                                      "description" : "size is either empty (normal display) \nor small to indicate a panel that should have a smaller font size\n",
                                      "enum" : [ "small" ]
                                    },
                                    "topics" : {
                                      "items" : { }
                                    }
                                  },
                                  "title" : "panel"
                                }
                              },
                              "readOnly" : true,
                              "title" : "panels"
                            }
                          }
                        }, {
                          "description" : "Specific data about a product to enable personal ranking\n",
                          "properties" : {
                            "attribute_groups" : {
                              "description" : "Each element is an attribute that can help compute a personal ranking for the product",
                              "items" : {
                                "properties" : {
                                  "id" : {
                                    "description" : "Unique id of the attribute.\n\nIt will be use to match against preferences parameters.\n"
                                  },
                                  "status" : {
                                    "description" : "wether we have the information to really compute this criteria or not.",
                                    "enum" : [ "known", "unknown" ]
                                  },
                                  "title" : {
                                    "description" : "A descriptive sentence about the situation of the product concerning attribute\n"
                                  },
                                  "match" : {
                                    "description" : "a numeric value for the match,\ntelling how much the products ranks well for this particular attribute.\nThe higher the value, the better the match.\n",
                                    "format" : "float",
                                    "maximum" : 100,
                                    "minimum" : 0
                                  },
                                  "grade" : {
                                    "description" : "every attribute as a grade for a to e",
                                    "enum" : [ "unknown", "a", "b", "c", "d", "e" ]
                                  },
                                  "name" : {
                                    "description" : "The name of attribute, for eventual display"
                                  },
                                  "icon_url" : {
                                    "description" : "an icon representing the attribute match (often using a color)"
                                  },
                                  "description" : {
                                    "description" : "An eventual description of the value of the property upon which this attribute is based"
                                  },
                                  "description_short" : {
                                    "description" : "An eventual short description of the value of the property upon which this attribute is based"
                                  }
                                },
                                "title" : "product_attribute_group"
                              }
                            }
                          }
                        } ],
                        "description" : "This is all the fields describing a product and how to display it on a page.\n\nRefer to the different sub schema for more readable entries:\n\n* [Product Base](#cmp--schemas-product-base): Base fields of a product\n* [Product Misc](#cmp--schemas-product-misc): Miscellaneous but important fields of a product\n* [Product Tags](#cmp--schemas-product-tags): Tags fields on a product\n* [Product Images](#cmp--schemas-product-images): Information about Images of a product\n* [Product Eco-Score](#cmp--schemas-product-ecoscore): Fields related to Eco-Score for a product\n* [Product Ingredients](#cmp--schemas-product-ingredients): Fields about ingredients of a product\n* [Product Nutrition](#cmp--schemas-product-nutrition): Nutrition fields of a product\n* [Product Data Quality](#cmp--schemas-product-quality): fields related to data quality for a product\n* [Product Extended](#cmp--schemas-product-extended): TODO\n* [Product Metadata](#cmp--schemas-product-meta): Metadata of a product (author, editors, etc.)\n* [Product Knowledge Panels](#cmp--schemas-product-knowledge-panels): Knowledge panels for a product\n* [Product Attribute Groups](#cmp--schemas-product-attribute-groups): Attribute groups for personal product matching\n"
                      }
                    },
                    "skip" : { }
                  }
                }
              }
            },
            "description" : "OK"
          },
          "429" : {
            "content" : {
              "text/plain" : {
                "schema" : { }
              }
            },
            "description" : "Too Many Requests"
          }
        },
        "security" : [ ],
        "summary" : "Search for Products",
        "tags" : [ "Read Requests" ]
      }
    },
    "/cgi/suggest.pl" : {
      "get" : {
        "description" : "For example , Dave is looking for packaging_shapes that contain the term \"fe\",\nall packaging_shapes containing \"fe\" will be returned.\nThis is useful if you have a search in your application,\nfor a specific product field.\n",
        "operationId" : "get-cgi-suggest.pl",
        "parameters" : [ {
          "$ref" : "#/components/parameters/tagtype"
        }, {
          "$ref" : "#/components/parameters/term"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "items" : {
                    "properties" : {
                      "tbd" : { }
                    }
                  }
                }
              }
            },
            "description" : "OK"
          },
          "429" : {
            "content" : {
              "text/plain" : {
                "schema" : { }
              }
            },
            "description" : "Too Many Requests"
          }
        },
        "security" : [ ],
        "summary" : "Get Suggestions to Aid Adding/Editing Products",
        "tags" : [ "Read Requests" ]
      }
    },
    "/cgi/nutrients.pl" : {
      "get" : {
        "description" : "Used to display the nutrition facts table of a product, or to display a form to input those nutrition facts.\n",
        "operationId" : "get-cgi-nutrients.pl",
        "parameters" : [ {
          "$ref" : "#/components/parameters/cc"
        }, {
          "$ref" : "#/components/parameters/lc"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "description" : "Nutrients and sub-nutrients of a product, with their name and default unit.\n(e.g. saturated-fat is a sub-nutrient of fat).\n",
                  "items" : {
                    "properties" : {
                      "id" : {
                        "description" : "id of the nutrient"
                      },
                      "name" : {
                        "description" : "Name of the nutrient in the requested language"
                      },
                      "important" : {
                        "description" : "Indicates if the nutrient is always shown on the nutrition facts table"
                      },
                      "display_in_edit_form" : {
                        "description" : "Indicates if the nutrient should be shown in the nutrition facts edit form"
                      },
                      "unit" : {
                        "description" : "Default unit of the nutrient",
                        "enum" : [ "g", "mg", "μg", "cl", "ml", "dv", "% vol", "%" ]
                      },
                      "nutrients" : {
                        "items" : {
                          "properties" : {
                            "id" : {
                              "description" : "id of the nutrient"
                            },
                            "name" : {
                              "description" : "Name of the nutrient in the requested language"
                            },
                            "important" : {
                              "description" : "Indicates if the nutrient is always shown on the nutrition facts table"
                            },
                            "display_in_edit_form" : {
                              "description" : "Indicates if the nutrient should be shown in the nutrition facts edit form"
                            },
                            "unit" : {
                              "description" : "Default unit of the nutrient",
                              "enum" : [ "g", "mg", "μg", "cl", "ml", "dv", "% vol", "%" ]
                            },
                            "nutrients" : {
                              "items" : {
                                "$ref" : "#/components/schemas/Nutrients/items"
                              }
                            }
                          },
                          "title" : "nutrient"
                        }
                      }
                    },
                    "title" : "nutrient"
                  }
                }
              }
            },
            "description" : "OK"
          },
          "429" : {
            "content" : {
              "text/plain" : {
                "schema" : { }
              }
            },
            "description" : "Too Many Requests"
          }
        },
        "security" : [ ],
        "summary" : "Get a nested list of nutrients that can be displayed in the nutrition facts table for a specific country and language",
        "tags" : [ "Read Requests" ]
      }
    },
    "/api/v2/attribute_groups" : {
      "get" : {
        "description" : "Attributes are at the heart of personal search.\nThey score the products according to different criterias,\nwhich could then be matched to a user's preferences.\n\nThis API helps you list attributes and display them in your application,\nfor the user to choose the importance of each criteria.\n\nnote: /api/v2/attribute_groups_{lc} is also a valid route, but consider it deprecated\n",
        "operationId" : "get-attribute-groups",
        "parameters" : [ {
          "$ref" : "#/components/parameters/lc"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "description" : "List of groups of attributes for personal search in a specific language.\n",
                  "items" : {
                    "properties" : {
                      "id" : {
                        "description" : "unique id of the group"
                      },
                      "name" : {
                        "description" : "Name of the group"
                      },
                      "attributes" : {
                        "description" : "Attributes that are part of this group\n",
                        "items" : {
                          "properties" : {
                            "id" : {
                              "description" : "unique id of the attribute"
                            },
                            "name" : {
                              "description" : "Name of the attribute"
                            },
                            "icon_url" : {
                              "description" : "url of icon to display next to the settings for this attribute"
                            },
                            "setting_name" : {
                              "description" : "a description of the attribute to display to users"
                            },
                            "setting_note" : {
                              "description" : "a complementary note on the attribute"
                            },
                            "default" : {
                              "description" : "Indicates the default setting for this attribute",
                              "enum" : [ "mandatory", "very_important", "important", "not_important" ]
                            },
                            "panel_id" : {
                              "description" : "Linked knowledge panel (optional)"
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            },
            "description" : "OK"
          },
          "429" : {
            "content" : {
              "text/plain" : {
                "schema" : { }
              }
            },
            "description" : "Too Many Requests"
          }
        },
        "security" : [ ],
        "summary" : "Get the list of attributes available for personal search.",
        "tags" : [ "Read Requests", "Personal search" ]
      }
    },
    "/api/v2/preferences" : {
      "get" : {
        "description" : "TODO",
        "operationId" : "get-preferences",
        "parameters" : [ {
          "$ref" : "#/components/parameters/lc"
        } ],
        "responses" : {
          "200" : {
            "content" : {
              "application/json" : {
                "schema" : {
                  "description" : "Rules to apply to compute personal ranking of a product,\nbased upon the setting value of each attribute.\n",
                  "items" : {
                    "properties" : {
                      "id" : {
                        "description" : "id for the setting value",
                        "enum" : [ "not_important", "important", "very_important", "mandatory" ]
                      },
                      "name" : {
                        "description" : "name for the setting value, translated according to `lc` parameter"
                      },
                      "factor" : {
                        "description" : "factor to apply to the property of the product corresponding to attributes\nhaving this setting value\n"
                      },
                      "minimum_match" : {
                        "description" : "FIXME\n"
                      }
                    }
                  }
                }
              }
            },
            "description" : "OK"
          },
          "429" : {
            "content" : {
              "text/plain" : {
                "schema" : { }
              }
            },
            "description" : "Too Many Requests"
          }
        },
        "security" : [ ],
        "summary" : "Get the weights corresponding to attributes preferences\nto compute personal product\n",
        "tags" : [ "Read Requests", "Personal search" ]
      }
    }
  },
  "components" : {
    "parameters" : {
      "id" : {
        "explode" : true,
        "in" : "query",
        "name" : "id",
        "required" : true,
        "schema" : { },
        "style" : "form"
      },
      "cc" : {
        "description" : "2 letter code of the country of the user. Used for localizing some fields in returned values (e.g. knowledge panels). If not passed, the country may be inferred by the IP address of the request.",
        "explode" : true,
        "in" : "query",
        "name" : "cc",
        "required" : false,
        "schema" : { },
        "style" : "form"
      },
      "lc" : {
        "description" : "2 letter code of the language of the user.\nUsed for localizing some fields in returned values (e.g. knowledge panels).\nIf not passed, the language may be inferred by the Accept-Language header of the request,\nor from the domain name prefix.\n",
        "explode" : true,
        "in" : "query",
        "name" : "lc",
        "required" : false,
        "schema" : { },
        "style" : "form"
      },
      "code" : {
        "description" : "Barcode of the product",
        "explode" : true,
        "in" : "query",
        "name" : "code",
        "required" : true,
        "schema" : { },
        "style" : "form"
      },
      "process_image" : {
        "explode" : true,
        "in" : "query",
        "name" : "process_image",
        "required" : true,
        "schema" : { },
        "style" : "form"
      },
      "ocr_engine" : {
        "explode" : true,
        "in" : "query",
        "name" : "ocr_engine",
        "required" : true,
        "schema" : { },
        "style" : "form"
      },
      "imgid" : {
        "explode" : true,
        "in" : "query",
        "name" : "imgid",
        "required" : true,
        "schema" : { },
        "style" : "form"
      },
      "angle" : {
        "explode" : true,
        "in" : "query",
        "name" : "angle",
        "required" : true,
        "schema" : { },
        "style" : "form"
      },
      "page" : {
        "description" : "The page number you request to view (eg. in search results spanning multiple pages)\n",
        "explode" : true,
        "in" : "query",
        "name" : "page",
        "required" : false,
        "schema" : { },
        "style" : "form"
      },
      "page_size" : {
        "description" : "The number of elements should be sent per page\n",
        "explode" : true,
        "in" : "query",
        "name" : "page_size",
        "required" : false,
        "schema" : { },
        "style" : "form"
      },
      "sort_by" : {
        "description" : "The allowed values  used to sort/order the search results.\n\n* `product_name` sorts on name\n* `ecoscore_score`, `nova_score`, `nutriscore_score` rank on the [Eco-Score](https://world.openfoodfacts.org/eco-score-the-environmental-impact-of-food-products), [Nova](https://world.openfoodfacts.org/nova), or [Nutri-Score](https://world.openfoodfacts.org/nutriscore)\n* `scans_n`, `unique_scans_n` and `popularity_key` are about product popularity: number of scans on unique scans, rank of product\n* `created_t`, `last_modified_t`, are about creation and modification dates\n* `nothing`, tells not to sort at all (because if you do not provide the sort_by argument we default to sorting on popularity (for food) or last modification date)\n",
        "explode" : true,
        "in" : "query",
        "name" : "sort_by",
        "required" : false,
        "schema" : {
          "enum" : [ "product_name", "last_modified_t", "scans_n", "unique_scans_n", "created_t", "completeness", "popularity_key", "nutriscore_score", "nova_score", "nothing", "ecoscore_score" ]
        },
        "style" : "form"
      },
      "fields" : {
        "description" : "The fields to be returned from the product object can also be limited.\nIf not specified, it returns the entire product object response.\n",
        "explode" : true,
        "in" : "query",
        "name" : "fields",
        "required" : false,
        "schema" : { },
        "style" : "form"
      },
      "tagtype" : {
        "explode" : true,
        "in" : "query",
        "name" : "tagtype",
        "required" : false,
        "schema" : { },
        "style" : "form"
      },
      "term" : {
        "explode" : true,
        "in" : "query",
        "name" : "term",
        "required" : false,
        "schema" : { },
        "style" : "form"
      }
    },
    "schemas" : {
      "Product-Base" : {
        "description" : "Base product data\n",
        "properties" : {
          "abbreviated_product_name" : {
            "description" : "Abbreviated name in requested language"
          },
          "code" : {
            "description" : "barcode of the product (can be EAN-13 or internal codes for some food stores),\nfor products without a barcode,\nOpen Food Facts assigns a number starting with the 200 reserved prefix\n"
          },
          "codes_tags" : {
            "items" : {
              "description" : "A value which is the type of barcode \"code-13\" or \"code-8\"\nand\nA series of mask for the barcode\nIt helps retrieve barcodes starting by\n"
            }
          },
          "generic_name" : {
            "description" : "Legal name of the product as regulated\nby the European authorities.\n"
          },
          "id" : {
            "description" : "internal identifier for the product, usually set to the value of `code`,\nexcept on the producers platform where it is prefixed by the owner\n"
          },
          "lc" : {
            "description" : "Main language of the product.\nThis is a duplicate of `lang` property (for historical reasons).\n"
          },
          "lang" : {
            "description" : "Main language of the product.\n\nThis should be the main language of product packaging (if one is predominant).\n\nMain language is also used to decide which ingredients list to parse.\n"
          },
          "nova_group" : {
            "description" : "Nova group as an integer from 1 to 4. See https://world.openfoodfacts.org/nova"
          },
          "nova_groups" : { },
          "obsolete" : { },
          "obsolete_since_date" : {
            "description" : "A date at which the product was declared obsolete.\nThis means it's not produced any more.\n"
          },
          "product_name" : {
            "description" : "The name of the product\n"
          },
          "product_name_en" : {
            "description" : "The name of the product can also\nbe in many other languages like\nproduct_name_fr (for French).\n"
          },
          "product_quantity" : {
            "description" : "The size in g or ml for the whole product.\nIt's a normalized version of the quantity field.\n"
          },
          "product_quantity_unit" : {
            "description" : "The unit (either g or ml) for the correponding product_quantity.\n"
          },
          "quantity" : {
            "description" : "Quantity and Unit.\n"
          }
        }
      },
      "Product-Misc" : {
        "description" : "Miscellaneous but important fields of a product\n",
        "properties" : {
          "additives_n" : {
            "description" : "Number of food additives.\n"
          },
          "checked" : { },
          "complete" : { },
          "completeness" : { },
          "ecoscore_grade" : {
            "description" : "See also: `ecoscore_tags`\n"
          },
          "ecoscore_score" : {
            "description" : "See also: `ecoscore_tags`\n"
          },
          "food_groups" : { },
          "food_groups_tags" : {
            "items" : { }
          },
          "nutrient_levels" : {
            "description" : "Traffic light indicators on main nutrients levels\n",
            "properties" : {
              "fat" : {
                "enum" : [ "low", "moderate", "high" ]
              },
              "salt" : {
                "enum" : [ "low", "moderate", "high" ]
              },
              "saturated-fat" : {
                "enum" : [ "low", "moderate", "high" ]
              },
              "sugars" : {
                "enum" : [ "low", "moderate", "high" ]
              }
            }
          },
          "packaging_text" : {
            "description" : "Recycling instructions as raw text, e.g. Plastic\nbottle to recycle, Plastic cap to recycle.\nThis will get automatically parsed and\nwill be used to compute the Eco-Score.\nYou can either request it (if it exists) or\nsend it in a specific language.\n"
          },
          "packagings" : {
            "description" : "The packagings object is an array of individual packaging component objects.\n\nThe Packaging data document explains how packaging data is structured in Open Food Facts: https://openfoodfacts.github.io/openfoodfacts-server/dev/explain-packaging-data/\n\nThe shape, material and recycling properties of each packaging component are linked to entries in the packaging_shapes, packaging_materials and packaging_recycling taxonomies:\n\nhttps://world.openfoodfacts.org/data/taxonomies/packaging_shapes.json\nhttps://world.openfoodfacts.org/data/taxonomies/packaging_materials.json\nhttps://world.openfoodfacts.org/data/taxonomies/packaging_recycling.json\n\nIf the tags_lc field is set, the properties will include a lc_name field with the translation in the requested language.",
            "items" : {
              "description" : "Each packaging component has different properties to specify how many there are, its shape, material etc.\n\nThe shape, material and recycling properties are mapped to one entry in the packaging_shapes, packaging_materials and packaging_recycling taxonomies, and the value of the property is the canonical name of the taxonomy entry (e.g. en:bottle).\n\nThey may contain values that could not yet get matched to their respective taxonomy, in which case they will contain a free text value prefixed with the language code of this text value (e.g. \"fr:Bouteille sphérique\" might have been entered by a French user to indicate it is a spherical bottle).",
              "properties" : {
                "number_of_units" : {
                  "description" : "umber of units of this packaging component contained in the product (e.g. 6 for a pack of 6 bottles)"
                },
                "shape" : {
                  "description" : "The shape property is canonicalized using the packaging_shapes taxonomy.",
                  "properties" : {
                    "id" : {
                      "description" : "Canonical id of the entry in the taxonomy. If the value cannot be mapped to a taxonomy entry, the value will be the name of the entry in its original language prefixed by the language 2 letter code and a colon."
                    },
                    "lc_name" : {
                      "description" : "Name of the entry in the language requested in the tags_lc field of the request. This field is returned only of tags_lc is specified. If the translation is not available, or if the entry does not exist in the taxonomy, the value will be the name of the entry in its original language prefixed by the language 2 letter code and a colon."
                    }
                  },
                  "title" : "Packaging component shape",
                  "x-stoplight" : {
                    "id" : "xrj8agza3dwgf"
                  }
                },
                "material" : {
                  "description" : "The material property is canonicalized using the packaging_materials taxonomy.",
                  "properties" : {
                    "id" : {
                      "description" : "Canonical id of the entry in the taxonomy. If the value cannot be mapped to a taxonomy entry, the value will be the name of the entry in its original language prefixed by the language 2 letter code and a colon."
                    },
                    "lc_name" : {
                      "description" : "Name of the entry in the language requested in the tags_lc field of the request. This field is returned only of tags_lc is specified. If the translation is not available, or if the entry does not exist in the taxonomy, the value will be the name of the entry in its original language prefixed by the language 2 letter code and a colon."
                    }
                  },
                  "title" : "Packaging component material",
                  "x-stoplight" : {
                    "id" : "n6umazgqmwrd5"
                  }
                },
                "recycling" : {
                  "description" : "The recycling property is canonicalized using the packaging_recycling taxonomy.",
                  "properties" : {
                    "id" : {
                      "description" : "Canonical id of the entry in the taxonomy. If the value cannot be mapped to a taxonomy entry, the value will be the name of the entry in its original language prefixed by the language 2 letter code and a colon."
                    },
                    "lc_name" : {
                      "description" : "Name of the entry in the language requested in the tags_lc field of the request. This field is returned only of tags_lc is specified. If the translation is not available, or if the entry does not exist in the taxonomy, the value will be the name of the entry in its original language prefixed by the language 2 letter code and a colon."
                    }
                  },
                  "title" : "Packaging component recycling instruction",
                  "x-stoplight" : {
                    "id" : "376tk8e2cmyh2"
                  }
                },
                "quantity_per_unit" : {
                  "description" : "Quantity (weight or volume) of food product contained in the packaging component. (e.g. 75cl for a wine bottle)"
                },
                "quantity_per_unit_value" : {
                  "description" : "Value parsed from the quantity field."
                },
                "quantity_per_unit_unit" : {
                  "description" : "Unit parsed and normalized from the quantity field."
                },
                "weight_specified" : {
                  "description" : "Weight (as specified by the manufacturer) of one unit of the empty packaging component (in grams). (e.g. for a 6 pack of 1.5l water bottles, it might be 30, the weight in grams of 1 empty water bottle without its cap which is a different packaging component)."
                },
                "weight_measured" : {
                  "description" : "Weight (as measured by one or more users) of one unit of the empty packaging component (in grams). (e.g. for a 6 pack of 1.5l water bottles, it might be 30, the weight in grams of 1 empty water bottle without its cap which is a different packaging component)."
                },
                "weight_estimated" : {
                  "description" : "Weight (as estimated from similar products) of one unit of the empty packaging component (in grams). (e.g. for a 6 pack of 1.5l water bottles, it might be 30, the weight in grams of 1 empty water bottle without its cap which is a different packaging component)."
                },
                "weight" : {
                  "description" : "Weight of one unit of the empty packaging component."
                },
                "weight_source_id" : {
                  "description" : "Indicates which field was used to populate the \"weight\" field. Either \"specified\", \"measured\", or \"estimated\""
                }
              },
              "title" : "Packaging component (READ)"
            },
            "readOnly" : true,
            "title" : "Packagings (READ)"
          },
          "packagings_complete" : {
            "description" : "Indicate if the packagings array contains all the packaging parts of the product. This field can be set by users when they enter or verify packaging data. Possible values are 0 or 1.",
            "maximum" : 1,
            "minimum" : 0,
            "title" : "packagings_complete"
          },
          "pnns_groups_1" : {
            "description" : "Category of food according to [French Nutrition and Health Program](https://fr.wikipedia.org/wiki/Programme_national_nutrition_sant%C3%A9)\n"
          },
          "pnns_groups_1_tags" : {
            "items" : { }
          },
          "pnns_groups_2" : {
            "description" : "Sub Category of food according to [French Nutrition and Health Program](https://fr.wikipedia.org/wiki/Programme_national_nutrition_sant%C3%A9)\n"
          },
          "pnns_groups_2_tags" : {
            "items" : { }
          },
          "popularity_key" : { },
          "popularity_tags" : {
            "items" : { }
          },
          "scans_n" : { },
          "unique_scans_n" : { },
          "serving_quantity" : {
            "description" : "Normalized version of serving_size.\nNote that this is NOT the number of servings by product.\n<small>(in perl, see `normalize_serving_size`)</small>\n"
          },
          "serving_quantity_unit" : {
            "description" : "The unit (either g or ml) for the correponding serving_quantity.\n"
          },
          "serving_size" : {
            "description" : "Serving size text (generally in g or ml).\nWe expect a quantity + unit but the user is free to input any string.\n"
          }
        },
        "title" : "product_misc"
      },
      "Product-Tags" : {
        "description" : "Data about a product which is represented as tags\n",
        "properties" : {
          "brands" : {
            "description" : "List of brands (not taxonomized)"
          },
          "brands_tags" : {
            "items" : {
              "description" : "List of brands (tags, not taxonomized)"
            }
          },
          "categories" : { },
          "categories_hierarchy" : {
            "items" : { }
          },
          "categories_lc" : {
            "description" : "Categories language code"
          },
          "categories_tags" : {
            "items" : { }
          },
          "checkers_tags" : {
            "items" : {
              "description" : "List of checkers (users who checked the product) tags"
            }
          },
          "cities" : { },
          "cities_tags" : {
            "items" : { }
          },
          "correctors_tags" : {
            "items" : { }
          },
          "countries" : {
            "description" : "List of countries where the product is sold.\n"
          },
          "countries_hierarchy" : {
            "items" : { }
          },
          "countries_lc" : {
            "description" : "Countries language code"
          },
          "countries_tags" : {
            "items" : { }
          },
          "ecoscore_tags" : {
            "description" : "All ecoscore of a product.\nMost of the time it's only one value,\nbut it might eventually be more for products composed of sub-products.\nSee also: `ecoscore_score`, `ecoscore_grade`.\n",
            "items" : { }
          },
          "emb_codes" : {
            "description" : "Packager code. EMB is the French system of traceability codes for packager.\n"
          },
          "emb_codes_orig" : { },
          "emb_codes_tags" : {
            "items" : { }
          },
          "labels" : { },
          "labels_hierarchy" : {
            "items" : { }
          },
          "labels_lc" : { },
          "labels_tags" : {
            "items" : { }
          },
          "entry_dates_tags" : {
            "description" : "The data as a series of tag: `yyyy-mm-dd`, `yyyy-mm`, `yyyy`\n",
            "items" : { }
          },
          "manufacturing_places" : {
            "description" : "Places where the product was manufactured or transformed.\n"
          },
          "manufacturing_places_tags" : {
            "items" : { }
          },
          "nova_groups_tags" : {
            "items" : { }
          },
          "nutrient_levels_tags" : {
            "items" : { }
          }
        }
      },
      "Nutrients" : {
        "description" : "Nutrients and sub-nutrients of a product, with their name and default unit.\n(e.g. saturated-fat is a sub-nutrient of fat).\n",
        "items" : {
          "properties" : {
            "id" : {
              "description" : "id of the nutrient"
            },
            "name" : {
              "description" : "Name of the nutrient in the requested language"
            },
            "important" : {
              "description" : "Indicates if the nutrient is always shown on the nutrition facts table"
            },
            "display_in_edit_form" : {
              "description" : "Indicates if the nutrient should be shown in the nutrition facts edit form"
            },
            "unit" : {
              "description" : "Default unit of the nutrient",
              "enum" : [ "g", "mg", "μg", "cl", "ml", "dv", "% vol", "%" ]
            },
            "nutrients" : {
              "items" : {
                "properties" : {
                  "id" : {
                    "description" : "id of the nutrient"
                  },
                  "name" : {
                    "description" : "Name of the nutrient in the requested language"
                  },
                  "important" : {
                    "description" : "Indicates if the nutrient is always shown on the nutrition facts table"
                  },
                  "display_in_edit_form" : {
                    "description" : "Indicates if the nutrient should be shown in the nutrition facts edit form"
                  },
                  "unit" : {
                    "description" : "Default unit of the nutrient",
                    "enum" : [ "g", "mg", "μg", "cl", "ml", "dv", "% vol", "%" ]
                  },
                  "nutrients" : {
                    "items" : {
                      "$ref" : "#/components/schemas/Nutrients/items"
                    }
                  }
                },
                "title" : "nutrient"
              }
            }
          },
          "title" : "nutrient"
        }
      },
      "Product-Nutrition" : {
        "description" : "Nutrition fields of a product\n\nMost of these properties are read-only.\n\nSee [how to add nutrition data](https://openfoodfacts.github.io/openfoodfacts-server/api/ref-cheatsheet/#add-nutrition-facts-values-units-and-base)\n",
        "properties" : {
          "no_nutrition_data" : {
            "description" : "When a product does not have nutrition data displayed on the\npackaging, the user can check the field \"Nutrition facts are\nnot specified on the product\".\nBy doing so, the no_nutrition_data field takes the value \"on\".\nThis case is frequent (thousands of products).\n"
          },
          "nutrition_data_per" : {
            "description" : "The nutrition data on the package can be per serving or per 100g.\n\nThis is essential to understand if `<nutrient>_value` and `<nutrient>`\nvalues in `nutriments` applies for a serving or for 100g.\n\n**IMPORTANT:**\nWhen writing products,\nthis setting applies to all existing nutrients values for the product,\nnot only the nutrient values sent in the write request.\nSo it should not be changed unless all nutrients values are provided\nwith values that match the nutrition_data_per field.\n",
            "enum" : [ "serving", "100g" ]
          },
          "nutrition_data_prepared_per" : {
            "description" : "The nutrition data for prepared product on the package (if any) can be per serving or per 100g.\n\nThis is essential to understand if `<nutrient>_prepared_value` and `<nutrient>_prepared`\nvalues in `nutriments` applies for a serving or for 100g.\n\nSee also important note on `nutrition_data_per`.\n",
            "enum" : [ "serving", "100g" ]
          },
          "nutriments" : {
            "description" : "All known nutrients for the product.\n\nNote that each nutrients are declined with a variety of suffixes like `_100g`, `_serving`,\nsee patternProperties below.\n\nA specific `_unit` is the unit used to measure the nutrient.\n\nBeware that some properties are to be interpreted based upon `nutrition_data_per` value.\n\nAlso for products that have a nutrition table for prepared product\n(eg. the nutrition facts for a bowl of milk with cocoa powder),\na `_prepared` suffix is added (before other suffixes).\n\nYou can get all possible nutrients from the\n[nutrients taxonomy](https://static.openfoodfacts.org/data/taxonomies/nutrients.json)\n\n**FIXME** add more nutrients with description.\n",
            "properties" : {
              "alcohol" : {
                "description" : "Quantity of alcohol\n\n(per 100g or per serving) in a standard unit (g or ml)\n"
              },
              "carbohydrates" : { },
              "energy" : {
                "description" : "It is the same as `energy-kj` if we have it, or computed from `energy-kcal` otherwise\n\n(per 100g or per serving) in kj\n"
              },
              "energy_value" : {
                "description" : "energy_value will be equal to energy-kj_value if we have it or to energy-kcal_value otherwise\n"
              },
              "energy_unit" : {
                "description" : "Equal to energy-kj_unit if we have it or to energy-kcal_unit otherwise\n",
                "enum" : [ "kcal", "kj" ]
              },
              "energy-kcal" : {
                "description" : "energy in kcal, if it is specified\n\n(per 100g or per serving) in a standard unit (g or ml)\n"
              },
              "energy-kj" : {
                "description" : "energy in kj, if it is specified\n\n(per 100g or per serving) in a standard unit (g or ml)\n"
              },
              "fat" : { },
              "fruits-vegetables-legumes-estimate-from-ingredients" : {
                "description" : "An estimate, from the ingredients list of the percentage of fruits, vegetable and legumes.\nThis is an important information for Nutri-Score (2023 version) computation.\n"
              },
              "fruits-vegetables-nuts-estimate-from-ingredients" : {
                "description" : "An estimate, from the ingredients list of the percentage of fruits, vegetable and nuts.\nThis is an important information for Nutri-Score (2021 version) computation.\n"
              },
              "nova-group" : { },
              "nutrition-score-fr" : {
                "description" : "Experimental nutrition score derived from\nthe UK FSA score and adapted for the French market\n(formula defined by the team of Professor Hercberg).\n"
              },
              "proteins" : { },
              "salt" : { },
              "saturated-fat" : { },
              "sodium" : { },
              "sugars" : { },
              "carbon-footprint-from-known-ingredients_product" : { },
              "carbon-footprint-from-known-ingredients_serving" : { },
              "erythritol" : {
                "description" : "erythritol is a polyol which is not providing any energy.\nAs such, it needs not be taken into account when computing\nthe energy of a product. Eryhtritol is now displayed on\nnutrition facts sheet of some products, mainly in the USA.\nThis value is entered either by contributors, either by\nimports.\n"
              }
            }
          },
          "nutriscore_data" : {
            "description" : "Detail of data the Nutri-Score was computed upon.\n\n**Note**: this might not be stable, don't rely too much on this, or, at least, tell us !\n\n**TODO** document each property\n",
            "properties" : {
              "energy" : { },
              "energy_points" : { },
              "energy_value" : { },
              "fiber" : { },
              "fiber_points" : { },
              "fiber_value" : { },
              "fruits_vegetables_nuts_colza_walnut_olive_oils" : { },
              "fruits_vegetables_nuts_colza_walnut_olive_oils_points" : { },
              "fruits_vegetables_nuts_colza_walnut_olive_oils_value" : { },
              "grade" : { },
              "is_beverage" : { },
              "is_cheese" : { },
              "is_fat" : { },
              "is_water" : { },
              "negative_points" : { },
              "positive_points" : { },
              "proteins" : { },
              "proteins_points" : { },
              "proteins_value" : { },
              "saturated_fat" : { },
              "saturated_fat_points" : { },
              "saturated_fat_ratio" : { },
              "saturated_fat_ratio_points" : { },
              "saturated_fat_ratio_value" : { },
              "saturated_fat_value" : { },
              "score" : { },
              "sodium" : { },
              "sodium_points" : { },
              "sodium_value" : { },
              "sugars" : { },
              "sugars_points" : { },
              "sugars_value" : { }
            }
          },
          "nutriscore_grade" : {
            "description" : "Nutri-Score for the product as a letter.\n\nSee https://world.openfoodfacts.org/nutriscore.\n",
            "enum" : [ "a", "b", "c", "d", "e" ]
          },
          "nutriscore_score" : {
            "description" : "Nutri-Score for the product as an integer (see also `nutriscore_grade`).\n"
          },
          "nutriscore_score_opposite" : { },
          "nutrition_grade_fr" : {
            "description" : "Nutrition grade (‘a’ to ‘e’),\nhttps://world.openfoodfacts.org/nutriscore.\n"
          },
          "nutrition_grades" : {
            "description" : "Nutrition grades as a comma separated list.\n\nSome products with multiple components might have multiple Nutri-Score\n"
          },
          "nutrition_grades_tags" : {
            "items" : { }
          },
          "nutrition_score_beverage" : { },
          "nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients" : { },
          "nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients_value" : { },
          "nutrition_score_warning_no_fiber" : { },
          "other_nutritional_substances_tags" : {
            "items" : { }
          },
          "unknown_nutrients_tags" : {
            "items" : { }
          },
          "vitamins_tags" : {
            "items" : { }
          }
        },
        "title" : "product_nutrition"
      },
      "Ingredients" : {
        "description" : "This structure gives the different ingredients and some information about them,\nlike estimate on their quantity.\n",
        "items" : {
          "properties" : {
            "id" : { },
            "ingredients" : {
              "description" : "Sub ingredients composing this ingredients.\n",
              "items" : {
                "properties" : {
                  "id" : { },
                  "ingredients" : {
                    "description" : "Sub ingredients composing this ingredients.\n",
                    "items" : {
                      "$ref" : "#/components/schemas/Ingredients/items"
                    }
                  },
                  "percent" : { },
                  "percent_estimate" : { },
                  "percent_max" : { },
                  "percent_min" : { },
                  "text" : { },
                  "vegan" : { },
                  "vegetarian" : { }
                },
                "title" : "ingredient"
              }
            },
            "percent" : { },
            "percent_estimate" : { },
            "percent_max" : { },
            "percent_min" : { },
            "text" : { },
            "vegan" : { },
            "vegetarian" : { }
          },
          "title" : "ingredient"
        }
      },
      "Product-Ingredients" : {
        "description" : "Fields about ingredients of a product",
        "properties" : {
          "additives_tags" : {
            "items" : { }
          },
          "allergens" : {
            "description" : "comma separated list of allergens"
          },
          "allergens_lc" : {
            "description" : "language in which `allergens` where input"
          },
          "allergens_hierarchy" : {
            "items" : { }
          },
          "allergens_tags" : {
            "items" : { }
          },
          "ingredients" : {
            "description" : "This structure gives the different ingredients and some information about them,\nlike estimate on their quantity.\n",
            "items" : {
              "properties" : {
                "id" : { },
                "ingredients" : {
                  "description" : "Sub ingredients composing this ingredients.\n",
                  "items" : {
                    "properties" : {
                      "id" : { },
                      "ingredients" : {
                        "description" : "Sub ingredients composing this ingredients.\n",
                        "items" : {
                          "$ref" : "#/components/schemas/Ingredients/items"
                        }
                      },
                      "percent" : { },
                      "percent_estimate" : { },
                      "percent_max" : { },
                      "percent_min" : { },
                      "text" : { },
                      "vegan" : { },
                      "vegetarian" : { }
                    },
                    "title" : "ingredient"
                  }
                },
                "percent" : { },
                "percent_estimate" : { },
                "percent_max" : { },
                "percent_min" : { },
                "text" : { },
                "vegan" : { },
                "vegetarian" : { }
              },
              "title" : "ingredient"
            }
          },
          "ingredients_analysis" : {
            "properties" : {
              "en:palm-oil" : {
                "items" : { }
              },
              "en:vegan-status-unknown" : {
                "items" : { }
              },
              "en:vegetarian-status-unknown" : {
                "items" : { }
              }
            }
          },
          "ingredients_analysis_tags" : {
            "items" : { }
          },
          "ingredients_from_or_that_may_be_from_palm_oil_n" : { },
          "ingredients_from_palm_oil_n" : { },
          "ingredients_from_palm_oil_tags" : {
            "items" : { }
          },
          "ingredients_hierarchy" : {
            "items" : { }
          },
          "ingredients_n" : { },
          "ingredients_n_tags" : {
            "items" : { }
          },
          "ingredients_original_tags" : {
            "items" : { }
          },
          "ingredients_percent_analysis" : { },
          "ingredients_sweeteners_n" : {
            "description" : "Number of sweeteners additives in the ingredients. Undefined if ingredients are not specified.\n"
          },
          "ingredients_non_nutritive_sweeteners_n" : {
            "description" : "Number of non-nutritive sweeteners additives (as specified in the Nutri-Score formula) in the ingredients. Undefined if ingredients are not specified.\n"
          },
          "ingredients_tags" : {
            "items" : { }
          },
          "ingredients_lc" : {
            "description" : "Language that was used to parse the ingredient list. If `ingredients_text` is available\nfor the product main language (`lang`), `ingredients_lc=lang`, otherwise we look at\n`ingredients_text` fields for other languages and set `ingredients_lc` to the first\nnon-empty `ingredient_text`. \n"
          },
          "ingredients_text" : {
            "description" : "Raw list of ingredients. This will get automatically\nparsed and get used to compute the Eco-Score or find allergens, etc..\n\nIt's a copy of ingredients_text in the main language of the product (see `lang` proprety).\n"
          },
          "ingredients_text_with_allergens" : {
            "description" : "Same text as `ingredients_text` but where allergens have HTML elements around them to identify them\n"
          },
          "ingredients_that_may_be_from_palm_oil_n" : { },
          "ingredients_that_may_be_from_palm_oil_tags" : {
            "items" : { }
          },
          "ingredients_with_specified_percent_n" : { },
          "ingredients_with_specified_percent_sum" : { },
          "ingredients_with_unspecified_percent_n" : { },
          "ingredients_with_unspecified_percent_sum" : { },
          "known_ingredients_n" : { },
          "origins" : {
            "description" : "Origins of ingredients\n"
          },
          "origins_hierarchy" : {
            "items" : { }
          },
          "origins_lc" : { },
          "origins_tags" : {
            "items" : { }
          },
          "traces" : {
            "description" : "List of substances that might cause allergies\nthat are present in trace amounts in the product\n(this does not include the ingredients, as they\nare not only present in trace amounts).\nIt is taxonomized with the allergens taxonomy.\n"
          },
          "traces_hierarchy" : {
            "items" : { }
          },
          "traces_lc" : { },
          "traces_tags" : {
            "items" : { }
          },
          "unknown_ingredients_n" : { }
        },
        "title" : "product_ingredients"
      },
      "Product-Images" : {
        "description" : "Information about Images of a product.\n\nImages ensure the reliability of Open Food Facts data.\nIt provides a primary source and proof of all the structured data.\nYou may therefore want to display it along the structured information.\n\nSee also tutorials about images:\n* [Getting images](https://openfoodfacts.github.io/openfoodfacts-server/api/how-to-download-images/)\n* [Uploading images](https://openfoodfacts.github.io/openfoodfacts-server/api/tutorial-uploading-photo-to-a-product/)\n",
        "properties" : {
          "image_front_small_url" : { },
          "image_front_thumb_url" : { },
          "image_front_url" : { },
          "image_nutrition_small_url" : { },
          "image_nutrition_thumb_url" : { },
          "image_nutrition_url" : { },
          "image_small_url" : { },
          "image_thumb_url" : { },
          "image_url" : { },
          "images" : {
            "description" : "This contains properties for all images contained on the product.\n",
            "properties" : {
              "1" : {
                "description" : "This object represent an image that was uploaded to a product.\n\"imgid\" is an integer which is a sequential number unique to each picture.\n",
                "properties" : {
                  "sizes" : {
                    "description" : "The available image sizes for the product (both reduced and full). \nThe reduced images are the ones with numbers as the key( 100, 200 etc) \nwhile the full images have `full` as the key.\n",
                    "properties" : {
                      "full" : {
                        "description" : "properties of fullsize image\n**TODO** explain how to compute name\n",
                        "properties" : {
                          "h" : {
                            "description" : "The height of the reduced/full image in pixels.\n"
                          },
                          "w" : {
                            "description" : "The width of the reduced/full image in pixels."
                          }
                        }
                      }
                    }
                  },
                  "uploaded_t" : {
                    "description" : "The time the image was uploaded (as unix timestamp).\n"
                  },
                  "uploader" : {
                    "description" : "The contributor that uploaded the image.\n"
                  }
                },
                "title" : "image"
              },
              "front" : {
                "description" : "property of an image (or part thereof) selected for a particular role and a particular language.\n",
                "properties" : {
                  "angle" : {
                    "description" : "The angle of the image rotation (if it was rotated)."
                  },
                  "coordinates_image_size" : { },
                  "geometry" : { },
                  "imgid" : {
                    "description" : "The id of the original/source image that was selected to edit(rotate, normalize etc) to produce this new image."
                  },
                  "normalize" : {
                    "description" : "Normalize colors."
                  },
                  "rev" : { },
                  "sizes" : {
                    "description" : "The available image sizes for the product (both reduced and full). \nThe reduced images are the ones with numbers as the key( 100, 200 etc)\nwhile the full images have `full` as the key.\n",
                    "properties" : {
                      "100" : {
                        "properties" : {
                          "h" : {
                            "description" : "The height of the reduced/full image in pixels.\n"
                          },
                          "w" : {
                            "description" : "The width of the reduced/full image in pixels."
                          }
                        }
                      },
                      "200" : {
                        "properties" : {
                          "h" : {
                            "description" : "The height of the reduced/full image in pixels.\n"
                          },
                          "w" : {
                            "description" : "The width of the reduced/full image in pixels."
                          }
                        }
                      },
                      "400" : {
                        "properties" : {
                          "h" : {
                            "description" : "The height of the reduced/full image in pixels.\n"
                          },
                          "w" : {
                            "description" : "The width of the reduced/full image in pixels."
                          }
                        }
                      },
                      "full" : {
                        "properties" : {
                          "h" : {
                            "description" : "The height of the reduced/full image in pixels.\n"
                          },
                          "w" : {
                            "description" : "The width of the reduced/full image in pixels."
                          }
                        }
                      }
                    }
                  },
                  "white_magic" : {
                    "description" : "Photo on white background : Try to remove the background.\n"
                  },
                  "x1" : { },
                  "x2" : { },
                  "y1" : { },
                  "y2" : { }
                }
              }
            },
            "title" : "product_images"
          },
          "last_image_dates_tags" : {
            "items" : { }
          },
          "last_image_t" : { },
          "selected_images" : {
            "properties" : {
              "front" : {
                "description" : "URLs of thumbnails image of image of type `image_type`",
                "properties" : {
                  "display" : {
                    "description" : "Thumbnail urls of product image (front) adapted to display on product page\n"
                  },
                  "small" : {
                    "description" : "Thumbnail urls of product image (front) adapted to display on product list page\n"
                  },
                  "thumb" : {
                    "description" : "Thumbnail urls of product image (front) in smallest format\n"
                  }
                }
              }
            },
            "title" : "product_selected_images"
          }
        },
        "title" : "product_images"
      },
      "Product-Eco-Score" : {
        "description" : "Fields related to Eco-Score for a product.\n\nSee also: `ecoscore_score`, `ecoscore_grade` and `ecoscore_tags`.\n",
        "properties" : {
          "ecoscore_data" : {
            "description" : "An object about a lot of details about data needed for Eco-Score computation \nand complementary data of interest.\n",
            "properties" : {
              "adjustments" : {
                "properties" : {
                  "origins_of_ingredients" : {
                    "properties" : {
                      "aggregated_origins" : {
                        "items" : {
                          "properties" : {
                            "origin" : { },
                            "percent" : { }
                          },
                          "title" : "adjustments_origin_of_ingredient"
                        }
                      },
                      "epi_score" : { },
                      "epi_value" : { },
                      "origins_from_origins_field" : {
                        "items" : { }
                      },
                      "transportation_scores" : { },
                      "transportation_values" : { },
                      "values" : { },
                      "warning" : { }
                    }
                  },
                  "packaging" : {
                    "properties" : {
                      "non_recyclable_and_non_biodegradable_materials" : { },
                      "packagings" : {
                        "items" : {
                          "properties" : {
                            "ecoscore_material_score" : { },
                            "ecoscore_shape_ratio" : { },
                            "material" : { },
                            "shape" : { }
                          },
                          "title" : "adjustments_packaging_item"
                        }
                      },
                      "score" : { },
                      "value" : { },
                      "warning" : { }
                    }
                  },
                  "production_system" : {
                    "properties" : {
                      "labels" : {
                        "items" : { }
                      },
                      "value" : { },
                      "warning" : { }
                    }
                  },
                  "threatened_species" : {
                    "properties" : {
                      "ingredient" : { },
                      "value" : { }
                    }
                  }
                }
              },
              "agribalyse" : {
                "properties" : {
                  "agribalyse_food_code" : { },
                  "co2_agriculture" : { },
                  "co2_consumption" : { },
                  "co2_distribution" : { },
                  "co2_packaging" : { },
                  "co2_processing" : { },
                  "co2_total" : { },
                  "co2_transportation" : { },
                  "code" : { },
                  "dqr" : { },
                  "ef_agriculture" : { },
                  "ef_consumption" : { },
                  "ef_distribution" : { },
                  "ef_packaging" : { },
                  "ef_processing" : { },
                  "ef_total" : { },
                  "ef_transportation" : { },
                  "is_beverage" : { },
                  "name_en" : {
                    "description" : "This can be returned in many other languages\nlike name_fr (for french).\n"
                  },
                  "score" : { },
                  "version" : { }
                }
              },
              "grade" : { },
              "grades" : { },
              "missing" : {
                "properties" : {
                  "labels" : { },
                  "origins" : { },
                  "packagings" : { }
                }
              },
              "missing_data_warning" : { },
              "previous_data" : {
                "properties" : {
                  "grade" : { },
                  "score" : { },
                  "agribalyse" : {
                    "properties" : {
                      "agribalyse_food_code" : { },
                      "co2_agriculture" : { },
                      "co2_consumption" : { },
                      "co2_distribution" : { },
                      "co2_packaging" : { },
                      "co2_processing" : { },
                      "co2_total" : { },
                      "co2_transportation" : { },
                      "code" : { },
                      "dqr" : { },
                      "ef_agriculture" : { },
                      "ef_consumption" : { },
                      "ef_distribution" : { },
                      "ef_packaging" : { },
                      "ef_processing" : { },
                      "ef_total" : { },
                      "ef_transportation" : { },
                      "is_beverage" : { },
                      "name_en" : {
                        "description" : "This can be returned in many other languages\nlike name_fr (for french).\n"
                      },
                      "score" : { },
                      "version" : { }
                    }
                  }
                }
              },
              "score" : { },
              "scores" : { },
              "status" : { }
            },
            "title" : "ecoscore_data"
          },
          "ecoscore_extended_data_version" : { },
          "environment_impact_level" : { },
          "environment_impact_level_tags" : {
            "items" : { }
          }
        },
        "title" : "product_ecoscore"
      },
      "Product-Metadata" : {
        "description" : "Metadata of a product (author, editors, creation date, etc.)\n",
        "properties" : {
          "created_t" : {
            "description" : "Date when the product was added (UNIX timestamp format).\nSee also `entry_dates_tags`\n"
          },
          "creator" : {
            "description" : "The contributor who added the product first.\n"
          },
          "editors_tags" : {
            "description" : "List of editors who edited the product.\n",
            "items" : { }
          },
          "informers_tags" : {
            "items" : { }
          },
          "interface_version_created" : { },
          "interface_version_modified" : { },
          "languages" : { },
          "languages_codes" : {
            "description" : "Same as `languages` but by language code, instead of language tags\n"
          },
          "languages_hierarchy" : {
            "items" : { }
          },
          "languages_tags" : {
            "items" : { }
          },
          "last_edit_dates_tags" : {
            "items" : { }
          },
          "last_editor" : { },
          "last_modified_by" : {
            "description" : "The username of the user who last modified the product.\n"
          },
          "last_modified_t" : {
            "description" : "Date when the product page was last modified.\n"
          },
          "owner" : {
            "description" : "Id of the producer in case he provides his own data about a product (producer platform).\n"
          },
          "owners_tags" : {
            "description" : "Tagyfied version of owner\n"
          },
          "photographers_tags" : {
            "items" : { }
          },
          "rev" : {
            "description" : "revision number of this product version (each edit adds a revision)"
          },
          "sources" : {
            "items" : {
              "properties" : {
                "fields" : {
                  "items" : { }
                },
                "id" : { },
                "images" : {
                  "items" : { }
                },
                "import_t" : { },
                "manufacturer" : { },
                "name" : { },
                "source_licence" : { },
                "source_licence_url" : { },
                "url" : { }
              },
              "title" : "product_meta_source"
            }
          },
          "sources_fields" : {
            "properties" : {
              "org-gs1" : {
                "properties" : {
                  "gln" : { },
                  "gpcCategoryCode" : { },
                  "gpcCategoryName" : { },
                  "isAllergenRelevantDataProvided" : { },
                  "lastChangeDateTime" : { },
                  "partyName" : { },
                  "productionVariantDescription" : { },
                  "publicationDateTime" : { }
                }
              }
            },
            "title" : "product_meta_source_fields"
          },
          "teams" : { },
          "teams_tags" : {
            "items" : { }
          },
          "update_key" : { }
        }
      },
      "Product-Data-Quality" : {
        "description" : "This is data that is linked to products data quality\n",
        "properties" : {
          "data_quality_bugs_tags" : {
            "items" : { }
          },
          "data_quality_errors_tags" : {
            "items" : { }
          },
          "data_quality_info_tags" : {
            "items" : { }
          },
          "data_quality_tags" : {
            "items" : { }
          },
          "data_quality_warnings_tags" : {
            "items" : { }
          },
          "data_sources" : {
            "description" : "Source of data imported from producers.\n"
          },
          "data_sources_tags" : {
            "items" : { }
          },
          "last_check_dates_tags" : {
            "items" : { }
          },
          "last_checked_t" : { },
          "last_checker" : { },
          "states" : {
            "description" : "comma separated list of values indicating some states of the product,\nlike things to be done, or to be completed.\nSee [states taxonomy](https://static.openfoodfacts.net/data/taxonomies/states.json)\n"
          },
          "states_hierarchy" : {
            "items" : { }
          },
          "states_tags" : {
            "items" : {
              "description" : "Each state describe something that is completed or is to be done or improved on the product.\nRefer to [states taxonomy](https://static.openfoodfacts.net/data/taxonomies/states.json)"
            }
          },
          "misc_tags" : {
            "description" : "Information about different aspect of the product\n",
            "items" : { }
          }
        }
      },
      "Product-Knowledge-Panels" : {
        "description" : "Knowledge panels for a product\n",
        "properties" : {
          "knowledge_panels" : {
            "description" : "The panels object is a dictionary of individual panel objects.\nEach key of the dictionary is the id of the panel, and the value is the panel object.\n\nApps typically display a number of root panels with known panel ids (e.g. health_card and environment_card). Panels can reference other panels and display them as sub-panels.",
            "properties" : {
              "additionalProperties" : {
                "description" : "Each panel contains an optional title and an optional array of elements.",
                "properties" : {
                  "type" : {
                    "description" : "Type of the panel. If set to \"card\", the panel and its sub-panels should be displayed in a card. If set to \"inline\", the panel should have its content always displayed."
                  },
                  "expanded" : {
                    "description" : "If true, the panel is to be displayed already expanded. If false, only the title should be displayed, and the user should be able to click or tap it to open the panel and display the elements."
                  },
                  "expand_for" : {
                    "description" : "If set to \"large\", the content of the panel should be expanded on large screens, but it should still be possible to unexpand it."
                  },
                  "title_element" : {
                    "description" : "The title of a panel.",
                    "properties" : {
                      "title" : { },
                      "grade" : {
                        "description" : "Indicates that the panel corresponds to a A to E grade such as the Nutri-Score of the Eco-Score.",
                        "enum" : [ "a", "b", "c", "d", "e", "unknown" ]
                      },
                      "icon_url" : { },
                      "icon_color_from_evaluation" : { },
                      "icon_size" : {
                        "description" : "If set to \"small\", the icon should be displayed at a small size.\n"
                      },
                      "type" : {
                        "description" : "Used to indicate a special type for the title, such as \"grade\" for Nutri-Score and Eco-Score."
                      }
                    },
                    "title" : "title_element",
                    "x-stoplight" : {
                      "id" : "lox0wvl9bdgy2"
                    }
                  },
                  "elements" : {
                    "description" : "An ordered list of elements to display in the content of the panel.",
                    "items" : {
                      "description" : "Each element object contains one specific element object such as a text element or an image element.\n",
                      "properties" : {
                        "type" : {
                          "description" : "The type of the included element object.\nThe type also indicates which field contains the included element object.\ne.g. if the type is \"text\", the included element object will be in the \"text_element\" field.\n\nNote that in the future, new type of element may be added,\nso your code should ignore unrecognized types, and unknown properties.\n\nTODO: add Map type\n",
                          "enum" : [ "text", "image", "action", "panel", "panel_group", "table" ]
                        },
                        "text_element" : {
                          "description" : "A text in simple HTML format to display.\n\nFor some specific texts that correspond to a product field (e.g. a product name, the ingredients list of a product),the edit_field_* fields are used to indicate how to edit the field value.",
                          "properties" : {
                            "type" : {
                              "description" : "the type of text, might influence the way you display it.\n",
                              "enum" : [ "summary", "warning", "notes" ]
                            },
                            "html" : {
                              "description" : "Text to display in HTML format."
                            },
                            "language" : {
                              "description" : "Language of the text. The name of the language is returned in the language requested when making the API call. e.g. if the text is in Polish, and the requested language is French, the language field will contain \"Polonais\" (French for \"Polish\"). Only set for specific fields such as the list of ingredients of a product."
                            },
                            "lc" : {
                              "description" : "2 letter language code for the text. Only set for specific fields such as the list of ingredients of a product."
                            },
                            "edit_field_id" : {
                              "description" : "id of the field used to edit this text in the product edit API."
                            },
                            "edit_field_type" : {
                              "description" : "Type of the product field."
                            },
                            "edit_field_value" : {
                              "description" : "Current value of the product field. This may differ from the html field which can contain extra formating."
                            },
                            "source_url" : {
                              "description" : "Link to the source"
                            },
                            "source_text" : {
                              "description" : "name of the source"
                            },
                            "source_lc" : {
                              "description" : "Source locale name"
                            },
                            "source_language" : {
                              "description" : "Human readable source locale name"
                            }
                          },
                          "title" : "text_element",
                          "x-stoplight" : {
                            "id" : "vdwxlt73qnqfa"
                          }
                        },
                        "image_element" : {
                          "properties" : {
                            "url" : {
                              "description" : "full URL of the image"
                            },
                            "width" : {
                              "description" : "Width of the image.\n\nThis is just a suggestion coming from the server, \nthe client may choose to use its own dimensions for the image.\n"
                            },
                            "height" : {
                              "description" : "Height of the image.\n\nThis is just a suggestion coming from the server,\nthe client may choose to use its own dimensions for the image.\n"
                            },
                            "alt_text" : {
                              "description" : "Alt Text of the image."
                            }
                          },
                          "title" : "image_element",
                          "x-stoplight" : {
                            "id" : "k4v4kwt489q3j"
                          }
                        },
                        "action_element" : { },
                        "panel_element" : {
                          "description" : "Panels can include other panels as sub-panels using the panel_element.",
                          "properties" : {
                            "panel_id" : {
                              "description" : "The id of the panel to include. The id is the key of the panel in the panels object returned in the knowledge_panels field."
                            }
                          },
                          "title" : "panel_element",
                          "x-stoplight" : {
                            "id" : "ymx41elz4yrnj"
                          }
                        },
                        "panel_group_element" : {
                          "description" : "The panel group element is used to display an optional title followed by a number of sub-panels.",
                          "properties" : {
                            "title" : { },
                            "panel_ids" : {
                              "description" : "The ids of the panels to include. The ids are the keys of the panels in the panels object returned in the knowledge_panels field.",
                              "items" : { }
                            }
                          },
                          "title" : "panel_group_element",
                          "x-stoplight" : {
                            "id" : "b7emlfrgiuue2"
                          }
                        },
                        "table_element" : {
                          "description" : "Element to display a table.",
                          "properties" : {
                            "id" : {
                              "description" : "An id for the table."
                            },
                            "title" : {
                              "description" : "Title of the column.\n"
                            },
                            "rows" : { },
                            "columns" : {
                              "items" : {
                                "properties" : {
                                  "type" : { },
                                  "text" : { },
                                  "text_for_small_screens" : { },
                                  "style" : { },
                                  "column_group_id" : { },
                                  "shown_by_default" : { }
                                },
                                "title" : "table_column"
                              }
                            }
                          },
                          "title" : "table_element"
                        }
                      },
                      "required" : [ "type" ],
                      "title" : "element",
                      "x-stoplight" : {
                        "id" : "e2ybdrtmx0tme"
                      }
                    }
                  },
                  "level" : {
                    "description" : "a message level, as levels we use in log.\nIt might help theming the panel visualy\n"
                  },
                  "size" : {
                    "description" : "size is either empty (normal display) \nor small to indicate a panel that should have a smaller font size\n",
                    "enum" : [ "small" ]
                  },
                  "topics" : {
                    "items" : { }
                  }
                },
                "title" : "panel"
              }
            },
            "readOnly" : true,
            "title" : "panels"
          }
        }
      },
      "Product-Attribute-Groups" : {
        "description" : "Specific data about a product to enable personal ranking\n",
        "properties" : {
          "attribute_groups" : {
            "description" : "Each element is an attribute that can help compute a personal ranking for the product",
            "items" : {
              "properties" : {
                "id" : {
                  "description" : "Unique id of the attribute.\n\nIt will be use to match against preferences parameters.\n"
                },
                "status" : {
                  "description" : "wether we have the information to really compute this criteria or not.",
                  "enum" : [ "known", "unknown" ]
                },
                "title" : {
                  "description" : "A descriptive sentence about the situation of the product concerning attribute\n"
                },
                "match" : {
                  "description" : "a numeric value for the match,\ntelling how much the products ranks well for this particular attribute.\nThe higher the value, the better the match.\n",
                  "format" : "float",
                  "maximum" : 100,
                  "minimum" : 0
                },
                "grade" : {
                  "description" : "every attribute as a grade for a to e",
                  "enum" : [ "unknown", "a", "b", "c", "d", "e" ]
                },
                "name" : {
                  "description" : "The name of attribute, for eventual display"
                },
                "icon_url" : {
                  "description" : "an icon representing the attribute match (often using a color)"
                },
                "description" : {
                  "description" : "An eventual description of the value of the property upon which this attribute is based"
                },
                "description_short" : {
                  "description" : "An eventual short description of the value of the property upon which this attribute is based"
                }
              },
              "title" : "product_attribute_group"
            }
          }
        }
      },
      "Product" : {
        "allOf" : [ {
          "description" : "Base product data\n",
          "properties" : {
            "abbreviated_product_name" : {
              "description" : "Abbreviated name in requested language"
            },
            "code" : {
              "description" : "barcode of the product (can be EAN-13 or internal codes for some food stores),\nfor products without a barcode,\nOpen Food Facts assigns a number starting with the 200 reserved prefix\n"
            },
            "codes_tags" : {
              "items" : {
                "description" : "A value which is the type of barcode \"code-13\" or \"code-8\"\nand\nA series of mask for the barcode\nIt helps retrieve barcodes starting by\n"
              }
            },
            "generic_name" : {
              "description" : "Legal name of the product as regulated\nby the European authorities.\n"
            },
            "id" : {
              "description" : "internal identifier for the product, usually set to the value of `code`,\nexcept on the producers platform where it is prefixed by the owner\n"
            },
            "lc" : {
              "description" : "Main language of the product.\nThis is a duplicate of `lang` property (for historical reasons).\n"
            },
            "lang" : {
              "description" : "Main language of the product.\n\nThis should be the main language of product packaging (if one is predominant).\n\nMain language is also used to decide which ingredients list to parse.\n"
            },
            "nova_group" : {
              "description" : "Nova group as an integer from 1 to 4. See https://world.openfoodfacts.org/nova"
            },
            "nova_groups" : { },
            "obsolete" : { },
            "obsolete_since_date" : {
              "description" : "A date at which the product was declared obsolete.\nThis means it's not produced any more.\n"
            },
            "product_name" : {
              "description" : "The name of the product\n"
            },
            "product_name_en" : {
              "description" : "The name of the product can also\nbe in many other languages like\nproduct_name_fr (for French).\n"
            },
            "product_quantity" : {
              "description" : "The size in g or ml for the whole product.\nIt's a normalized version of the quantity field.\n"
            },
            "product_quantity_unit" : {
              "description" : "The unit (either g or ml) for the correponding product_quantity.\n"
            },
            "quantity" : {
              "description" : "Quantity and Unit.\n"
            }
          }
        }, {
          "description" : "Miscellaneous but important fields of a product\n",
          "properties" : {
            "additives_n" : {
              "description" : "Number of food additives.\n"
            },
            "checked" : { },
            "complete" : { },
            "completeness" : { },
            "ecoscore_grade" : {
              "description" : "See also: `ecoscore_tags`\n"
            },
            "ecoscore_score" : {
              "description" : "See also: `ecoscore_tags`\n"
            },
            "food_groups" : { },
            "food_groups_tags" : {
              "items" : { }
            },
            "nutrient_levels" : {
              "description" : "Traffic light indicators on main nutrients levels\n",
              "properties" : {
                "fat" : {
                  "enum" : [ "low", "moderate", "high" ]
                },
                "salt" : {
                  "enum" : [ "low", "moderate", "high" ]
                },
                "saturated-fat" : {
                  "enum" : [ "low", "moderate", "high" ]
                },
                "sugars" : {
                  "enum" : [ "low", "moderate", "high" ]
                }
              }
            },
            "packaging_text" : {
              "description" : "Recycling instructions as raw text, e.g. Plastic\nbottle to recycle, Plastic cap to recycle.\nThis will get automatically parsed and\nwill be used to compute the Eco-Score.\nYou can either request it (if it exists) or\nsend it in a specific language.\n"
            },
            "packagings" : {
              "description" : "The packagings object is an array of individual packaging component objects.\n\nThe Packaging data document explains how packaging data is structured in Open Food Facts: https://openfoodfacts.github.io/openfoodfacts-server/dev/explain-packaging-data/\n\nThe shape, material and recycling properties of each packaging component are linked to entries in the packaging_shapes, packaging_materials and packaging_recycling taxonomies:\n\nhttps://world.openfoodfacts.org/data/taxonomies/packaging_shapes.json\nhttps://world.openfoodfacts.org/data/taxonomies/packaging_materials.json\nhttps://world.openfoodfacts.org/data/taxonomies/packaging_recycling.json\n\nIf the tags_lc field is set, the properties will include a lc_name field with the translation in the requested language.",
              "items" : {
                "description" : "Each packaging component has different properties to specify how many there are, its shape, material etc.\n\nThe shape, material and recycling properties are mapped to one entry in the packaging_shapes, packaging_materials and packaging_recycling taxonomies, and the value of the property is the canonical name of the taxonomy entry (e.g. en:bottle).\n\nThey may contain values that could not yet get matched to their respective taxonomy, in which case they will contain a free text value prefixed with the language code of this text value (e.g. \"fr:Bouteille sphérique\" might have been entered by a French user to indicate it is a spherical bottle).",
                "properties" : {
                  "number_of_units" : {
                    "description" : "umber of units of this packaging component contained in the product (e.g. 6 for a pack of 6 bottles)"
                  },
                  "shape" : {
                    "description" : "The shape property is canonicalized using the packaging_shapes taxonomy.",
                    "properties" : {
                      "id" : {
                        "description" : "Canonical id of the entry in the taxonomy. If the value cannot be mapped to a taxonomy entry, the value will be the name of the entry in its original language prefixed by the language 2 letter code and a colon."
                      },
                      "lc_name" : {
                        "description" : "Name of the entry in the language requested in the tags_lc field of the request. This field is returned only of tags_lc is specified. If the translation is not available, or if the entry does not exist in the taxonomy, the value will be the name of the entry in its original language prefixed by the language 2 letter code and a colon."
                      }
                    },
                    "title" : "Packaging component shape",
                    "x-stoplight" : {
                      "id" : "xrj8agza3dwgf"
                    }
                  },
                  "material" : {
                    "description" : "The material property is canonicalized using the packaging_materials taxonomy.",
                    "properties" : {
                      "id" : {
                        "description" : "Canonical id of the entry in the taxonomy. If the value cannot be mapped to a taxonomy entry, the value will be the name of the entry in its original language prefixed by the language 2 letter code and a colon."
                      },
                      "lc_name" : {
                        "description" : "Name of the entry in the language requested in the tags_lc field of the request. This field is returned only of tags_lc is specified. If the translation is not available, or if the entry does not exist in the taxonomy, the value will be the name of the entry in its original language prefixed by the language 2 letter code and a colon."
                      }
                    },
                    "title" : "Packaging component material",
                    "x-stoplight" : {
                      "id" : "n6umazgqmwrd5"
                    }
                  },
                  "recycling" : {
                    "description" : "The recycling property is canonicalized using the packaging_recycling taxonomy.",
                    "properties" : {
                      "id" : {
                        "description" : "Canonical id of the entry in the taxonomy. If the value cannot be mapped to a taxonomy entry, the value will be the name of the entry in its original language prefixed by the language 2 letter code and a colon."
                      },
                      "lc_name" : {
                        "description" : "Name of the entry in the language requested in the tags_lc field of the request. This field is returned only of tags_lc is specified. If the translation is not available, or if the entry does not exist in the taxonomy, the value will be the name of the entry in its original language prefixed by the language 2 letter code and a colon."
                      }
                    },
                    "title" : "Packaging component recycling instruction",
                    "x-stoplight" : {
                      "id" : "376tk8e2cmyh2"
                    }
                  },
                  "quantity_per_unit" : {
                    "description" : "Quantity (weight or volume) of food product contained in the packaging component. (e.g. 75cl for a wine bottle)"
                  },
                  "quantity_per_unit_value" : {
                    "description" : "Value parsed from the quantity field."
                  },
                  "quantity_per_unit_unit" : {
                    "description" : "Unit parsed and normalized from the quantity field."
                  },
                  "weight_specified" : {
                    "description" : "Weight (as specified by the manufacturer) of one unit of the empty packaging component (in grams). (e.g. for a 6 pack of 1.5l water bottles, it might be 30, the weight in grams of 1 empty water bottle without its cap which is a different packaging component)."
                  },
                  "weight_measured" : {
                    "description" : "Weight (as measured by one or more users) of one unit of the empty packaging component (in grams). (e.g. for a 6 pack of 1.5l water bottles, it might be 30, the weight in grams of 1 empty water bottle without its cap which is a different packaging component)."
                  },
                  "weight_estimated" : {
                    "description" : "Weight (as estimated from similar products) of one unit of the empty packaging component (in grams). (e.g. for a 6 pack of 1.5l water bottles, it might be 30, the weight in grams of 1 empty water bottle without its cap which is a different packaging component)."
                  },
                  "weight" : {
                    "description" : "Weight of one unit of the empty packaging component."
                  },
                  "weight_source_id" : {
                    "description" : "Indicates which field was used to populate the \"weight\" field. Either \"specified\", \"measured\", or \"estimated\""
                  }
                },
                "title" : "Packaging component (READ)"
              },
              "readOnly" : true,
              "title" : "Packagings (READ)"
            },
            "packagings_complete" : {
              "description" : "Indicate if the packagings array contains all the packaging parts of the product. This field can be set by users when they enter or verify packaging data. Possible values are 0 or 1.",
              "maximum" : 1,
              "minimum" : 0,
              "title" : "packagings_complete"
            },
            "pnns_groups_1" : {
              "description" : "Category of food according to [French Nutrition and Health Program](https://fr.wikipedia.org/wiki/Programme_national_nutrition_sant%C3%A9)\n"
            },
            "pnns_groups_1_tags" : {
              "items" : { }
            },
            "pnns_groups_2" : {
              "description" : "Sub Category of food according to [French Nutrition and Health Program](https://fr.wikipedia.org/wiki/Programme_national_nutrition_sant%C3%A9)\n"
            },
            "pnns_groups_2_tags" : {
              "items" : { }
            },
            "popularity_key" : { },
            "popularity_tags" : {
              "items" : { }
            },
            "scans_n" : { },
            "unique_scans_n" : { },
            "serving_quantity" : {
              "description" : "Normalized version of serving_size.\nNote that this is NOT the number of servings by product.\n<small>(in perl, see `normalize_serving_size`)</small>\n"
            },
            "serving_quantity_unit" : {
              "description" : "The unit (either g or ml) for the correponding serving_quantity.\n"
            },
            "serving_size" : {
              "description" : "Serving size text (generally in g or ml).\nWe expect a quantity + unit but the user is free to input any string.\n"
            }
          },
          "title" : "product_misc"
        }, {
          "description" : "Data about a product which is represented as tags\n",
          "properties" : {
            "brands" : {
              "description" : "List of brands (not taxonomized)"
            },
            "brands_tags" : {
              "items" : {
                "description" : "List of brands (tags, not taxonomized)"
              }
            },
            "categories" : { },
            "categories_hierarchy" : {
              "items" : { }
            },
            "categories_lc" : {
              "description" : "Categories language code"
            },
            "categories_tags" : {
              "items" : { }
            },
            "checkers_tags" : {
              "items" : {
                "description" : "List of checkers (users who checked the product) tags"
              }
            },
            "cities" : { },
            "cities_tags" : {
              "items" : { }
            },
            "correctors_tags" : {
              "items" : { }
            },
            "countries" : {
              "description" : "List of countries where the product is sold.\n"
            },
            "countries_hierarchy" : {
              "items" : { }
            },
            "countries_lc" : {
              "description" : "Countries language code"
            },
            "countries_tags" : {
              "items" : { }
            },
            "ecoscore_tags" : {
              "description" : "All ecoscore of a product.\nMost of the time it's only one value,\nbut it might eventually be more for products composed of sub-products.\nSee also: `ecoscore_score`, `ecoscore_grade`.\n",
              "items" : { }
            },
            "emb_codes" : {
              "description" : "Packager code. EMB is the French system of traceability codes for packager.\n"
            },
            "emb_codes_orig" : { },
            "emb_codes_tags" : {
              "items" : { }
            },
            "labels" : { },
            "labels_hierarchy" : {
              "items" : { }
            },
            "labels_lc" : { },
            "labels_tags" : {
              "items" : { }
            },
            "entry_dates_tags" : {
              "description" : "The data as a series of tag: `yyyy-mm-dd`, `yyyy-mm`, `yyyy`\n",
              "items" : { }
            },
            "manufacturing_places" : {
              "description" : "Places where the product was manufactured or transformed.\n"
            },
            "manufacturing_places_tags" : {
              "items" : { }
            },
            "nova_groups_tags" : {
              "items" : { }
            },
            "nutrient_levels_tags" : {
              "items" : { }
            }
          }
        }, {
          "description" : "Information about Images of a product.\n\nImages ensure the reliability of Open Food Facts data.\nIt provides a primary source and proof of all the structured data.\nYou may therefore want to display it along the structured information.\n\nSee also tutorials about images:\n* [Getting images](https://openfoodfacts.github.io/openfoodfacts-server/api/how-to-download-images/)\n* [Uploading images](https://openfoodfacts.github.io/openfoodfacts-server/api/tutorial-uploading-photo-to-a-product/)\n",
          "properties" : {
            "image_front_small_url" : { },
            "image_front_thumb_url" : { },
            "image_front_url" : { },
            "image_nutrition_small_url" : { },
            "image_nutrition_thumb_url" : { },
            "image_nutrition_url" : { },
            "image_small_url" : { },
            "image_thumb_url" : { },
            "image_url" : { },
            "images" : {
              "description" : "This contains properties for all images contained on the product.\n",
              "properties" : {
                "1" : {
                  "description" : "This object represent an image that was uploaded to a product.\n\"imgid\" is an integer which is a sequential number unique to each picture.\n",
                  "properties" : {
                    "sizes" : {
                      "description" : "The available image sizes for the product (both reduced and full). \nThe reduced images are the ones with numbers as the key( 100, 200 etc) \nwhile the full images have `full` as the key.\n",
                      "properties" : {
                        "full" : {
                          "description" : "properties of fullsize image\n**TODO** explain how to compute name\n",
                          "properties" : {
                            "h" : {
                              "description" : "The height of the reduced/full image in pixels.\n"
                            },
                            "w" : {
                              "description" : "The width of the reduced/full image in pixels."
                            }
                          }
                        }
                      }
                    },
                    "uploaded_t" : {
                      "description" : "The time the image was uploaded (as unix timestamp).\n"
                    },
                    "uploader" : {
                      "description" : "The contributor that uploaded the image.\n"
                    }
                  },
                  "title" : "image"
                },
                "front" : {
                  "description" : "property of an image (or part thereof) selected for a particular role and a particular language.\n",
                  "properties" : {
                    "angle" : {
                      "description" : "The angle of the image rotation (if it was rotated)."
                    },
                    "coordinates_image_size" : { },
                    "geometry" : { },
                    "imgid" : {
                      "description" : "The id of the original/source image that was selected to edit(rotate, normalize etc) to produce this new image."
                    },
                    "normalize" : {
                      "description" : "Normalize colors."
                    },
                    "rev" : { },
                    "sizes" : {
                      "description" : "The available image sizes for the product (both reduced and full). \nThe reduced images are the ones with numbers as the key( 100, 200 etc)\nwhile the full images have `full` as the key.\n",
                      "properties" : {
                        "100" : {
                          "properties" : {
                            "h" : {
                              "description" : "The height of the reduced/full image in pixels.\n"
                            },
                            "w" : {
                              "description" : "The width of the reduced/full image in pixels."
                            }
                          }
                        },
                        "200" : {
                          "properties" : {
                            "h" : {
                              "description" : "The height of the reduced/full image in pixels.\n"
                            },
                            "w" : {
                              "description" : "The width of the reduced/full image in pixels."
                            }
                          }
                        },
                        "400" : {
                          "properties" : {
                            "h" : {
                              "description" : "The height of the reduced/full image in pixels.\n"
                            },
                            "w" : {
                              "description" : "The width of the reduced/full image in pixels."
                            }
                          }
                        },
                        "full" : {
                          "properties" : {
                            "h" : {
                              "description" : "The height of the reduced/full image in pixels.\n"
                            },
                            "w" : {
                              "description" : "The width of the reduced/full image in pixels."
                            }
                          }
                        }
                      }
                    },
                    "white_magic" : {
                      "description" : "Photo on white background : Try to remove the background.\n"
                    },
                    "x1" : { },
                    "x2" : { },
                    "y1" : { },
                    "y2" : { }
                  }
                }
              },
              "title" : "product_images"
            },
            "last_image_dates_tags" : {
              "items" : { }
            },
            "last_image_t" : { },
            "selected_images" : {
              "properties" : {
                "front" : {
                  "description" : "URLs of thumbnails image of image of type `image_type`",
                  "properties" : {
                    "display" : {
                      "description" : "Thumbnail urls of product image (front) adapted to display on product page\n"
                    },
                    "small" : {
                      "description" : "Thumbnail urls of product image (front) adapted to display on product list page\n"
                    },
                    "thumb" : {
                      "description" : "Thumbnail urls of product image (front) in smallest format\n"
                    }
                  }
                }
              },
              "title" : "product_selected_images"
            }
          },
          "title" : "product_images"
        }, {
          "description" : "Fields related to Eco-Score for a product.\n\nSee also: `ecoscore_score`, `ecoscore_grade` and `ecoscore_tags`.\n",
          "properties" : {
            "ecoscore_data" : {
              "description" : "An object about a lot of details about data needed for Eco-Score computation \nand complementary data of interest.\n",
              "properties" : {
                "adjustments" : {
                  "properties" : {
                    "origins_of_ingredients" : {
                      "properties" : {
                        "aggregated_origins" : {
                          "items" : {
                            "properties" : {
                              "origin" : { },
                              "percent" : { }
                            },
                            "title" : "adjustments_origin_of_ingredient"
                          }
                        },
                        "epi_score" : { },
                        "epi_value" : { },
                        "origins_from_origins_field" : {
                          "items" : { }
                        },
                        "transportation_scores" : { },
                        "transportation_values" : { },
                        "values" : { },
                        "warning" : { }
                      }
                    },
                    "packaging" : {
                      "properties" : {
                        "non_recyclable_and_non_biodegradable_materials" : { },
                        "packagings" : {
                          "items" : {
                            "properties" : {
                              "ecoscore_material_score" : { },
                              "ecoscore_shape_ratio" : { },
                              "material" : { },
                              "shape" : { }
                            },
                            "title" : "adjustments_packaging_item"
                          }
                        },
                        "score" : { },
                        "value" : { },
                        "warning" : { }
                      }
                    },
                    "production_system" : {
                      "properties" : {
                        "labels" : {
                          "items" : { }
                        },
                        "value" : { },
                        "warning" : { }
                      }
                    },
                    "threatened_species" : {
                      "properties" : {
                        "ingredient" : { },
                        "value" : { }
                      }
                    }
                  }
                },
                "agribalyse" : {
                  "properties" : {
                    "agribalyse_food_code" : { },
                    "co2_agriculture" : { },
                    "co2_consumption" : { },
                    "co2_distribution" : { },
                    "co2_packaging" : { },
                    "co2_processing" : { },
                    "co2_total" : { },
                    "co2_transportation" : { },
                    "code" : { },
                    "dqr" : { },
                    "ef_agriculture" : { },
                    "ef_consumption" : { },
                    "ef_distribution" : { },
                    "ef_packaging" : { },
                    "ef_processing" : { },
                    "ef_total" : { },
                    "ef_transportation" : { },
                    "is_beverage" : { },
                    "name_en" : {
                      "description" : "This can be returned in many other languages\nlike name_fr (for french).\n"
                    },
                    "score" : { },
                    "version" : { }
                  }
                },
                "grade" : { },
                "grades" : { },
                "missing" : {
                  "properties" : {
                    "labels" : { },
                    "origins" : { },
                    "packagings" : { }
                  }
                },
                "missing_data_warning" : { },
                "previous_data" : {
                  "properties" : {
                    "grade" : { },
                    "score" : { },
                    "agribalyse" : {
                      "properties" : {
                        "agribalyse_food_code" : { },
                        "co2_agriculture" : { },
                        "co2_consumption" : { },
                        "co2_distribution" : { },
                        "co2_packaging" : { },
                        "co2_processing" : { },
                        "co2_total" : { },
                        "co2_transportation" : { },
                        "code" : { },
                        "dqr" : { },
                        "ef_agriculture" : { },
                        "ef_consumption" : { },
                        "ef_distribution" : { },
                        "ef_packaging" : { },
                        "ef_processing" : { },
                        "ef_total" : { },
                        "ef_transportation" : { },
                        "is_beverage" : { },
                        "name_en" : {
                          "description" : "This can be returned in many other languages\nlike name_fr (for french).\n"
                        },
                        "score" : { },
                        "version" : { }
                      }
                    }
                  }
                },
                "score" : { },
                "scores" : { },
                "status" : { }
              },
              "title" : "ecoscore_data"
            },
            "ecoscore_extended_data_version" : { },
            "environment_impact_level" : { },
            "environment_impact_level_tags" : {
              "items" : { }
            }
          },
          "title" : "product_ecoscore"
        }, {
          "description" : "Fields about ingredients of a product",
          "properties" : {
            "additives_tags" : {
              "items" : { }
            },
            "allergens" : {
              "description" : "comma separated list of allergens"
            },
            "allergens_lc" : {
              "description" : "language in which `allergens` where input"
            },
            "allergens_hierarchy" : {
              "items" : { }
            },
            "allergens_tags" : {
              "items" : { }
            },
            "ingredients" : {
              "description" : "This structure gives the different ingredients and some information about them,\nlike estimate on their quantity.\n",
              "items" : {
                "properties" : {
                  "id" : { },
                  "ingredients" : {
                    "description" : "Sub ingredients composing this ingredients.\n",
                    "items" : {
                      "properties" : {
                        "id" : { },
                        "ingredients" : {
                          "description" : "Sub ingredients composing this ingredients.\n",
                          "items" : {
                            "$ref" : "#/components/schemas/Ingredients/items"
                          }
                        },
                        "percent" : { },
                        "percent_estimate" : { },
                        "percent_max" : { },
                        "percent_min" : { },
                        "text" : { },
                        "vegan" : { },
                        "vegetarian" : { }
                      },
                      "title" : "ingredient"
                    }
                  },
                  "percent" : { },
                  "percent_estimate" : { },
                  "percent_max" : { },
                  "percent_min" : { },
                  "text" : { },
                  "vegan" : { },
                  "vegetarian" : { }
                },
                "title" : "ingredient"
              }
            },
            "ingredients_analysis" : {
              "properties" : {
                "en:palm-oil" : {
                  "items" : { }
                },
                "en:vegan-status-unknown" : {
                  "items" : { }
                },
                "en:vegetarian-status-unknown" : {
                  "items" : { }
                }
              }
            },
            "ingredients_analysis_tags" : {
              "items" : { }
            },
            "ingredients_from_or_that_may_be_from_palm_oil_n" : { },
            "ingredients_from_palm_oil_n" : { },
            "ingredients_from_palm_oil_tags" : {
              "items" : { }
            },
            "ingredients_hierarchy" : {
              "items" : { }
            },
            "ingredients_n" : { },
            "ingredients_n_tags" : {
              "items" : { }
            },
            "ingredients_original_tags" : {
              "items" : { }
            },
            "ingredients_percent_analysis" : { },
            "ingredients_sweeteners_n" : {
              "description" : "Number of sweeteners additives in the ingredients. Undefined if ingredients are not specified.\n"
            },
            "ingredients_non_nutritive_sweeteners_n" : {
              "description" : "Number of non-nutritive sweeteners additives (as specified in the Nutri-Score formula) in the ingredients. Undefined if ingredients are not specified.\n"
            },
            "ingredients_tags" : {
              "items" : { }
            },
            "ingredients_lc" : {
              "description" : "Language that was used to parse the ingredient list. If `ingredients_text` is available\nfor the product main language (`lang`), `ingredients_lc=lang`, otherwise we look at\n`ingredients_text` fields for other languages and set `ingredients_lc` to the first\nnon-empty `ingredient_text`. \n"
            },
            "ingredients_text" : {
              "description" : "Raw list of ingredients. This will get automatically\nparsed and get used to compute the Eco-Score or find allergens, etc..\n\nIt's a copy of ingredients_text in the main language of the product (see `lang` proprety).\n"
            },
            "ingredients_text_with_allergens" : {
              "description" : "Same text as `ingredients_text` but where allergens have HTML elements around them to identify them\n"
            },
            "ingredients_that_may_be_from_palm_oil_n" : { },
            "ingredients_that_may_be_from_palm_oil_tags" : {
              "items" : { }
            },
            "ingredients_with_specified_percent_n" : { },
            "ingredients_with_specified_percent_sum" : { },
            "ingredients_with_unspecified_percent_n" : { },
            "ingredients_with_unspecified_percent_sum" : { },
            "known_ingredients_n" : { },
            "origins" : {
              "description" : "Origins of ingredients\n"
            },
            "origins_hierarchy" : {
              "items" : { }
            },
            "origins_lc" : { },
            "origins_tags" : {
              "items" : { }
            },
            "traces" : {
              "description" : "List of substances that might cause allergies\nthat are present in trace amounts in the product\n(this does not include the ingredients, as they\nare not only present in trace amounts).\nIt is taxonomized with the allergens taxonomy.\n"
            },
            "traces_hierarchy" : {
              "items" : { }
            },
            "traces_lc" : { },
            "traces_tags" : {
              "items" : { }
            },
            "unknown_ingredients_n" : { }
          },
          "title" : "product_ingredients"
        }, {
          "description" : "Nutrition fields of a product\n\nMost of these properties are read-only.\n\nSee [how to add nutrition data](https://openfoodfacts.github.io/openfoodfacts-server/api/ref-cheatsheet/#add-nutrition-facts-values-units-and-base)\n",
          "properties" : {
            "no_nutrition_data" : {
              "description" : "When a product does not have nutrition data displayed on the\npackaging, the user can check the field \"Nutrition facts are\nnot specified on the product\".\nBy doing so, the no_nutrition_data field takes the value \"on\".\nThis case is frequent (thousands of products).\n"
            },
            "nutrition_data_per" : {
              "description" : "The nutrition data on the package can be per serving or per 100g.\n\nThis is essential to understand if `<nutrient>_value` and `<nutrient>`\nvalues in `nutriments` applies for a serving or for 100g.\n\n**IMPORTANT:**\nWhen writing products,\nthis setting applies to all existing nutrients values for the product,\nnot only the nutrient values sent in the write request.\nSo it should not be changed unless all nutrients values are provided\nwith values that match the nutrition_data_per field.\n",
              "enum" : [ "serving", "100g" ]
            },
            "nutrition_data_prepared_per" : {
              "description" : "The nutrition data for prepared product on the package (if any) can be per serving or per 100g.\n\nThis is essential to understand if `<nutrient>_prepared_value` and `<nutrient>_prepared`\nvalues in `nutriments` applies for a serving or for 100g.\n\nSee also important note on `nutrition_data_per`.\n",
              "enum" : [ "serving", "100g" ]
            },
            "nutriments" : {
              "description" : "All known nutrients for the product.\n\nNote that each nutrients are declined with a variety of suffixes like `_100g`, `_serving`,\nsee patternProperties below.\n\nA specific `_unit` is the unit used to measure the nutrient.\n\nBeware that some properties are to be interpreted based upon `nutrition_data_per` value.\n\nAlso for products that have a nutrition table for prepared product\n(eg. the nutrition facts for a bowl of milk with cocoa powder),\na `_prepared` suffix is added (before other suffixes).\n\nYou can get all possible nutrients from the\n[nutrients taxonomy](https://static.openfoodfacts.org/data/taxonomies/nutrients.json)\n\n**FIXME** add more nutrients with description.\n",
              "properties" : {
                "alcohol" : {
                  "description" : "Quantity of alcohol\n\n(per 100g or per serving) in a standard unit (g or ml)\n"
                },
                "carbohydrates" : { },
                "energy" : {
                  "description" : "It is the same as `energy-kj` if we have it, or computed from `energy-kcal` otherwise\n\n(per 100g or per serving) in kj\n"
                },
                "energy_value" : {
                  "description" : "energy_value will be equal to energy-kj_value if we have it or to energy-kcal_value otherwise\n"
                },
                "energy_unit" : {
                  "description" : "Equal to energy-kj_unit if we have it or to energy-kcal_unit otherwise\n",
                  "enum" : [ "kcal", "kj" ]
                },
                "energy-kcal" : {
                  "description" : "energy in kcal, if it is specified\n\n(per 100g or per serving) in a standard unit (g or ml)\n"
                },
                "energy-kj" : {
                  "description" : "energy in kj, if it is specified\n\n(per 100g or per serving) in a standard unit (g or ml)\n"
                },
                "fat" : { },
                "fruits-vegetables-legumes-estimate-from-ingredients" : {
                  "description" : "An estimate, from the ingredients list of the percentage of fruits, vegetable and legumes.\nThis is an important information for Nutri-Score (2023 version) computation.\n"
                },
                "fruits-vegetables-nuts-estimate-from-ingredients" : {
                  "description" : "An estimate, from the ingredients list of the percentage of fruits, vegetable and nuts.\nThis is an important information for Nutri-Score (2021 version) computation.\n"
                },
                "nova-group" : { },
                "nutrition-score-fr" : {
                  "description" : "Experimental nutrition score derived from\nthe UK FSA score and adapted for the French market\n(formula defined by the team of Professor Hercberg).\n"
                },
                "proteins" : { },
                "salt" : { },
                "saturated-fat" : { },
                "sodium" : { },
                "sugars" : { },
                "carbon-footprint-from-known-ingredients_product" : { },
                "carbon-footprint-from-known-ingredients_serving" : { },
                "erythritol" : {
                  "description" : "erythritol is a polyol which is not providing any energy.\nAs such, it needs not be taken into account when computing\nthe energy of a product. Eryhtritol is now displayed on\nnutrition facts sheet of some products, mainly in the USA.\nThis value is entered either by contributors, either by\nimports.\n"
                }
              }
            },
            "nutriscore_data" : {
              "description" : "Detail of data the Nutri-Score was computed upon.\n\n**Note**: this might not be stable, don't rely too much on this, or, at least, tell us !\n\n**TODO** document each property\n",
              "properties" : {
                "energy" : { },
                "energy_points" : { },
                "energy_value" : { },
                "fiber" : { },
                "fiber_points" : { },
                "fiber_value" : { },
                "fruits_vegetables_nuts_colza_walnut_olive_oils" : { },
                "fruits_vegetables_nuts_colza_walnut_olive_oils_points" : { },
                "fruits_vegetables_nuts_colza_walnut_olive_oils_value" : { },
                "grade" : { },
                "is_beverage" : { },
                "is_cheese" : { },
                "is_fat" : { },
                "is_water" : { },
                "negative_points" : { },
                "positive_points" : { },
                "proteins" : { },
                "proteins_points" : { },
                "proteins_value" : { },
                "saturated_fat" : { },
                "saturated_fat_points" : { },
                "saturated_fat_ratio" : { },
                "saturated_fat_ratio_points" : { },
                "saturated_fat_ratio_value" : { },
                "saturated_fat_value" : { },
                "score" : { },
                "sodium" : { },
                "sodium_points" : { },
                "sodium_value" : { },
                "sugars" : { },
                "sugars_points" : { },
                "sugars_value" : { }
              }
            },
            "nutriscore_grade" : {
              "description" : "Nutri-Score for the product as a letter.\n\nSee https://world.openfoodfacts.org/nutriscore.\n",
              "enum" : [ "a", "b", "c", "d", "e" ]
            },
            "nutriscore_score" : {
              "description" : "Nutri-Score for the product as an integer (see also `nutriscore_grade`).\n"
            },
            "nutriscore_score_opposite" : { },
            "nutrition_grade_fr" : {
              "description" : "Nutrition grade (‘a’ to ‘e’),\nhttps://world.openfoodfacts.org/nutriscore.\n"
            },
            "nutrition_grades" : {
              "description" : "Nutrition grades as a comma separated list.\n\nSome products with multiple components might have multiple Nutri-Score\n"
            },
            "nutrition_grades_tags" : {
              "items" : { }
            },
            "nutrition_score_beverage" : { },
            "nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients" : { },
            "nutrition_score_warning_fruits_vegetables_nuts_estimate_from_ingredients_value" : { },
            "nutrition_score_warning_no_fiber" : { },
            "other_nutritional_substances_tags" : {
              "items" : { }
            },
            "unknown_nutrients_tags" : {
              "items" : { }
            },
            "vitamins_tags" : {
              "items" : { }
            }
          },
          "title" : "product_nutrition"
        }, {
          "description" : "This is data that is linked to products data quality\n",
          "properties" : {
            "data_quality_bugs_tags" : {
              "items" : { }
            },
            "data_quality_errors_tags" : {
              "items" : { }
            },
            "data_quality_info_tags" : {
              "items" : { }
            },
            "data_quality_tags" : {
              "items" : { }
            },
            "data_quality_warnings_tags" : {
              "items" : { }
            },
            "data_sources" : {
              "description" : "Source of data imported from producers.\n"
            },
            "data_sources_tags" : {
              "items" : { }
            },
            "last_check_dates_tags" : {
              "items" : { }
            },
            "last_checked_t" : { },
            "last_checker" : { },
            "states" : {
              "description" : "comma separated list of values indicating some states of the product,\nlike things to be done, or to be completed.\nSee [states taxonomy](https://static.openfoodfacts.net/data/taxonomies/states.json)\n"
            },
            "states_hierarchy" : {
              "items" : { }
            },
            "states_tags" : {
              "items" : {
                "description" : "Each state describe something that is completed or is to be done or improved on the product.\nRefer to [states taxonomy](https://static.openfoodfacts.net/data/taxonomies/states.json)"
              }
            },
            "misc_tags" : {
              "description" : "Information about different aspect of the product\n",
              "items" : { }
            }
          }
        }, {
          "properties" : {
            "additives_original_tags" : {
              "items" : { }
            },
            "additives_prev_original_tags" : {
              "items" : { }
            },
            "added_countries_tags" : {
              "items" : { }
            },
            "allergens_from_ingredients" : { },
            "allergens_from_user" : { },
            "amino_acids_prev_tags" : {
              "items" : { }
            },
            "amino_acids_tags" : {
              "items" : { }
            },
            "carbon_footprint_percent_of_known_ingredients" : { },
            "categories_properties" : {
              "properties" : {
                "agribalyse_food_code:en" : { },
                "agribalyse_proxy_food_code:en" : { },
                "ciqual_food_code:en" : { }
              }
            },
            "categories_properties_tags" : {
              "items" : { }
            },
            "category_properties" : {
              "additionalProperties" : {
                "description" : "those are properties taken from the category taxonomy"
              }
            },
            "ciqual_food_name_tags" : {
              "items" : { }
            },
            "compared_to_category" : {
              "description" : "the category to use for comparison.\n\n**TODO** explain how it is chosen.\n"
            },
            "conservation_conditions" : { },
            "customer_service" : {
              "description" : "Contact info of customer service.\n"
            },
            "expiration_date" : { },
            "link" : {
              "description" : "link to the product on the website of the producer\n"
            },
            "main_countries_tags" : {
              "items" : { }
            },
            "minerals_prev_tags" : {
              "items" : { }
            },
            "minerals_tags" : {
              "items" : { }
            },
            "owner_fields" : {
              "description" : "Those are fields provided by the producer (through producers platform),\nand the value he provided.\n",
              "properties" : {
                "additionalProperties" : {
                  "description" : "you can retrieve all kind of properties, the same as on the parent object (the product).\nIt's not processed entries (like tags for example) but raw ones.\n",
                  "oneOf" : [ { }, { }, { } ]
                }
              }
            },
            "nova_groups_markers" : {
              "description" : "Detail of ingredients or processing that makes the products having Nova 3 or 4\n",
              "properties" : {
                "3" : {
                  "description" : "Markers of level 3\n",
                  "items" : {
                    "description" : "This array has two element for each marker.\nOne\n",
                    "items" : { }
                  }
                },
                "4" : {
                  "description" : "Markers of level 4\n",
                  "items" : {
                    "description" : "This array has two element for each marker.\nOne\n",
                    "items" : { }
                  }
                }
              }
            },
            "nucleotides_tags" : {
              "items" : { }
            },
            "origin" : { },
            "purchase_places" : {
              "description" : "Country, state, or city where the product can be purchased.\n"
            },
            "purchase_places_tags" : {
              "items" : { }
            },
            "stores" : {
              "description" : "Distributor name.\n"
            },
            "stores_tags" : {
              "items" : { }
            },
            "traces_from_ingredients" : { },
            "traces_from_user" : { }
          },
          "title" : "product_extended"
        }, {
          "description" : "Metadata of a product (author, editors, creation date, etc.)\n",
          "properties" : {
            "created_t" : {
              "description" : "Date when the product was added (UNIX timestamp format).\nSee also `entry_dates_tags`\n"
            },
            "creator" : {
              "description" : "The contributor who added the product first.\n"
            },
            "editors_tags" : {
              "description" : "List of editors who edited the product.\n",
              "items" : { }
            },
            "informers_tags" : {
              "items" : { }
            },
            "interface_version_created" : { },
            "interface_version_modified" : { },
            "languages" : { },
            "languages_codes" : {
              "description" : "Same as `languages` but by language code, instead of language tags\n"
            },
            "languages_hierarchy" : {
              "items" : { }
            },
            "languages_tags" : {
              "items" : { }
            },
            "last_edit_dates_tags" : {
              "items" : { }
            },
            "last_editor" : { },
            "last_modified_by" : {
              "description" : "The username of the user who last modified the product.\n"
            },
            "last_modified_t" : {
              "description" : "Date when the product page was last modified.\n"
            },
            "owner" : {
              "description" : "Id of the producer in case he provides his own data about a product (producer platform).\n"
            },
            "owners_tags" : {
              "description" : "Tagyfied version of owner\n"
            },
            "photographers_tags" : {
              "items" : { }
            },
            "rev" : {
              "description" : "revision number of this product version (each edit adds a revision)"
            },
            "sources" : {
              "items" : {
                "properties" : {
                  "fields" : {
                    "items" : { }
                  },
                  "id" : { },
                  "images" : {
                    "items" : { }
                  },
                  "import_t" : { },
                  "manufacturer" : { },
                  "name" : { },
                  "source_licence" : { },
                  "source_licence_url" : { },
                  "url" : { }
                },
                "title" : "product_meta_source"
              }
            },
            "sources_fields" : {
              "properties" : {
                "org-gs1" : {
                  "properties" : {
                    "gln" : { },
                    "gpcCategoryCode" : { },
                    "gpcCategoryName" : { },
                    "isAllergenRelevantDataProvided" : { },
                    "lastChangeDateTime" : { },
                    "partyName" : { },
                    "productionVariantDescription" : { },
                    "publicationDateTime" : { }
                  }
                }
              },
              "title" : "product_meta_source_fields"
            },
            "teams" : { },
            "teams_tags" : {
              "items" : { }
            },
            "update_key" : { }
          }
        }, {
          "description" : "Knowledge panels for a product\n",
          "properties" : {
            "knowledge_panels" : {
              "description" : "The panels object is a dictionary of individual panel objects.\nEach key of the dictionary is the id of the panel, and the value is the panel object.\n\nApps typically display a number of root panels with known panel ids (e.g. health_card and environment_card). Panels can reference other panels and display them as sub-panels.",
              "properties" : {
                "additionalProperties" : {
                  "description" : "Each panel contains an optional title and an optional array of elements.",
                  "properties" : {
                    "type" : {
                      "description" : "Type of the panel. If set to \"card\", the panel and its sub-panels should be displayed in a card. If set to \"inline\", the panel should have its content always displayed."
                    },
                    "expanded" : {
                      "description" : "If true, the panel is to be displayed already expanded. If false, only the title should be displayed, and the user should be able to click or tap it to open the panel and display the elements."
                    },
                    "expand_for" : {
                      "description" : "If set to \"large\", the content of the panel should be expanded on large screens, but it should still be possible to unexpand it."
                    },
                    "title_element" : {
                      "description" : "The title of a panel.",
                      "properties" : {
                        "title" : { },
                        "grade" : {
                          "description" : "Indicates that the panel corresponds to a A to E grade such as the Nutri-Score of the Eco-Score.",
                          "enum" : [ "a", "b", "c", "d", "e", "unknown" ]
                        },
                        "icon_url" : { },
                        "icon_color_from_evaluation" : { },
                        "icon_size" : {
                          "description" : "If set to \"small\", the icon should be displayed at a small size.\n"
                        },
                        "type" : {
                          "description" : "Used to indicate a special type for the title, such as \"grade\" for Nutri-Score and Eco-Score."
                        }
                      },
                      "title" : "title_element",
                      "x-stoplight" : {
                        "id" : "lox0wvl9bdgy2"
                      }
                    },
                    "elements" : {
                      "description" : "An ordered list of elements to display in the content of the panel.",
                      "items" : {
                        "description" : "Each element object contains one specific element object such as a text element or an image element.\n",
                        "properties" : {
                          "type" : {
                            "description" : "The type of the included element object.\nThe type also indicates which field contains the included element object.\ne.g. if the type is \"text\", the included element object will be in the \"text_element\" field.\n\nNote that in the future, new type of element may be added,\nso your code should ignore unrecognized types, and unknown properties.\n\nTODO: add Map type\n",
                            "enum" : [ "text", "image", "action", "panel", "panel_group", "table" ]
                          },
                          "text_element" : {
                            "description" : "A text in simple HTML format to display.\n\nFor some specific texts that correspond to a product field (e.g. a product name, the ingredients list of a product),the edit_field_* fields are used to indicate how to edit the field value.",
                            "properties" : {
                              "type" : {
                                "description" : "the type of text, might influence the way you display it.\n",
                                "enum" : [ "summary", "warning", "notes" ]
                              },
                              "html" : {
                                "description" : "Text to display in HTML format."
                              },
                              "language" : {
                                "description" : "Language of the text. The name of the language is returned in the language requested when making the API call. e.g. if the text is in Polish, and the requested language is French, the language field will contain \"Polonais\" (French for \"Polish\"). Only set for specific fields such as the list of ingredients of a product."
                              },
                              "lc" : {
                                "description" : "2 letter language code for the text. Only set for specific fields such as the list of ingredients of a product."
                              },
                              "edit_field_id" : {
                                "description" : "id of the field used to edit this text in the product edit API."
                              },
                              "edit_field_type" : {
                                "description" : "Type of the product field."
                              },
                              "edit_field_value" : {
                                "description" : "Current value of the product field. This may differ from the html field which can contain extra formating."
                              },
                              "source_url" : {
                                "description" : "Link to the source"
                              },
                              "source_text" : {
                                "description" : "name of the source"
                              },
                              "source_lc" : {
                                "description" : "Source locale name"
                              },
                              "source_language" : {
                                "description" : "Human readable source locale name"
                              }
                            },
                            "title" : "text_element",
                            "x-stoplight" : {
                              "id" : "vdwxlt73qnqfa"
                            }
                          },
                          "image_element" : {
                            "properties" : {
                              "url" : {
                                "description" : "full URL of the image"
                              },
                              "width" : {
                                "description" : "Width of the image.\n\nThis is just a suggestion coming from the server, \nthe client may choose to use its own dimensions for the image.\n"
                              },
                              "height" : {
                                "description" : "Height of the image.\n\nThis is just a suggestion coming from the server,\nthe client may choose to use its own dimensions for the image.\n"
                              },
                              "alt_text" : {
                                "description" : "Alt Text of the image."
                              }
                            },
                            "title" : "image_element",
                            "x-stoplight" : {
                              "id" : "k4v4kwt489q3j"
                            }
                          },
                          "action_element" : { },
                          "panel_element" : {
                            "description" : "Panels can include other panels as sub-panels using the panel_element.",
                            "properties" : {
                              "panel_id" : {
                                "description" : "The id of the panel to include. The id is the key of the panel in the panels object returned in the knowledge_panels field."
                              }
                            },
                            "title" : "panel_element",
                            "x-stoplight" : {
                              "id" : "ymx41elz4yrnj"
                            }
                          },
                          "panel_group_element" : {
                            "description" : "The panel group element is used to display an optional title followed by a number of sub-panels.",
                            "properties" : {
                              "title" : { },
                              "panel_ids" : {
                                "description" : "The ids of the panels to include. The ids are the keys of the panels in the panels object returned in the knowledge_panels field.",
                                "items" : { }
                              }
                            },
                            "title" : "panel_group_element",
                            "x-stoplight" : {
                              "id" : "b7emlfrgiuue2"
                            }
                          },
                          "table_element" : {
                            "description" : "Element to display a table.",
                            "properties" : {
                              "id" : {
                                "description" : "An id for the table."
                              },
                              "title" : {
                                "description" : "Title of the column.\n"
                              },
                              "rows" : { },
                              "columns" : {
                                "items" : {
                                  "properties" : {
                                    "type" : { },
                                    "text" : { },
                                    "text_for_small_screens" : { },
                                    "style" : { },
                                    "column_group_id" : { },
                                    "shown_by_default" : { }
                                  },
                                  "title" : "table_column"
                                }
                              }
                            },
                            "title" : "table_element"
                          }
                        },
                        "required" : [ "type" ],
                        "title" : "element",
                        "x-stoplight" : {
                          "id" : "e2ybdrtmx0tme"
                        }
                      }
                    },
                    "level" : {
                      "description" : "a message level, as levels we use in log.\nIt might help theming the panel visualy\n"
                    },
                    "size" : {
                      "description" : "size is either empty (normal display) \nor small to indicate a panel that should have a smaller font size\n",
                      "enum" : [ "small" ]
                    },
                    "topics" : {
                      "items" : { }
                    }
                  },
                  "title" : "panel"
                }
              },
              "readOnly" : true,
              "title" : "panels"
            }
          }
        }, {
          "description" : "Specific data about a product to enable personal ranking\n",
          "properties" : {
            "attribute_groups" : {
              "description" : "Each element is an attribute that can help compute a personal ranking for the product",
              "items" : {
                "properties" : {
                  "id" : {
                    "description" : "Unique id of the attribute.\n\nIt will be use to match against preferences parameters.\n"
                  },
                  "status" : {
                    "description" : "wether we have the information to really compute this criteria or not.",
                    "enum" : [ "known", "unknown" ]
                  },
                  "title" : {
                    "description" : "A descriptive sentence about the situation of the product concerning attribute\n"
                  },
                  "match" : {
                    "description" : "a numeric value for the match,\ntelling how much the products ranks well for this particular attribute.\nThe higher the value, the better the match.\n",
                    "format" : "float",
                    "maximum" : 100,
                    "minimum" : 0
                  },
                  "grade" : {
                    "description" : "every attribute as a grade for a to e",
                    "enum" : [ "unknown", "a", "b", "c", "d", "e" ]
                  },
                  "name" : {
                    "description" : "The name of attribute, for eventual display"
                  },
                  "icon_url" : {
                    "description" : "an icon representing the attribute match (often using a color)"
                  },
                  "description" : {
                    "description" : "An eventual description of the value of the property upon which this attribute is based"
                  },
                  "description_short" : {
                    "description" : "An eventual short description of the value of the property upon which this attribute is based"
                  }
                },
                "title" : "product_attribute_group"
              }
            }
          }
        } ],
        "description" : "This is all the fields describing a product and how to display it on a page.\n\nRefer to the different sub schema for more readable entries:\n\n* [Product Base](#cmp--schemas-product-base): Base fields of a product\n* [Product Misc](#cmp--schemas-product-misc): Miscellaneous but important fields of a product\n* [Product Tags](#cmp--schemas-product-tags): Tags fields on a product\n* [Product Images](#cmp--schemas-product-images): Information about Images of a product\n* [Product Eco-Score](#cmp--schemas-product-ecoscore): Fields related to Eco-Score for a product\n* [Product Ingredients](#cmp--schemas-product-ingredients): Fields about ingredients of a product\n* [Product Nutrition](#cmp--schemas-product-nutrition): Nutrition fields of a product\n* [Product Data Quality](#cmp--schemas-product-quality): fields related to data quality for a product\n* [Product Extended](#cmp--schemas-product-extended): TODO\n* [Product Metadata](#cmp--schemas-product-meta): Metadata of a product (author, editors, etc.)\n* [Product Knowledge Panels](#cmp--schemas-product-knowledge-panels): Knowledge panels for a product\n* [Product Attribute Groups](#cmp--schemas-product-attribute-groups): Attribute groups for personal product matching\n"
      }
    }
  }
}
[main] INFO  o.o.c.l.AbstractTypeScriptClientCodegen - Hint: Environment variable 'TS_POST_PROCESS_FILE' (optional) not defined. E.g. to format the source code, please try 'export TS_POST_PROCESS_FILE="/usr/local/bin/prettier --write"' (Linux/Mac)
[main] INFO  o.o.c.l.AbstractTypeScriptClientCodegen - Note: To enable file post-processing, 'enablePostProcessFile' must be set to `true` (--enable-post-process-file for CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as get_product_by_barcode_200_response_allOf_product. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings get_product_by_barcode_200_response_allOf_product=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings get_product_by_barcode_200_response_allOf_product=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as get_product_by_barcode_200_response. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings get_product_by_barcode_200_response=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings get_product_by_barcode_200_response=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as get_cgi_product_image_upload_pl_request. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings get_cgi_product_image_upload_pl_request=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings get_cgi_product_image_upload_pl_request=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as get_cgi_product_image_upload_pl_200_response_files_inner. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings get_cgi_product_image_upload_pl_200_response_files_inner=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings get_cgi_product_image_upload_pl_200_response_files_inner=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as get_cgi_product_image_upload_pl_200_response_image. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings get_cgi_product_image_upload_pl_200_response_image=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings get_cgi_product_image_upload_pl_200_response_image=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as get_cgi_product_image_upload_pl_200_response. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings get_cgi_product_image_upload_pl_200_response=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings get_cgi_product_image_upload_pl_200_response=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as get_cgi_ingredients_pl_200_response. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings get_cgi_ingredients_pl_200_response=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings get_cgi_ingredients_pl_200_response=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as get_cgi_product_image_crop_pl_200_response_image. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings get_cgi_product_image_crop_pl_200_response_image=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings get_cgi_product_image_crop_pl_200_response_image=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as get_cgi_product_image_crop_pl_200_response. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings get_cgi_product_image_crop_pl_200_response=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings get_cgi_product_image_crop_pl_200_response=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as post_cgi_product_image_crop_pl_request. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings post_cgi_product_image_crop_pl_request=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings post_cgi_product_image_crop_pl_request=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as post_cgi_product_image_unselect_pl_request. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings post_cgi_product_image_unselect_pl_request=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings post_cgi_product_image_unselect_pl_request=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as post_cgi_product_image_unselect_pl_200_response. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings post_cgi_product_image_unselect_pl_200_response=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings post_cgi_product_image_unselect_pl_200_response=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as post_cgi_product_jqm2_pl_request. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings post_cgi_product_jqm2_pl_request=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings post_cgi_product_jqm2_pl_request=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as post_cgi_product_jqm2_pl_200_response. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings post_cgi_product_jqm2_pl_200_response=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings post_cgi_product_jqm2_pl_200_response=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as product_misc_nutrient_levels. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings product_misc_nutrient_levels=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings product_misc_nutrient_levels=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as Packaging_component_shape. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings Packaging_component_shape=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings Packaging_component_shape=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as Packaging_component_material. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings Packaging_component_material=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings Packaging_component_material=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as Packaging_component_recycling_instruction. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings Packaging_component_recycling_instruction=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings Packaging_component_recycling_instruction=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as Packaging_component__READ_. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings Packaging_component__READ_=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings Packaging_component__READ_=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as image_sizes_full. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings image_sizes_full=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings image_sizes_full=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as image_sizes. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings image_sizes=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings image_sizes=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as product_images_front_sizes_100. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings product_images_front_sizes_100=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings product_images_front_sizes_100=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as product_images_front_sizes. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings product_images_front_sizes=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings product_images_front_sizes=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as product_images_front. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings product_images_front=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings product_images_front=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as product_selected_images_front. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings product_selected_images_front=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings product_selected_images_front=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as ecoscore_data_adjustments_origins_of_ingredients. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings ecoscore_data_adjustments_origins_of_ingredients=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings ecoscore_data_adjustments_origins_of_ingredients=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as ecoscore_data_adjustments_packaging. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings ecoscore_data_adjustments_packaging=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings ecoscore_data_adjustments_packaging=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as ecoscore_data_adjustments_production_system. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings ecoscore_data_adjustments_production_system=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings ecoscore_data_adjustments_production_system=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as ecoscore_data_adjustments_threatened_species. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings ecoscore_data_adjustments_threatened_species=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings ecoscore_data_adjustments_threatened_species=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as ecoscore_data_adjustments. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings ecoscore_data_adjustments=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings ecoscore_data_adjustments=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as ecoscore_data_agribalyse. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings ecoscore_data_agribalyse=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings ecoscore_data_agribalyse=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as ecoscore_data_missing. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings ecoscore_data_missing=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings ecoscore_data_missing=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as ecoscore_data_previous_data. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings ecoscore_data_previous_data=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings ecoscore_data_previous_data=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as product_ingredients_ingredients_analysis. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings product_ingredients_ingredients_analysis=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings product_ingredients_ingredients_analysis=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as product_nutrition_nutriments. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings product_nutrition_nutriments=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings product_nutrition_nutriments=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as product_nutrition_nutriscore_data. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings product_nutrition_nutriscore_data=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings product_nutrition_nutriscore_data=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as product_extended_categories_properties. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings product_extended_categories_properties=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings product_extended_categories_properties=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as product_extended_owner_fields_additionalProperties. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings product_extended_owner_fields_additionalProperties=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings product_extended_owner_fields_additionalProperties=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as product_extended_owner_fields. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings product_extended_owner_fields=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings product_extended_owner_fields=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as product_extended_nova_groups_markers. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings product_extended_nova_groups_markers=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings product_extended_nova_groups_markers=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as product_meta_source_manufacturer. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings product_meta_source_manufacturer=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings product_meta_source_manufacturer=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as product_meta_source_fields_org_gs1. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings product_meta_source_fields_org_gs1=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings product_meta_source_fields_org_gs1=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as get_search_200_response_products_inner. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings get_search_200_response_products_inner=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings get_search_200_response_products_inner=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as get_search_200_response. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings get_search_200_response=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings get_search_200_response=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as get_cgi_suggest_pl_200_response_inner. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings get_cgi_suggest_pl_200_response_inner=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings get_cgi_suggest_pl_200_response_inner=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as get_attribute_groups_200_response_inner_attributes_inner. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings get_attribute_groups_200_response_inner_attributes_inner=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings get_attribute_groups_200_response_inner_attributes_inner=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as get_attribute_groups_200_response_inner. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings get_attribute_groups_200_response_inner=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings get_attribute_groups_200_response_inner=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as get_preferences_200_response_inner. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings get_preferences_200_response_inner=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings get_preferences_200_response_inner=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as product_selected_images_1_front_display. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings product_selected_images_1_front_display=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings product_selected_images_1_front_display=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as product_selected_images_1_front_small. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings product_selected_images_1_front_small=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings product_selected_images_1_front_small=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as product_selected_images_1_front_thumb. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings product_selected_images_1_front_thumb=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings product_selected_images_1_front_thumb=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as product_selected_images_1_front. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings product_selected_images_1_front=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings product_selected_images_1_front=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as product_selected_images_1. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings product_selected_images_1=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings product_selected_images_1=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as ecoscore_data_1_adjustments_origins_of_ingredients_transportation_scores. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings ecoscore_data_1_adjustments_origins_of_ingredients_transportation_scores=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings ecoscore_data_1_adjustments_origins_of_ingredients_transportation_scores=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as ecoscore_data_1_adjustments_origins_of_ingredients. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings ecoscore_data_1_adjustments_origins_of_ingredients=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings ecoscore_data_1_adjustments_origins_of_ingredients=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as ecoscore_data_1_adjustments. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings ecoscore_data_1_adjustments=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings ecoscore_data_1_adjustments=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as ecoscore_data_1. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings ecoscore_data_1=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings ecoscore_data_1=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as product_extended_owner_fields_1_additionalProperties. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings product_extended_owner_fields_1_additionalProperties=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings product_extended_owner_fields_1_additionalProperties=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as product_extended_owner_fields_1. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings product_extended_owner_fields_1=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings product_extended_owner_fields_1=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as Product_allOf_languages_codes. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings Product_allOf_languages_codes=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings Product_allOf_languages_codes=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as Product_allOf_manufacturer. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings Product_allOf_manufacturer=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings Product_allOf_manufacturer=NewModel,ModelA=NewModelA in CLI).
[main] INFO  o.o.codegen.InlineModelResolver - Inline schema created as product_meta_source_1. To have complete control of the model name, set the `title` field or use the modelNameMapping option (e.g. --model-name-mappings product_meta_source_1=NewModel,ModelA=NewModelA in CLI) or inlineSchemaNameMapping option (--inline-schema-name-mappings product_meta_source_1=NewModel,ModelA=NewModelA in CLI).
[main] WARN  o.o.codegen.DefaultCodegen - Generation using 3.1.0 specs is in development and is not officially supported yet. If you would like to expedite development, please consider woking on the open issues in the 3.1.0 project: https://github.com/orgs/OpenAPITools/projects/4/views/1 and reach out to our team on Slack at https://join.slack.com/t/openapi-generator/shared_invite/zt-12jxxd7p2-XUeQM~4pzsU9x~eGLQqX2g
[main] INFO  o.o.codegen.DefaultGenerator - Model Nutrients not generated since it's an alias to array (without property) and `generateAliasAsModel` is set to false (default)
[main] INFO  o.o.codegen.DefaultGenerator - Model Ingredients not generated since it's an alias to array (without property) and `generateAliasAsModel` is set to false (default)
[main] WARN  o.o.codegen.DefaultCodegen - More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.
[main] INFO  o.o.codegen.DefaultGenerator - Model get_cgi_product_image_upload_pl_request not generated since it's marked as unused (due to form parameters) and `skipFormModel` (global property) set to true (default)
[main] INFO  o.o.codegen.DefaultGenerator - Model post_cgi_product_image_crop_pl_request not generated since it's marked as unused (due to form parameters) and `skipFormModel` (global property) set to true (default)
[main] INFO  o.o.codegen.DefaultGenerator - Model post_cgi_product_image_unselect_pl_request not generated since it's marked as unused (due to form parameters) and `skipFormModel` (global property) set to true (default)
[main] INFO  o.o.codegen.DefaultGenerator - Model post_cgi_product_jqm2_pl_request not generated since it's marked as unused (due to form parameters) and `skipFormModel` (global property) set to true (default)
[main] WARN  o.o.codegen.DefaultCodegen - More than one inline schema specified in allOf:. Only the first one is recognized. All others are ignored.
[main] INFO  o.o.codegen.DefaultGenerator - Model product_selected_images_1_front_display not generated since it's a free-form object
[main] INFO  o.o.codegen.DefaultGenerator - Model product_selected_images_1_front_small not generated since it's a free-form object
[main] INFO  o.o.codegen.DefaultGenerator - Model product_selected_images_1_front_thumb not generated since it's a free-form object
[main] INFO  o.o.codegen.DefaultGenerator - Model ecoscore_data_1_adjustments_origins_of_ingredients_transportation_scores not generated since it's a free-form object
[main] INFO  o.o.codegen.DefaultGenerator - Model Product_allOf_languages_codes not generated since it's a free-form object
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/AdjustmentsOriginOfIngredient.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/AdjustmentsPackagingItem.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/EcoscoreData.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/EcoscoreData1.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/EcoscoreData1Adjustments.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/EcoscoreData1AdjustmentsOriginsOfIngredients.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/EcoscoreDataAdjustments.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/EcoscoreDataAdjustmentsOriginsOfIngredients.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/EcoscoreDataAdjustmentsPackaging.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/EcoscoreDataAdjustmentsProductionSystem.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/EcoscoreDataAdjustmentsThreatenedSpecies.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/EcoscoreDataAgribalyse.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/EcoscoreDataMissing.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/EcoscoreDataPreviousData.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/Element.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/GetAttributeGroups200ResponseInner.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/GetAttributeGroups200ResponseInnerAttributesInner.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/GetCgiIngredientsPl200Response.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/GetCgiProductImageCropPl200Response.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/GetCgiProductImageCropPl200ResponseImage.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/GetCgiProductImageUploadPl200Response.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/GetCgiProductImageUploadPl200ResponseFilesInner.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/GetCgiProductImageUploadPl200ResponseImage.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/GetCgiSuggestPl200ResponseInner.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/GetPreferences200ResponseInner.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/GetProductByBarcode200ResponseAllOfProduct.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/GetProductByBarcodeResponse.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/GetSearch200Response.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/GetSearch200ResponseProductsInner.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/Image.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ImageElement.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ImageSizes.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ImageSizesFull.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/Ingredient.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/Nutrient.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/PackagingComponentMaterial.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/PackagingComponentREAD.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/PackagingComponentRecyclingInstruction.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/PackagingComponentShape.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/Panel.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/PanelElement.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/PanelGroupElement.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/Panels.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/PostCgiProductImageUnselectPl200Response.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/PostCgiProductJqm2Pl200Response.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/Product.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductAllOfManufacturer.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductAttributeGroup.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductAttributeGroups.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductBase.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductDataQuality.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductEcoScore.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductExtendedCategoriesProperties.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductExtendedNovaGroupsMarkers.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductExtendedOwnerFields.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductExtendedOwnerFields1.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductExtendedOwnerFields1AdditionalProperties.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductExtendedOwnerFieldsAdditionalProperties.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductImages.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductImagesFront.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductImagesFrontSizes.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductImagesFrontSizes100.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductIngredients.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductIngredientsIngredientsAnalysis.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductKnowledgePanels.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductMetaSource.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductMetaSource1.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductMetaSourceFields.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductMetaSourceFieldsOrgGs1.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductMetaSourceManufacturer.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductMetadata.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductMisc.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductMiscNutrientLevels.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductNutrition.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductNutritionNutriments.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductNutritionNutriscoreData.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductSelectedImages.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductSelectedImages1.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductSelectedImages1Front.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductSelectedImagesFront.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/ProductTags.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/TableColumn.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/TableElement.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/TextElement.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/TitleElement.ts
[main] WARN  o.o.codegen.DefaultCodegen - Could not compute datatypeWithEnum from string, null
[main] WARN  o.o.codegen.DefaultCodegen - Could not compute datatypeWithEnum from string, null
[main] WARN  o.o.codegen.DefaultCodegen - Could not compute datatypeWithEnum from string, null
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/apis/DefaultApi.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/apis/PersonalSearchApi.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/apis/ReadRequestsApi.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/apis/WriteRequestsApi.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/index.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/runtime.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/README.md
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/package.json
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/tsconfig.json
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/tsconfig.esm.json
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/.npmignore
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/.gitignore
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/models/index.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/src/apis/index.ts
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/.openapi-generator-ignore
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/.openapi-generator/VERSION
[main] INFO  o.o.codegen.TemplateManager - writing file /mnt/c/Projects/Iside/fe-client/api-client-ts/.openapi-generator/FILES
################################################################################
# Thanks for using OpenAPI Generator.                                          #
# Please consider donation to help us maintain this project 🙏                 #
# https://opencollective.com/openapi_generator/donate                          #
################################################################################
